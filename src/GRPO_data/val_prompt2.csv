db_id,question,query,database_schema,target_schema
concert_singer,How many vocalists do we have?,SELECT COUNT(*) FROM singer,"CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: singer;
###Columns: singer.name, singer.song_release_year, singer.country, singer.singer_id, singer.song_name, singer.age;
"
concert_singer,What is the total number of musicians?,SELECT COUNT(*) FROM singer,"CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: singer;
###Columns: singer.name, singer.song_release_year, singer.country, singer.singer_id, singer.song_name, singer.age;
"
concert_singer,"Show name, nationality, age for all vocalists ordered by age from the oldest to the youngest.","SELECT name ,  country ,  age FROM singer ORDER BY age DESC","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: singer;
###Columns: singer.name, singer.country, singer.age;
"
concert_singer,"What are the names, nationalities, and ages for every musicians in descending order of age?","SELECT name ,  country ,  age FROM singer ORDER BY age DESC","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: singer;
###Columns: singer.name, singer.country, singer.age;
"
concert_singer,"What is the average, minimum, and maximum age of all vocalists from France?","SELECT AVG(age) ,  MIN(age) ,  MAX(age) FROM singer WHERE country  =  'France'","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: singer;
###Columns: singer.country, singer.age;
"
concert_singer,"What is the average, minimum, and maximum age for all French musicians?","SELECT AVG(age) ,  MIN(age) ,  MAX(age) FROM singer WHERE country  =  'France'","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: singer;
###Columns: singer.country, singer.age;
"
concert_singer,Show the name and the publish year of the song by the youngest vocalists.,"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: singer;
###Columns: singer.song_release_year, singer.age, singer.song_name;
"
concert_singer,What are the names and publish years for all the songs of the youngest musicians?,"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: singer;
###Columns: singer.song_release_year, singer.age, singer.song_name;
"
concert_singer,What are all distinct nationalities where vocalists above age 20 are from?,SELECT DISTINCT country FROM singer WHERE age  >  20,"CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: singer;
###Columns: singer.country, singer.age;
"
concert_singer,What are the different nationalities with musicians above age 20?,SELECT DISTINCT country FROM singer WHERE age  >  20,"CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: singer;
###Columns: singer.country, singer.age;
"
concert_singer,Show all State and the number of vocalists in each country.,"SELECT country ,  COUNT(*) FROM singer GROUP BY country","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: singer;
###Columns: singer.country;
"
concert_singer,How many musicians are from each State?,"SELECT country ,  COUNT(*) FROM singer GROUP BY country","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: singer;
###Columns: singer.country;
"
concert_singer,List all music titles by vocalists above the average age.,SELECT song_name FROM singer WHERE age  >  (SELECT AVG(age) FROM singer),"CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: singer;
###Columns: singer.age, singer.song_name;
"
concert_singer,What are all the music titles by musicians who are older than average?,SELECT song_name FROM singer WHERE age  >  (SELECT AVG(age) FROM singer),"CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: singer;
###Columns: singer.age, singer.song_name;
"
concert_singer,Show position and name for all stadiums with number of seats between 5000 and 10000.,"SELECT location ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: stadium;
###Columns: stadium.capacity, stadium.name, stadium.location;
"
concert_singer,What are the addresses and names of all stations with number of seats between 5000 and 10000?,"SELECT location ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: stadium;
###Columns: stadium.capacity, stadium.name, stadium.location;
"
concert_singer,What is the average and the maximum seats of all stadiums?,"SELECT AVG(capacity) ,  MAX(capacity) FROM stadium","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: stadium;
###Columns: stadium.capacity;
"
concert_singer,What is the average and maximum seats for all stations?,"SELECT AVG(capacity) ,  MAX(capacity) FROM stadium","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: stadium;
###Columns: stadium.capacity;
"
concert_singer,What is the name and number of seats for the stadium with highest average attendance?,"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: stadium;
###Columns: stadium.capacity, stadium.name, stadium.average;
"
concert_singer,What is the name and number of seats for the stadium with the highest average attendance?,"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: stadium;
###Columns: stadium.capacity, stadium.name, stadium.average;
"
concert_singer,How many shows are there in year 2014 or 2015?,SELECT COUNT(*) FROM concert WHERE year  =  2014 OR year  =  2015,"CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: concert;
###Columns: concert.year, concert.concert_id, concert.concert_name, concert.stadium_id, concert.theme;
"
concert_singer,How many shows occurred in 2014 or 2015?,SELECT COUNT(*) FROM concert WHERE year  =  2014 OR year  =  2015,"CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: concert;
###Columns: concert.year, concert.concert_id, concert.concert_name, concert.stadium_id, concert.theme;
"
concert_singer,Show the stadium name and the number of shows in each stadium.,"SELECT t2.name ,  COUNT(*) FROM concert as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.stadium_id GROUP BY t1.stadium_id","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: stadium, concert;
###Columns: stadium.name, stadium.stadium_id, concert.stadium_id;
"
concert_singer,"For each stadium, how many shows play there?","SELECT t2.name ,  COUNT(*) FROM concert as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.stadium_id GROUP BY t1.stadium_id","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: stadium, concert;
###Columns: stadium.name, stadium.stadium_id, concert.stadium_id;
"
concert_singer,Show the stadium name and number of seats with most number of shows in year 2014 or after.,"SELECT t2.name ,  t2.capacity FROM concert as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.stadium_id WHERE t1.year  >=  2014 GROUP BY t2.stadium_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: stadium, concert;
###Columns: stadium.capacity, stadium.name, stadium.stadium_id, concert.year, concert.stadium_id;
"
concert_singer,What is the name and number of seats of the stadium with the most shows after 2013?,"SELECT t2.name ,  t2.capacity FROM concert as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.stadium_id WHERE t1.year  >=  2014 GROUP BY t2.stadium_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: stadium, concert;
###Columns: stadium.capacity, stadium.name, stadium.stadium_id, concert.year, concert.stadium_id;
"
concert_singer,Which year has most number of shows?,SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: concert;
###Columns: concert.year, concert.concert_id, concert.concert_name, concert.stadium_id, concert.theme;
"
concert_singer,What is the time that had the most shows?,SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: concert;
###Columns: concert.year, concert.concert_id, concert.concert_name, concert.stadium_id, concert.theme;
"
concert_singer,Show the stadium names without any shows.,SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert),"CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: stadium, concert;
###Columns: stadium.name, stadium.stadium_id, concert.stadium_id;
"
concert_singer,What are the names of the stadiums without any shows?,SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert),"CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: stadium, concert;
###Columns: stadium.name, stadium.stadium_id, concert.stadium_id;
"
concert_singer,Show States where a singer above age 40 and a singer below 30 are from.,SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30,"CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: singer;
###Columns: singer.country, singer.age;
"
concert_singer,Show names for all stadiums except for stadiums having a shows in year 2014.,SELECT name FROM stadium EXCEPT SELECT t2.name FROM concert as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.stadium_id WHERE t1.year  =  2014,"CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: stadium, concert;
###Columns: stadium.name, stadium.stadium_id, concert.year, concert.stadium_id;
"
concert_singer,What are the names of all stadiums that did not have a shows in 2014?,SELECT name FROM stadium EXCEPT SELECT t2.name FROM concert as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.stadium_id WHERE t1.year  =  2014,"CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: stadium, concert;
###Columns: stadium.name, stadium.stadium_id, concert.year, concert.stadium_id;
"
concert_singer,Show the name and theme for all shows and the number of vocalists in each shows.,"SELECT t2.concert_name ,  t2.theme ,  COUNT(*) FROM singer_in_concert as t1 JOIN concert as t2 ON t1.concert_id  =  t2.concert_id GROUP BY t2.concert_id","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: concert, singer_in_concert;
###Columns: concert.concert_id, concert.concert_name, concert.theme, singer_in_concert.concert_id;
"
concert_singer,"What are the names, themes, and number of singers for each and every show?","SELECT t2.concert_name ,  t2.theme ,  COUNT(*) FROM singer_in_concert as t1 JOIN concert as t2 ON t1.concert_id  =  t2.concert_id GROUP BY t2.concert_id","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: concert, singer_in_concert;
###Columns: concert.concert_id, concert.concert_name, concert.theme, singer_in_concert.concert_id;
"
concert_singer,List singer names and number of shows for each musicians.,"SELECT t2.name ,  COUNT(*) FROM singer_in_concert as t1 JOIN singer as t2 ON t1.singer_id  =  t2.singer_id GROUP BY t2.singer_id","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: singer, singer_in_concert;
###Columns: singer.name, singer.singer_id, singer_in_concert.singer_id;
"
concert_singer,What are the names of the singers and number of shows for each person?,"SELECT t2.name ,  COUNT(*) FROM singer_in_concert as t1 JOIN singer as t2 ON t1.singer_id  =  t2.singer_id GROUP BY t2.singer_id","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: singer, singer_in_concert;
###Columns: singer.name, singer.singer_id, singer_in_concert.singer_id;
"
concert_singer,List all vocalist names in shows in year 2014.,SELECT t2.name FROM singer_in_concert as t1 JOIN singer as t2 ON t1.singer_id  =  t2.singer_id JOIN concert as t3 ON t1.concert_id  =  t3.concert_id WHERE t3.year  =  2014,"CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: singer, singer_in_concert, concert;
###Columns: singer.name, singer.singer_id, singer_in_concert.concert_id, singer_in_concert.singer_id, concert.year, concert.concert_id;
"
concert_singer,What are the names of the musicians who performed in a musical performance in 2014?,SELECT t2.name FROM singer_in_concert as t1 JOIN singer as t2 ON t1.singer_id  =  t2.singer_id JOIN concert as t3 ON t1.concert_id  =  t3.concert_id WHERE t3.year  =  2014,"CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: singer, singer_in_concert, concert;
###Columns: singer.name, singer.singer_id, singer_in_concert.concert_id, singer_in_concert.singer_id, concert.year, concert.concert_id;
"
concert_singer,what is the name and nation of the vocalist who have a song having 'Hey' in its title?,"SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: singer;
###Columns: singer.name, singer.country, singer.song_name;
"
concert_singer,What is the name and nationality of origin of every musicians who has a song with the word 'Hey' in its title?,"SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: singer;
###Columns: singer.name, singer.country, singer.song_name;
"
concert_singer,Find the name and position of the stadiums which some musical performances happened in the years of both 2014 and 2015.,"SELECT t2.name ,  t2.location FROM concert as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.stadium_id WHERE t1.year  =  2014 INTERSECT SELECT t2.name ,  t2.location FROM concert as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.stadium_id WHERE t1.year  =  2015","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: stadium, concert;
###Columns: stadium.name, stadium.location, stadium.stadium_id, concert.year, concert.stadium_id;
"
concert_singer,What are the names and addresses of the stadiums that had musical performances that occurred in both 2014 and 2015?,"SELECT t2.name ,  t2.location FROM concert as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.stadium_id WHERE t1.year  =  2014 INTERSECT SELECT t2.name ,  t2.location FROM concert as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.stadium_id WHERE t1.year  =  2015","CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: stadium, concert;
###Columns: stadium.name, stadium.location, stadium.stadium_id, concert.year, concert.stadium_id;
"
concert_singer,Find the number of musical performances happened in the stadium with the highest number of seats.,SELECT COUNT(*) FROM concert as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.stadium_id ORDER BY t2.capacity DESC LIMIT 1,"CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: concert, stadium;
###Columns: concert.stadium_id, stadium.capacity, stadium.stadium_id;
"
concert_singer,What are the number of musical performances that occurred in the stadium with the largest number of seats?,SELECT COUNT(*) FROM concert as t1 JOIN stadium as t2 ON t1.stadium_id  =  t2.stadium_id ORDER BY t2.capacity DESC LIMIT 1,"CREATE TABLE `stadium` (
  Stadium_ID INT PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity INT,
  Highest INT,
  Lowest INT,
  Average INT
);

CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age INT,
  Is_male bool
);

CREATE TABLE `concert` (
  concert_ID INT PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT REFERENCES stadium(Stadium_ID),
  Year TEXT
);

CREATE TABLE `singer_in_concert` (
  concert_ID INT PRIMARY KEY REFERENCES concert(concert_ID),
  Singer_ID TEXT PRIMARY KEY REFERENCES singer(Singer_ID)
);

","###Tables: concert, stadium;
###Columns: concert.stadium_id, stadium.capacity, stadium.stadium_id;
"
pets_1,Find the number of animals who is heavier than 10.,SELECT COUNT(*) FROM pets WHERE weight  >  10,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: pets;
###Columns: pets.weight;
"
pets_1,How many animals heavier than 10?,SELECT COUNT(*) FROM pets WHERE weight  >  10,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: pets;
###Columns: pets.weight;
"
pets_1,Find the weight of the youngest puppy.,SELECT weight FROM pets ORDER BY pet_age LIMIT 1,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: pets;
###Columns: pets.weight, pets.pet_age;
"
pets_1,How much does the youngest puppy weigh?,SELECT weight FROM pets ORDER BY pet_age LIMIT 1,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: pets;
###Columns: pets.weight, pets.pet_age;
"
pets_1,Find the maximum weight for each category of pet. List the maximum weight and pet category.,"SELECT MAX(weight) ,  pettype FROM pets GROUP BY pettype","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: pets;
###Columns: pets.pettype, pets.weight;
"
pets_1,List the maximum weight and category for each species of domestic animals.,"SELECT MAX(weight) ,  pettype FROM pets GROUP BY pettype","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: pets;
###Columns: pets.pettype, pets.weight;
"
pets_1,Find number of animals owned by students who are older than 20.,SELECT COUNT(*) FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid WHERE t1.age  >  20,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet;
###Columns: student.age, student.stuid, has_pet.stuid;
"
pets_1,How many animals are owned by students that have an age greater than 20?,SELECT COUNT(*) FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid WHERE t1.age  >  20,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet;
###Columns: student.age, student.stuid, has_pet.stuid;
"
pets_1,Find the number of puppies that are raised by female students (with gender F).,SELECT COUNT(*) fROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid JOIN pets as t3 ON t2.petid  =  t3.petid WHERE t1.sex  =  'f' AND t3.pettype  =  'dog',"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet, pets;
###Columns: student.sex, student.stuid, has_pet.petid, has_pet.stuid, pets.petid, pets.pettype;
"
pets_1,How many puppies are raised by female students?,SELECT COUNT(*) fROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid JOIN pets as t3 ON t2.petid  =  t3.petid WHERE t1.sex  =  'f' AND t3.pettype  =  'dog',"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet, pets;
###Columns: student.sex, student.stuid, has_pet.petid, has_pet.stuid, pets.petid, pets.pettype;
"
pets_1,Find the number of distinct species of domestic animals.,SELECT COUNT(DISTINCT pettype) FROM pets,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: pets;
###Columns: pets.pettype;
"
pets_1,How many different species of animals are there?,SELECT COUNT(DISTINCT pettype) FROM pets,"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: pets;
###Columns: pets.pettype;
"
pets_1,Find the given name of students who have kitten or puppy pet.,SELECT DISTINCT t1.fname FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid JOIN pets as t3 ON t3.petid  =  t2.petid WHERE t3.pettype  =  'cat' OR t3.pettype  =  'dog',"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet, pets;
###Columns: student.fname, student.stuid, has_pet.petid, has_pet.stuid, pets.petid, pets.pettype;
"
pets_1,What are the given names of every student who has a kitten or puppy as a pet?,SELECT DISTINCT t1.fname FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid JOIN pets as t3 ON t3.petid  =  t2.petid WHERE t3.pettype  =  'cat' OR t3.pettype  =  'dog',"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet, pets;
###Columns: student.fname, student.stuid, has_pet.petid, has_pet.stuid, pets.petid, pets.pettype;
"
pets_1,Find the name of students who have both kitten and puppy pets.,SELECT t1.fname FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid JOIN pets as t3 ON t3.petid  =  t2.petid WHERE t3.pettype  =  'cat' INTERSECT SELECT t1.fname FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid JOIN pets as t3 ON t3.petid  =  t2.petid WHERE t3.pettype  =  'dog',"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet, pets;
###Columns: student.fname, student.stuid, has_pet.petid, has_pet.stuid, pets.petid, pets.pettype;
"
pets_1,What are the students' given names who have both kittens and puppies as pets?,SELECT t1.fname FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid JOIN pets as t3 ON t3.petid  =  t2.petid WHERE t3.pettype  =  'cat' INTERSECT SELECT t1.fname FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid JOIN pets as t3 ON t3.petid  =  t2.petid WHERE t3.pettype  =  'dog',"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet, pets;
###Columns: student.fname, student.stuid, has_pet.petid, has_pet.stuid, pets.petid, pets.pettype;
"
pets_1,Find the major and age of students who do not have a kitten pet.,"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT t1.stuid FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid JOIN pets as t3 ON t3.petid  =  t2.petid WHERE t3.pettype  =  'cat')","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet, pets;
###Columns: student.stuid, has_pet.petid, has_pet.stuid, pets.petid, pets.pettype;
"
pets_1,"What discipline is every student who does not own a kitten as a pet, and also how old are they?","SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT t1.stuid FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid JOIN pets as t3 ON t3.petid  =  t2.petid WHERE t3.pettype  =  'cat')","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet, pets;
###Columns: student.stuid, has_pet.petid, has_pet.stuid, pets.petid, pets.pettype;
"
pets_1,Find the id of students who do not have a kitten pet.,SELECT stuid FROM student EXCEPT SELECT t1.stuid FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid JOIN pets as t3 ON t3.petid  =  t2.petid WHERE t3.pettype  =  'cat',"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet, pets;
###Columns: student.stuid, has_pet.petid, has_pet.stuid, pets.petid, pets.pettype;
"
pets_1,What are the ids of the students who do not own kittens as pets?,SELECT stuid FROM student EXCEPT SELECT t1.stuid FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid JOIN pets as t3 ON t3.petid  =  t2.petid WHERE t3.pettype  =  'cat',"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet, pets;
###Columns: student.stuid, has_pet.petid, has_pet.stuid, pets.petid, pets.pettype;
"
pets_1,Find the given name and age of students who have a puppy but do not have a cat as a pet.,"SELECT t1.fname ,  t1.age FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid JOIN pets as t3 ON t3.petid  =  t2.petid WHERE t3.pettype  =  'dog' AND t1.stuid NOT IN (SELECT t1.stuid FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid JOIN pets as t3 ON t3.petid  =  t2.petid WHERE t3.pettype  =  'cat')","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet, pets;
###Columns: student.age, student.fname, student.stuid, has_pet.petid, has_pet.stuid, pets.petid, pets.pettype;
"
pets_1,What is the given name of every student who has a dog but does not have a kitten?,"SELECT t1.fname ,  t1.age FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid JOIN pets as t3 ON t3.petid  =  t2.petid WHERE t3.pettype  =  'dog' AND t1.stuid NOT IN (SELECT t1.stuid FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid JOIN pets as t3 ON t3.petid  =  t2.petid WHERE t3.pettype  =  'cat')","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet, pets;
###Columns: student.age, student.fname, student.stuid, has_pet.petid, has_pet.stuid, pets.petid, pets.pettype;
"
pets_1,Find the category and weight of the youngest pet.,"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: pets;
###Columns: pets.pettype, pets.weight, pets.pet_age;
"
pets_1,"What species of animal is the youngest animal, and how much does it weigh?","SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: pets;
###Columns: pets.pettype, pets.weight, pets.pet_age;
"
pets_1,Find the id and weight of all animals whose age is older than 1.,"SELECT petid ,  weight FROM pets WHERE pet_age  >  1","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: pets;
###Columns: pets.petid, pets.weight, pets.pet_age;
"
pets_1,What is the id and weight of every animals who is older than 1?,"SELECT petid ,  weight FROM pets WHERE pet_age  >  1","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: pets;
###Columns: pets.petid, pets.weight, pets.pet_age;
"
pets_1,Find the average and maximum age for each species of animal.,"SELECT AVG(pet_age) ,  MAX(pet_age) ,  pettype FROM pets GROUP BY pettype","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: pets;
###Columns: pets.pettype, pets.pet_age;
"
pets_1,What is the average and maximum age for each pet species?,"SELECT AVG(pet_age) ,  MAX(pet_age) ,  pettype FROM pets GROUP BY pettype","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: pets;
###Columns: pets.pettype, pets.pet_age;
"
pets_1,Find the average weight for each pet category.,"SELECT AVG(weight) ,  pettype FROM pets GROUP BY pettype","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: pets;
###Columns: pets.pettype, pets.weight;
"
pets_1,What is the average weight for each species of pet?,"SELECT AVG(weight) ,  pettype FROM pets GROUP BY pettype","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: pets;
###Columns: pets.pettype, pets.weight;
"
pets_1,Find the given name and age of students who have a pet.,"SELECT DISTINCT t1.fname ,  t1.age FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet;
###Columns: student.age, student.fname, student.stuid, has_pet.stuid;
"
pets_1,What are the different given names and ages of the students who do have pets?,"SELECT DISTINCT t1.fname ,  t1.age FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet;
###Columns: student.age, student.fname, student.stuid, has_pet.stuid;
"
pets_1,Find the id of the animals owned by student whose family name is 'Smith'.,SELECT t2.petid FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid WHERE t1.lname  =  'Smith',"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: has_pet, student;
###Columns: has_pet.petid, has_pet.stuid, student.lname, student.stuid;
"
pets_1,What is the id of the animals owned by the student whose family name is 'Smith'?,SELECT t2.petid FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid WHERE t1.lname  =  'Smith',"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: has_pet, student;
###Columns: has_pet.petid, has_pet.stuid, student.lname, student.stuid;
"
pets_1,Find the number of animals for each student who has any pet and student id.,"SELECT COUNT(*) ,  t1.stuid FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid GROUP BY t1.stuid","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet;
###Columns: student.stuid, has_pet.stuid;
"
pets_1,"For students who have pets, how many animals does each student have?","SELECT COUNT(*) ,  t1.stuid FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid GROUP BY t1.stuid","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet;
###Columns: student.stuid, has_pet.stuid;
"
pets_1,Find the given name and gender of student who have more than one pet.,"SELECT t1.fname ,  t1.sex FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid GROUP BY t1.stuid HAVING COUNT(*)  >  1","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet;
###Columns: student.stuid, student.fname, student.sex, has_pet.stuid;
"
pets_1,What is the given name and gender of the all the students who have more than one pet?,"SELECT t1.fname ,  t1.sex FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid GROUP BY t1.stuid HAVING COUNT(*)  >  1","CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet;
###Columns: student.stuid, student.fname, student.sex, has_pet.stuid;
"
pets_1,Find the family name of the student who has a kitten that is age 3.,SELECT t1.lname FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid JOIN pets as t3 ON t3.petid  =  t2.petid WHERE t3.pet_age  =  3 AND t3.pettype  =  'cat',"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet, pets;
###Columns: student.lname, student.stuid, has_pet.petid, has_pet.stuid, pets.petid, pets.pettype, pets.pet_age;
"
pets_1,What is the family name of the student who has a kitten that is 3 years old?,SELECT t1.lname FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid JOIN pets as t3 ON t3.petid  =  t2.petid WHERE t3.pet_age  =  3 AND t3.pettype  =  'cat',"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet, pets;
###Columns: student.lname, student.stuid, has_pet.petid, has_pet.stuid, pets.petid, pets.pettype, pets.pet_age;
"
pets_1,Find the average age of students who do not have any pet.,SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT t1.stuid FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid),"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet;
###Columns: student.stuid, has_pet.stuid;
"
pets_1,What is the average age for all students who do not own any pets?,SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT t1.stuid FROM student as t1 JOIN has_pet as t2 ON t1.stuid  =  t2.stuid),"CREATE TABLE `Student` (
  StuID INTEGER,
  LName VARCHAR(12),
  Fname VARCHAR(12),
  Age INTEGER,
  Sex VARCHAR(1),
  Major INTEGER,
  Advisor INTEGER,
  city_code VARCHAR(3)
);

CREATE TABLE `Has_Pet` (
  StuID INTEGER REFERENCES Student(StuID),
  PetID INTEGER REFERENCES Pets(PetID)
);

CREATE TABLE `Pets` (
  PetID INTEGER,
  PetType VARCHAR(20),
  pet_age INTEGER,
  weight REAL
);

","###Tables: student, has_pet;
###Columns: student.stuid, has_pet.stuid;
"
car_1,How many continents are there?,SELECT COUNT(*) FROM continents;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: continents;
###Columns: continents.contid, continents.continent;
"
car_1,What is the number of continents?,SELECT COUNT(*) FROM continents;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: continents;
###Columns: continents.contid, continents.continent;
"
car_1,"How many States does each continent have? List the continent id, continent name and the number of nations.","SELECT t1.contid ,  t1.continent ,  COUNT(*) FROM continents as t1 JOIN countries as t2 ON t1.contid  =  t2.continent GROUP BY t1.contid;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: continents, countries;
###Columns: continents.contid, continents.continent, countries.continent;
"
car_1,"For each continent, list its id, name, and how many States it has?","SELECT t1.contid ,  t1.continent ,  COUNT(*) FROM continents as t1 JOIN countries as t2 ON t1.contid  =  t2.continent GROUP BY t1.contid;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: continents, countries;
###Columns: continents.contid, continents.continent, countries.continent;
"
car_1,How many States are listed?,SELECT COUNT(*) FROM countries;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: countries;
###Columns: countries.continent, countries.countryname, countries.countryid;
"
car_1,How many countries exist?,SELECT COUNT(*) FROM countries;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: countries;
###Columns: countries.continent, countries.countryname, countries.countryid;
"
car_1,"How many models does each car manufacturer produce? List manufacturer full name, id and the number.","SELECT t1.fullname ,  t1.id ,  COUNT(*) FROM car_makers as t1 JOIN model_list as t2 ON t1.id  =  t2.maker GROUP BY t1.id;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_makers, model_list;
###Columns: car_makers.id, car_makers.fullname, model_list.maker;
"
car_1,"What is the full name of each car manufacturer, along with its id and how many models it produces?","SELECT t1.fullname ,  t1.id ,  COUNT(*) FROM car_makers as t1 JOIN model_list as t2 ON t1.id  =  t2.maker GROUP BY t1.id;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_makers, model_list;
###Columns: car_makers.id, car_makers.fullname, model_list.maker;
"
car_1,Which model of the vehicle has the minimum horsepower?,SELECT t1.model FROM car_names as t1 JOIN cars_data as t2 ON t1.makeid  =  t2.id ORDER BY t2.horsepower asC LIMIT 1;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_names, cars_data;
###Columns: car_names.model, car_names.makeid, cars_data.horsepower, cars_data.id;
"
car_1,What is the model of the vehicle with the smallest amount of power?,SELECT t1.model FROM car_names as t1 JOIN cars_data as t2 ON t1.makeid  =  t2.id ORDER BY t2.horsepower asC LIMIT 1;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_names, cars_data;
###Columns: car_names.model, car_names.makeid, cars_data.horsepower, cars_data.id;
"
car_1,Find the model of the vehicle who is lighter than the average.,SELECT t1.model FROM car_names as t1 JOIN cars_data as t2 ON t1.makeid  =  t2.id WHERE t2.weight  <  (SELECT AVG(weight) FROM cars_data),"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_names, cars_data;
###Columns: car_names.model, car_names.makeid, cars_data.weight, cars_data.id;
"
car_1,What is the model for the vehicle with a weight smaller than the average?,SELECT t1.model FROM car_names as t1 JOIN cars_data as t2 ON t1.makeid  =  t2.id WHERE t2.weight  <  (SELECT AVG(weight) FROM cars_data),"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_names, cars_data;
###Columns: car_names.model, car_names.makeid, cars_data.weight, cars_data.id;
"
car_1,Find the name of the manufacturer that produced some vehicles in the year of 1970?,SELECT DISTINCT t1.maker FROM car_makers as t1 JOIN model_list as t2 ON t1.id  =  t2.maker JOIN car_names as t3 ON t2.model  =  t3.model JOIN cars_data as t4 ON t3.Makeid  =  t4.id WHERE t4.year  =  '1970';,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_makers, model_list, car_names, cars_data;
###Columns: car_makers.maker, car_makers.id, model_list.maker, model_list.model, car_names.model, cars_data.year, cars_data.id;
"
car_1,What is the name of the different car manufacturers who produced a vehicle in 1970?,SELECT DISTINCT t1.maker FROM car_makers as t1 JOIN model_list as t2 ON t1.id  =  t2.maker JOIN car_names as t3 ON t2.model  =  t3.model JOIN cars_data as t4 ON t3.Makeid  =  t4.id WHERE t4.year  =  '1970';,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_makers, model_list, car_names, cars_data;
###Columns: car_makers.maker, car_makers.id, model_list.maker, model_list.model, car_names.model, cars_data.year, cars_data.id;
"
car_1,Find the make and production time of the vehicles that were produced in the earliest year?,"SELECT t2.make ,  t1.year FROM cars_data as t1 JOIN car_names as t2 ON t1.id  =  t2.makeid WHERE t1.year  =  (SELECT MIN(year) FROM cars_data);","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_names, cars_data;
###Columns: car_names.makeid, car_names.make, cars_data.year, cars_data.id;
"
car_1,What is the manufacturer of the vehicle produced in the earliest year and what year was it?,"SELECT t2.make ,  t1.year FROM cars_data as t1 JOIN car_names as t2 ON t1.id  =  t2.makeid WHERE t1.year  =  (SELECT MIN(year) FROM cars_data);","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_names, cars_data;
###Columns: car_names.makeid, car_names.make, cars_data.year, cars_data.id;
"
car_1,Which distinct vehicle models are the produced after 1980?,SELECT DISTINCT t1.model FROM model_list as t1 JOIN car_names as t2 ON t1.model  =  t2.model JOIN cars_data as t3 ON t2.makeid  =  t3.id WHERE t3.year  >  1980;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: model_list, car_names, cars_data;
###Columns: model_list.model, car_names.model, car_names.makeid, cars_data.year, cars_data.id;
"
car_1,What are the different models for the vehicles produced after 1980?,SELECT DISTINCT t1.model FROM model_list as t1 JOIN car_names as t2 ON t1.model  =  t2.model JOIN cars_data as t3 ON t2.makeid  =  t3.id WHERE t3.year  >  1980;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: model_list, car_names, cars_data;
###Columns: model_list.model, car_names.model, car_names.makeid, cars_data.year, cars_data.id;
"
car_1,How many car manufacturers are there in each continents? List the continent name and the count.,"SELECT t1.continent ,  COUNT(*) FROM continents as t1 JOIN countries as t2 ON t1.contid  =  t2.continent JOIN car_makers as t3 ON t2.countryid  =  t3.country GROUP BY t1.continent;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: continents, countries, car_makers;
###Columns: continents.continent, continents.contid, countries.continent, countries.countryid, car_makers.country;
"
car_1,What is the name of each continent and how many vehicle manufacturers are there in each one?,"SELECT t1.continent ,  COUNT(*) FROM continents as t1 JOIN countries as t2 ON t1.contid  =  t2.continent JOIN car_makers as t3 ON t2.countryid  =  t3.country GROUP BY t1.continent;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: continents, countries, car_makers;
###Columns: continents.continent, continents.contid, countries.continent, countries.countryid, car_makers.country;
"
car_1,Which of the States has the most car manufacturers? List the State name.,SELECT t2.countryname FROM car_makers as t1 JOIN countries as t2 ON t1.country  =  t2.countryId GROUP BY t1.country ORDER BY COUNT(*) DESC LIMIT 1;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: countries, car_makers;
###Columns: countries.countryname, car_makers.country;
"
car_1,What is the name of the State with the most vehicle manufacturers?,SELECT t2.countryname FROM car_makers as t1 JOIN countries as t2 ON t1.country  =  t2.countryId GROUP BY t1.country ORDER BY COUNT(*) DESC LIMIT 1;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: countries, car_makers;
###Columns: countries.countryname, car_makers.country;
"
car_1,How many vehicle models are produced by each manufacturer? List the count and the manufacturer full name.,"SELECT COUNT(*) ,  t2.fullname  FROM model_list as t1 JOIN car_makers as t2 ON t1.maker  =  t2.id GROUP BY t2.id;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_makers, model_list;
###Columns: car_makers.id, car_makers.fullname, model_list.maker;
"
car_1,What is the number of vehicle models that are produced by each manufacturer and what is the id and full name of each manufacturer?,"SELECT COUNT(*) ,  t2.fullname ,  t2.id FROM model_list as t1 JOIN car_makers as t2 ON t1.maker  =  t2.id GROUP BY t2.id;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_makers, model_list;
###Columns: car_makers.id, car_makers.fullname, model_list.maker;
"
car_1,What is the accelerate of the vehicle make amc hornet sportabout (sw)?,SELECT t1.accelerate FROM cars_data as t1 JOIN car_names as t2 ON t1.id  =  t2.makeid WHERE t2.make  =  'amc hornet sportabout (sw)';,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data, car_names;
###Columns: cars_data.id, cars_data.accelerate, car_names.makeid, car_names.make;
"
car_1,How much does the vehicle accelerate that makes out amc hornet sportabout (sw)?,SELECT t1.accelerate FROM cars_data as t1 JOIN car_names as t2 ON t1.id  =  t2.makeid WHERE t2.make  =  'amc hornet sportabout (sw)';,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data, car_names;
###Columns: cars_data.id, cars_data.accelerate, car_names.makeid, car_names.make;
"
car_1,How many French car manufacturers are there?,SELECT COUNT(*) FROM car_makers as t1 JOIN countries as t2 ON t1.country  =  t2.countryId WHERE t2.countryName  =  'france';,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_makers, countries;
###Columns: car_makers.country;
"
car_1,What is the number of manufacturers of vehicle in France?,SELECT COUNT(*) FROM car_makers as t1 JOIN countries as t2 ON t1.country  =  t2.countryId WHERE t2.countryName  =  'france';,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_makers, countries;
###Columns: car_makers.country;
"
car_1,How many vehicle models are produced in the usa?,SELECT COUNT(*) FROM model_list as t1 JOIN car_makers as t2 ON t1.maker  =  t2.id JOIN countries as t3 ON t2.country  =  t3.countryid WHERE t3.countryName  =  'usa';,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: model_list, car_makers, countries;
###Columns: model_list.maker, car_makers.country, car_makers.id, countries.countryid;
"
car_1,What is the count of the vehicle models produced in the United States?,SELECT COUNT(*) FROM model_list as t1 JOIN car_makers as t2 ON t1.maker  =  t2.id JOIN countries as t3 ON t2.country  =  t3.countryid WHERE t3.countryName  =  'usa';,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: model_list, car_makers, countries;
###Columns: model_list.maker, car_makers.country, car_makers.id, countries.countryid;
"
car_1,What is the average miles per gallon(mpg) of the cars with 4 cylinders?,SELECT AVG(mpg) FROM cars_data WHERE cylinders  =  4;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.cylinders, cars_data.mpg;
"
car_1,What is the average miles per gallon of all the cars with 4 cylinders?,SELECT AVG(mpg) FROM cars_data WHERE cylinders  =  4;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.cylinders, cars_data.mpg;
"
car_1,What is the smallest weight of the car produced with 8 cylinders on 1974?,SELECT weight FROM cars_data WHERE cylinders  =  8 AND year  =  1974 ORDER BY weight ASC LIMIT 1;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.weight, cars_data.cylinders;
"
car_1,What is the minimu weight of the car with 8 cylinders produced in 1974?,SELECT weight FROM cars_data WHERE cylinders  =  8 AND year  =  1974 ORDER BY weight ASC LIMIT 1;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.weight, cars_data.cylinders;
"
car_1,What are all the companies and models?,"SELECT maker ,  model FROM model_list;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: model_list;
###Columns: model_list.maker, model_list.model;
"
car_1,What are the manufacturers and models?,"SELECT maker ,  model FROM model_list;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: model_list;
###Columns: model_list.maker, model_list.model;
"
car_1,What are the States having at least one vehicle manufacturer? List name and id.,"SELECT t1.countryname ,  t1.countryid FROM countries as t1 JOIN car_makers as t2 ON t1.countryid  =  t2.country GROUP BY t1.countryid HAVING COUNT(*)  >=  1;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: countries, car_makers;
###Columns: countries.countryname, countries.countryid, car_makers.country;
"
car_1,What are the names and ids of all States with at least one vehicle manufacturer?,"SELECT t1.countryname ,  t1.countryid FROM countries as t1 JOIN car_makers as t2 ON t1.countryid  =  t2.country GROUP BY t1.countryid HAVING COUNT(*)  >=  1;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: countries, car_makers;
###Columns: countries.countryname, countries.countryid, car_makers.country;
"
car_1,What is the number of the vehicle with power more than 150?,SELECT COUNT(*) FROM cars_data WHERE horsepower  >  150;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.horsepower;
"
car_1,What is the number of vehicles with a power greater than 150?,SELECT COUNT(*) FROM cars_data WHERE horsepower  >  150;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.horsepower;
"
car_1,What is the average weight of vehicles each year?,"SELECT AVG(weight) ,  year FROM cars_data GROUP BY year;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.weight;
"
car_1,What is the average weight and year for each year?,"SELECT AVG(weight) ,  year FROM cars_data GROUP BY year;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.weight;
"
car_1,Which States in europe have at least 3 vehicle manufacturers?,SELECT t1.countryname FROM countries as t1 JOIN continents as t2 ON t1.continent  =  t2.contid JOIN car_makers as t3 ON t1.countryid  =  t3.country WHERE t2.continent  =  'europe' GROUP BY t1.countryname HAVING COUNT(*)  >=  3;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: countries, continents, car_makers;
###Columns: countries.continent, countries.countryname, countries.countryid, continents.contid, continents.continent, car_makers.country;
"
car_1,What are the names of all European States with at least 3 manufacturers?,SELECT t1.countryname FROM countries as t1 JOIN continents as t2 ON t1.continent  =  t2.contid JOIN car_makers as t3 ON t1.countryid  =  t3.country WHERE t2.continent  =  'europe' GROUP BY t1.countryname HAVING COUNT(*)  >=  3;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: countries, continents, car_makers;
###Columns: countries.continent, countries.countryname, countries.countryid, continents.contid, continents.continent, car_makers.country;
"
car_1,What is the maximum power and the manufacturer of the vehicle models with 3 cylinders?,"SELECT t2.horsepower ,  t1.make FROM car_names as t1 JOIN cars_data as t2 ON t1.makeid  =  t2.id WHERE t2.cylinders  =  3 ORDER BY t2.horsepower DESC LIMIT 1;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data, car_names;
###Columns: cars_data.horsepower, cars_data.id, cars_data.cylinders, car_names.makeid, car_names.make;
"
car_1,What is the largest amount of power for the models with 3 cylinders and what manufacturer is it?,"SELECT t2.horsepower ,  t1.make FROM car_names as t1 JOIN cars_data as t2 ON t1.makeid  =  t2.id WHERE t2.cylinders  =  3 ORDER BY t2.horsepower DESC LIMIT 1;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data, car_names;
###Columns: cars_data.horsepower, cars_data.id, cars_data.cylinders, car_names.makeid, car_names.make;
"
car_1,"Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",SELECT t1.model FROM car_names as t1 JOIN cars_data as t2 ON t1.makeid  =  t2.id ORDER BY t2.mpg DESC LIMIT 1;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_names, cars_data;
###Columns: car_names.model, car_names.makeid, cars_data.id, cars_data.mpg;
"
car_1,What is the automobile model with the highest mpg?,SELECT t1.model FROM car_names as t1 JOIN cars_data as t2 ON t1.makeid  =  t2.id ORDER BY t2.mpg DESC LIMIT 1;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_names, cars_data;
###Columns: car_names.model, car_names.makeid, cars_data.id, cars_data.mpg;
"
car_1,What is the average power of the automobile before 1980?,SELECT AVG(horsepower) FROM cars_data WHERE year  <  1980;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.horsepower;
"
car_1,What is the average power for all automobiles produced before 1980?,SELECT AVG(horsepower) FROM cars_data WHERE year  <  1980;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.horsepower;
"
car_1,What is the average edispl of the automobile of model volvo?,SELECT AVG(t2.edispl) FROM car_names as t1 JOIN cars_data as t2 ON t1.makeid  =  t2.id WHERE t1.model  =  'volvo';,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data, car_names;
###Columns: cars_data.id, cars_data.edispl, car_names.makeid, car_names.model;
"
car_1,What is the average edispl for all volvos?,SELECT AVG(t2.edispl) FROM car_names as t1 JOIN cars_data as t2 ON t1.makeid  =  t2.id WHERE t1.model  =  'volvo';,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data, car_names;
###Columns: cars_data.id, cars_data.edispl, car_names.makeid, car_names.model;
"
car_1,What is the maximum accelerate for different number of cylinders?,"SELECT MAX(accelerate) ,  cylinders FROM cars_data GROUP BY cylinders;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.cylinders, cars_data.accelerate;
"
car_1,What is the maximum accelerate for all the different cylinders?,"SELECT MAX(accelerate) ,  cylinders FROM cars_data GROUP BY cylinders;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.cylinders, cars_data.accelerate;
"
car_1,Which model has the most version(make) of automobiles?,SELECT model FROM car_names GROUP BY model ORDER BY COUNT(*) DESC LIMIT 1;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_names;
###Columns: car_names.model;
"
car_1,What model has the most different versions?,SELECT model FROM car_names GROUP BY model ORDER BY COUNT(*) DESC LIMIT 1;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_names;
###Columns: car_names.model;
"
car_1,How many vehicles have more than 4 cylinders?,SELECT COUNT(*) FROM cars_data WHERE cylinders  >  4;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.cylinders;
"
car_1,What is the number of vehicles with more than 4 cylinders?,SELECT COUNT(*) FROM cars_data WHERE cylinders  >  4;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.cylinders;
"
car_1,how many automobiles were produced in 1980?,SELECT COUNT(*) FROM cars_data WHERE year  =  1980;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.weight, cars_data.year, cars_data.mpg, cars_data.edispl, cars_data.accelerate, cars_data.horsepower, cars_data.cylinders, cars_data.id;
"
car_1,"In 1980, how many automobiles were made?",SELECT COUNT(*) FROM cars_data WHERE year  =  1980;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.weight, cars_data.year, cars_data.mpg, cars_data.edispl, cars_data.accelerate, cars_data.horsepower, cars_data.cylinders, cars_data.id;
"
car_1,How many automobile models were produced by the manufacturer with full name American Motor Company?,SELECT COUNT(*) FROM car_makers as t1 JOIN model_list as t2 ON t1.id  =  t2.maker WHERE t1.fullname  =  'American Motor Company';,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_makers, model_list;
###Columns: car_makers.fullname, car_makers.id, model_list.maker;
"
car_1,What is the number of automobile models created by the car manufacturer American Motor Company?,SELECT COUNT(*) FROM car_makers as t1 JOIN model_list as t2 ON t1.id  =  t2.maker WHERE t1.fullname  =  'American Motor Company';,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_makers, model_list;
###Columns: car_makers.fullname, car_makers.id, model_list.maker;
"
car_1,Which manufacturers designed more than 3 vehicle models? List full name and the id.,"SELECT t1.fullname ,  t1.id FROM car_makers as t1 JOIN model_list as t2 ON t1.id  =  t2.maker GROUP BY t1.id HAVING COUNT(*)  >  3;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_makers, model_list;
###Columns: car_makers.id, car_makers.fullname, model_list.maker;
"
car_1,What are the names and ids of all manufacturers with more than 3 models?,"SELECT t1.fullname ,  t1.id FROM car_makers as t1 JOIN model_list as t2 ON t1.id  =  t2.maker GROUP BY t1.id HAVING COUNT(*)  >  3;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_makers, model_list;
###Columns: car_makers.id, car_makers.fullname, model_list.maker;
"
car_1,Which distinctive types are produced by manufacturer with the full name General Motors or weighing more than 3500?,SELECT DISTINCT t2.model FROM car_names as t1 JOIN model_list as t2 ON t1.model  =  t2.model JOIN car_makers as t3 ON t2.maker  =  t3.id JOIN cars_data as t4 ON t1.Makeid  =  t4.id WHERE t3.fullname  =  'General Motors' OR t4.weight  >  3500;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: model_list, car_names, car_makers, cars_data;
###Columns: model_list.maker, model_list.model, car_names.model, car_makers.fullname, car_makers.id, cars_data.weight, cars_data.id;
"
car_1,What are the different models created by either the car manufacturer General Motors or weighed more than 3500?,SELECT DISTINCT t2.model FROM car_names as t1 JOIN model_list as t2 ON t1.model  =  t2.model JOIN car_makers as t3 ON t2.maker  =  t3.id JOIN cars_data as t4 ON t1.Makeid  =  t4.id WHERE t3.fullname  =  'General Motors' OR t4.weight  >  3500;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: model_list, car_names, car_makers, cars_data;
###Columns: model_list.maker, model_list.model, car_names.model, car_makers.fullname, car_makers.id, cars_data.weight, cars_data.id;
"
car_1,"For model volvo, how many cylinders does the automobile with the least accelerate have?",SELECT COUNT(cylinders) FROM cars_data as t1 JOIN car_names as t2 ON t1.id  =  t2.Makeid WHERE t2.model  =  'volvo' ORDER BY t1.accelerate asC LIMIT 1;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data, car_names;
###Columns: cars_data.id, cars_data.accelerate, car_names.model;
"
car_1,"For a volvo model, how many cylinders does the version with least accelerate have?",SELECT COUNT(cylinders) FROM cars_data as t1 JOIN car_names as t2 ON t1.id  =  t2.Makeid WHERE t2.model  =  'volvo' ORDER BY t1.accelerate asC LIMIT 1;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data, car_names;
###Columns: cars_data.id, cars_data.accelerate, car_names.model;
"
car_1,How many automobiles have a larger accelerate than the automobile with the largest power?,SELECT COUNT(*) FROM cars_data WHERE accelerate  >  ( SELECT accelerate FROM cars_data ORDER BY horsepower DESC LIMIT 1 );,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.horsepower, cars_data.accelerate;
"
car_1,What is the number of automobiles with a greater accelerate than the one with the most power?,SELECT COUNT(*) FROM cars_data WHERE accelerate  >  ( SELECT accelerate FROM cars_data ORDER BY horsepower DESC LIMIT 1 );,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.horsepower, cars_data.accelerate;
"
car_1,How many States has more than 2 car manufacturers?,"SELECT COUNT(*) FROM ( SELECT t1.countryid ,  COUNT(*) FROM countRIES as t1 JOIN car_makers as t2 ON t1.countryid  =  t2.country GROUP BY t1.countryid HAVING COUNT(*)  >  2 );","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_makers;
###Columns: car_makers.country;
"
car_1,What is the number of States with more than 2 car manufacturers?,"SELECT COUNT(*) FROM ( SELECT t1.countryid ,  COUNT(*) FROM countRIES as t1 JOIN car_makers as t2 ON t1.countryid  =  t2.country GROUP BY t1.countryid HAVING COUNT(*)  >  2 );","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_makers;
###Columns: car_makers.country;
"
car_1,How many automobiles has over 6 cylinders?,SELECT COUNT(*) FROM cars_data WHERE cylinders  >  6;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.cylinders;
"
car_1,What is the number of automobiles with over 6 cylinders?,SELECT COUNT(*) FROM cars_data WHERE cylinders  >  6;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.cylinders;
"
car_1,"For the automobiles with 4 cylinders, which model has the largest power?",SELECT t1.model FROM car_names as t1 JOIN cars_data as t2 ON t1.makeid  =  t2.id WHERE t2.cylinders  =  4 ORDER BY t2.horsepower DESC LIMIT 1;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_names, cars_data;
###Columns: car_names.model, car_names.makeid, cars_data.horsepower, cars_data.id, cars_data.cylinders;
"
car_1,"For all of the 4 cylinder automobiles, which model has the most power?",SELECT t1.model FROM car_names as t1 JOIN cars_data as t2 ON t1.makeid  =  t2.id WHERE t2.cylinders  =  4 ORDER BY t2.horsepower DESC LIMIT 1;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_names, cars_data;
###Columns: car_names.model, car_names.makeid, cars_data.horsepower, cars_data.id, cars_data.cylinders;
"
car_1,"Among the automobiles with more than lowest power, which ones do not have more than 3 cylinders? List the vehicle makeid and manufacturer name.","SELECT t2.makeid ,  t2.make FROM cars_data as t1 JOIN car_names as t2 ON t1.id  =  t2.makeid WHERE t1.horsepower  >  (SELECT MIN(horsepower) FROM cars_data) AND t1.cylinders  <=  3;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_names, cars_data;
###Columns: car_names.makeid, car_names.make, cars_data.horsepower, cars_data.id;
"
car_1,"Among the automobiles that do not have the minimum power, what are the manufacturer ids and names of al those with less than 4 cylinders?","SELECT t2.makeid ,  t2.make FROM cars_data as t1 JOIN car_names as t2 ON t1.id  =  t2.makeid WHERE t1.horsepower  >  (SELECT MIN(horsepower) FROM cars_data) AND t1.cylinders  <  4;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_names, cars_data;
###Columns: car_names.makeid, car_names.make, cars_data.horsepower, cars_data.id;
"
car_1,What is the maximum miles per gallon of the automobile with 8 cylinders or produced before 1980?,SELECT mpg FROM cars_data WHERE cylinders  =  8 OR year  <  1980 ORDER BY mpg DESC LIMIT 1;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.cylinders, cars_data.mpg;
"
car_1,What is the maximum mpg of the automobiles that had 8 cylinders or that were produced before 1980?,SELECT mpg FROM cars_data WHERE cylinders  =  8 OR year  <  1980 ORDER BY mpg DESC LIMIT 1;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: cars_data;
###Columns: cars_data.cylinders, cars_data.mpg;
"
car_1,Which models are lighter than 3500 but not built by the 'Ford Motor Company'?,SELECT DISTINCT t1.model FROM model_list as t1 JOIN car_names as t2 ON t1.model  =  t2.model JOIN cars_data as t3 ON t2.makeid  =  t3.id JOIN car_makers as t4 ON t1.maker  =  t4.id WHERE t3.weight  <  3500 AND t4.fullname != 'Ford Motor Company';,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: model_list, car_names, cars_data, car_makers;
###Columns: model_list.maker, model_list.model, car_names.model, car_names.makeid, cars_data.weight, cars_data.id, car_makers.fullname, car_makers.id;
"
car_1,What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?,SELECT DISTINCT t1.model FROM model_list as t1 JOIN car_names as t2 ON t1.model  =  t2.model JOIN cars_data as t3 ON t2.makeid  =  t3.id JOIN car_makers as t4 ON t1.maker  =  t4.id WHERE t3.weight  <  3500 AND t4.fullname != 'Ford Motor Company';,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: model_list, car_names, cars_data, car_makers;
###Columns: model_list.maker, model_list.model, car_names.model, car_names.makeid, cars_data.weight, cars_data.id, car_makers.fullname, car_makers.id;
"
car_1,What are the name of the States where there is not a single automobile maker?,SELECT countryname FROM countries EXCEPT SELECT t1.countryname FROM countries as t1 JOIN car_makers as t2 ON t1.countryid  =  t2.country;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: countries, car_makers;
###Columns: countries.countryname, countries.countryid, car_makers.country;
"
car_1,What are the names of the States with no vehicle manufacturers?,SELECT countryname FROM countries EXCEPT SELECT t1.countryname FROM countries as t1 JOIN car_makers as t2 ON t1.countryid  =  t2.country;,"CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: countries, car_makers;
###Columns: countries.countryname, countries.countryid, car_makers.country;
"
car_1,Which are the automobile manufacturers which produce at least 2 models and more than 3 automobile manufacturers? List the id and the manufacturer.,"SELECT t1.id ,  t1.maker FROM car_makers as t1 JOIN model_list as t2 ON t1.id  =  t2.maker GROUP BY t1.id HAVING COUNT(*)  >=  2 INTERSECT SELECT t1.id ,  t1.maker FROM car_makers as t1 JOIN model_list as t2 ON t1.id  =  t2.maker JOIN car_names as t3 ON t2.model  =  t3.model GROUP BY t1.id HAVING COUNT(*)  >  3;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_makers, model_list, car_names;
###Columns: car_makers.maker, car_makers.id, model_list.maker, model_list.model, car_names.model;
"
car_1,What are the ids and manufacturers of all automobile manufacturers that produce at least 2 models and make more than 3 automobiles?,"SELECT t1.id ,  t1.maker FROM car_makers as t1 JOIN model_list as t2 ON t1.id  =  t2.maker GROUP BY t1.id HAVING COUNT(*)  >=  2 INTERSECT SELECT t1.id ,  t1.maker FROM car_makers as t1 JOIN model_list as t2 ON t1.id  =  t2.maker JOIN car_names as t3 ON t2.model  =  t3.model GROUP BY t1.id HAVING COUNT(*)  >  3;","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: car_makers, model_list, car_names;
###Columns: car_makers.maker, car_makers.id, model_list.maker, model_list.model, car_names.model;
"
car_1,What are the id and names of the nations which have more than 3 vehicle manufacturers or produce the 'fiat' model?,"SELECT t1.countryid ,  t1.countryname FROM countries as t1 JOIN car_makers as t2 ON t1.countryid  =  t2.country GROUP BY t1.countryid HAVING COUNT(*)  >  3 UNION SELECT t1.countryid ,  t1.countryname FROM countries as t1 JOIN car_makers as t2 ON t1.countryid  =  t2.country JOIN model_list as t3 ON t2.id  =  t3.maker WHERE t3.model  =  'fiat';","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: countries, car_makers, model_list;
###Columns: countries.countryname, countries.countryid, car_makers.country, car_makers.id, model_list.maker, model_list.model;
"
car_1,What are the ids and names of all States that either have more than 3 automobile manufacturers or produce fiats?,"SELECT t1.countryid ,  t1.countryname FROM countries as t1 JOIN car_makers as t2 ON t1.countryid  =  t2.country GROUP BY t1.countryid HAVING COUNT(*)  >  3 UNION SELECT t1.countryid ,  t1.countryname FROM countries as t1 JOIN car_makers as t2 ON t1.countryid  =  t2.country JOIN model_list as t3 ON t2.id  =  t3.maker WHERE t3.model  =  'fiat';","CREATE TABLE `continents` (
  ContId INTEGER,
  Continent TEXT
);

CREATE TABLE `countries` (
  CountryId INTEGER,
  CountryName TEXT,
  Continent INTEGER REFERENCES continents(ContId)
);

CREATE TABLE `car_makers` (
  Id INTEGER,
  Maker TEXT,
  FullName TEXT,
  Country TEXT REFERENCES countries(CountryId)
);

CREATE TABLE `model_list` (
  ModelId INTEGER,
  Maker INTEGER REFERENCES car_makers(Id),
  Model TEXT PRIMARY KEY
);

CREATE TABLE `car_names` (
  MakeId INTEGER,
  Model TEXT REFERENCES model_list(Model),
  Make TEXT
);

CREATE TABLE `cars_data` (
  Id INTEGER REFERENCES car_names(MakeId),
  MPG TEXT,
  Cylinders INTEGER,
  Edispl REAL,
  Horsepower TEXT,
  Weight INTEGER,
  Accelerate REAL,
  Year INTEGER
);

","###Tables: countries, car_makers, model_list;
###Columns: countries.countryname, countries.countryid, car_makers.country, car_makers.id, model_list.maker, model_list.model;
"
flight_2,"Which State does Airways ""JetBlue Airways"" belong to?","SELECT country FROM airlines WHERE airline  =  ""JetBlue Airways""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines;
###Columns: airlines.country, airlines.airline;
"
flight_2,What State is Jetblue Airways affiliated with?,"SELECT country FROM airlines WHERE airline  =  ""JetBlue Airways""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines;
###Columns: airlines.country, airlines.airline;
"
flight_2,"What is the shortened word of Airline ""JetBlue Airways""?","SELECT abbreviation FROM airlines WHERE airline  =  ""JetBlue Airways""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines;
###Columns: airlines.abbreviation, airlines.airline;
"
flight_2,Which shortened word corresponds to Jetblue Airways?,"SELECT abbreviation FROM airlines WHERE airline  =  ""JetBlue Airways""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines;
###Columns: airlines.abbreviation, airlines.airline;
"
flight_2,"List all airway names and their shortened word in ""USA"".","SELECT airline ,  abbreviation FROM airlines WHERE country  =  ""USA""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines;
###Columns: airlines.country, airlines.abbreviation, airlines.airline;
"
flight_2,What are the airway names and shortened words for airways in the USA?,"SELECT airline ,  abbreviation FROM airlines WHERE country  =  ""USA""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines;
###Columns: airlines.country, airlines.abbreviation, airlines.airline;
"
flight_2,List the airport code and name in the city of Anthony.,"SELECT airportcode ,  airportname FROM airports WHERE city  =  ""Anthony""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airports;
###Columns: airports.city, airports.airportcode, airports.airportname;
"
flight_2,Give the airport code and airport name corresonding to the city Anthony.,"SELECT airportcode ,  airportname FROM airports WHERE city  =  ""Anthony""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airports;
###Columns: airports.city, airports.airportcode, airports.airportname;
"
flight_2,How many airways do we have?,SELECT COUNT(*) FROM airlines,"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines;
###Columns: airlines.country, airlines.abbreviation, airlines.uid, airlines.airline;
"
flight_2,What is the total amount of airways?,SELECT COUNT(*) FROM airlines,"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines;
###Columns: airlines.country, airlines.abbreviation, airlines.uid, airlines.airline;
"
flight_2,How many aerodromes do we have?,SELECT COUNT(*) FROM airports,"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airports;
###Columns: airports.city, airports.airportcode, airports.countryabbrev, airports.airportname, airports.country;
"
flight_2,Return the number of  aerodromes.,SELECT COUNT(*) FROM airports,"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airports;
###Columns: airports.city, airports.airportcode, airports.countryabbrev, airports.airportname, airports.country;
"
flight_2,How many flights do we have?,SELECT COUNT(*) FROM flights,"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights;
###Columns: flights.destairport, flights.sourceairport, flights.airline, flights.flightno;
"
flight_2,Return the number of flights.,SELECT COUNT(*) FROM flights,"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights;
###Columns: flights.destairport, flights.sourceairport, flights.airline, flights.flightno;
"
flight_2,Which airway can be shortened as word 'UAL'?,"SELECT airline FROM airlines WHERE abbreviation  =  ""UAL""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines;
###Columns: airlines.abbreviation, airlines.airline;
"
flight_2,Give the airway with abbreviation 'UAL'.,"SELECT airline FROM airlines WHERE abbreviation  =  ""UAL""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines;
###Columns: airlines.abbreviation, airlines.airline;
"
flight_2,How many airways are from USA?,"SELECT COUNT(*) FROM airlines WHERE country  =  ""USA""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines;
###Columns: airlines.country;
"
flight_2,Return the number of airways in the USA.,"SELECT COUNT(*) FROM airlines WHERE country  =  ""USA""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines;
###Columns: airlines.country;
"
flight_2,Which town and State is the Alton airport at?,"SELECT city ,  country FROM airports WHERE airportname  =  ""Alton""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airports;
###Columns: airports.city, airports.country, airports.airportname;
"
flight_2,Give the town and State for the Alton airport.,"SELECT city ,  country FROM airports WHERE airportname  =  ""Alton""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airports;
###Columns: airports.city, airports.country, airports.airportname;
"
flight_2,What is the aerodrome name for airport 'AKO'?,"SELECT airportname FROM airports WHERE airportcode  =  ""AKO""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airports;
###Columns: airports.airportcode, airports.airportname;
"
flight_2,Return the name of the aerodrome with code 'AKO'.,"SELECT airportname FROM airports WHERE airportcode  =  ""AKO""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airports;
###Columns: airports.airportcode, airports.airportname;
"
flight_2,What are aerodrome names at town 'Aberdeen'?,"SELECT airportname FROM airports WHERE city = ""Aberdeen""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airports;
###Columns: airports.city, airports.airportname;
"
flight_2,What are the names of aerodrome in Aberdeen?,"SELECT airportname FROM airports WHERE city = ""Aberdeen""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airports;
###Columns: airports.city, airports.airportname;
"
flight_2,How many flights depart from 'APG'?,"SELECT COUNT(*) FROM flights WHERE sourceairport  =  ""APG""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights;
###Columns: flights.sourceairport;
"
flight_2,Count the amount of flights departing from 'APG'.,"SELECT COUNT(*) FROM flights WHERE sourceairport  =  ""APG""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights;
###Columns: flights.sourceairport;
"
flight_2,How many flights have terminal ATO?,"SELECT COUNT(*) FROM flights WHERE destairport  =  ""ATO""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights;
###Columns: flights.destairport;
"
flight_2,Count the number of flights into ATO.,"SELECT COUNT(*) FROM flights WHERE destairport  =  ""ATO""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights;
###Columns: flights.destairport;
"
flight_2,How many flights depart from City Aberdeen?,"SELECT COUNT(*) FROM flights as t1 JOIN airports as t2 ON t1.sourceairport  =  t2.airportcode WHERE t2.city  =  ""Aberdeen""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airports;
###Columns: flights.sourceairport, airports.city, airports.airportcode;
"
flight_2,Return the number of flights departing from Aberdeen.,"SELECT COUNT(*) FROM flights as t1 JOIN airports as t2 ON t1.sourceairport  =  t2.airportcode WHERE t2.city  =  ""Aberdeen""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airports;
###Columns: flights.sourceairport, airports.city, airports.airportcode;
"
flight_2,How many flights arriving in Aberdeen city?,"SELECT COUNT(*) FROM flights as t1 JOIN airports as t2 ON t1.destairport  =  t2.airportcode WHERE t2.city  =  ""Aberdeen""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airports;
###Columns: flights.destairport, airports.city, airports.airportcode;
"
flight_2,Return the number of flights arriving in Aberdeen.,"SELECT COUNT(*) FROM flights as t1 JOIN airports as t2 ON t1.destairport  =  t2.airportcode WHERE t2.city  =  ""Aberdeen""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airports;
###Columns: flights.destairport, airports.city, airports.airportcode;
"
flight_2,How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?,"SELECT COUNT(*) FROM flights as t1 JOIN airports as t2 ON t1.destairport  =  t2.airportcode JOIN airports as t3 ON t1.sourceairport  =  t3.airportcode WHERE t2.city  =  ""Ashley"" AND t3.city  =  ""Aberdeen""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airports;
###Columns: flights.destairport, flights.sourceairport, airports.city, airports.airportcode;
"
flight_2,How many flights fly from Aberdeen to Ashley?,"SELECT COUNT(*) FROM flights as t1 JOIN airports as t2 ON t1.destairport  =  t2.airportcode JOIN airports as t3 ON t1.sourceairport  =  t3.airportcode WHERE t2.city  =  ""Ashley"" AND t3.city  =  ""Aberdeen""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airports;
###Columns: flights.destairport, flights.sourceairport, airports.city, airports.airportcode;
"
flight_2,How many flights does airway 'JetBlue Airways' have?,"SELECT COUNT(*) FROM flights as t1 JOIN airlines as t2 ON t1.airline  =  t2.uid WHERE t2.airline = ""JetBlue Airways""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airlines;
###Columns: flights.airline, airlines.uid, airlines.airline;
"
flight_2,Give the number of Jetblue Airways flights.,"SELECT COUNT(*) FROM flights as t1 JOIN airlines as t2 ON t1.airline  =  t2.uid WHERE t2.airline = ""JetBlue Airways""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airlines;
###Columns: flights.airline, airlines.uid, airlines.airline;
"
flight_2,How many 'United Airlines' flights go to Airport 'ASY'?,"SELECT COUNT(*) FROM airlines as t1 JOIN flights as t2 ON t2.airline  =  t1.uid WHERE t1.airline  =  ""United airlines"" AND t2.destairport  =  ""asY""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airlines;
###Columns: flights.destairport, flights.airline, airlines.uid, airlines.airline;
"
flight_2,Count the number of United Airlines flights arriving in ASY Airport.,"SELECT COUNT(*) FROM airlines as t1 JOIN flights as t2 ON t2.airline  =  t1.uid WHERE t1.airline  =  ""United airlines"" AND t2.destairport  =  ""asY""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airlines;
###Columns: flights.destairport, flights.airline, airlines.uid, airlines.airline;
"
flight_2,How many 'United Airlines' flights leave from Airport 'AHD'?,"SELECT COUNT(*) FROM airlines as t1 JOIN flights as t2 ON t2.airline  =  t1.uid WHERE t1.airline  =  ""United airlines"" AND t2.sourceairport  =  ""AHD""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airlines;
###Columns: flights.sourceairport, flights.airline, airlines.uid, airlines.airline;
"
flight_2,Return the number of United Airlines flights leaving from AHD Airport.,"SELECT COUNT(*) FROM airlines as t1 JOIN flights as t2 ON t2.airline  =  t1.uid WHERE t1.airline  =  ""United airlines"" AND t2.sourceairport  =  ""AHD""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airlines;
###Columns: flights.sourceairport, flights.airline, airlines.uid, airlines.airline;
"
flight_2,How many United Airlines flights go to City 'Aberdeen'?,"SELECT COUNT(*) FROM flights as t1 JOIN airports as t2 ON t1.destairport  =  t2.airportcode JOIN airlines as t3 ON t3.uid  =  t1.airline WHERE t2.city  =  ""Aberdeen"" AND t3.airline  =  ""United airlines""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airports, airlines;
###Columns: flights.destairport, flights.airline, airports.city, airports.airportcode, airlines.uid, airlines.airline;
"
flight_2,Count the number of United Airlines flights that arrive in Aberdeen.,"SELECT COUNT(*) FROM flights as t1 JOIN airports as t2 ON t1.destairport  =  t2.airportcode JOIN airlines as t3 ON t3.uid  =  t1.airline WHERE t2.city  =  ""Aberdeen"" AND t3.airline  =  ""United airlines""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airports, airlines;
###Columns: flights.destairport, flights.airline, airports.city, airports.airportcode, airlines.uid, airlines.airline;
"
flight_2,Which town has most number of arriving flights?,SELECT t1.city FROM airports as t1 JOIN flights as t2 ON t1.airportcode  =  t2.destairport GROUP BY t1.city ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airports, flights;
###Columns: airports.city, airports.airportcode, flights.destairport;
"
flight_2,Which town has the most frequent terminal aerodrome?,SELECT t1.city FROM airports as t1 JOIN flights as t2 ON t1.airportcode  =  t2.destairport GROUP BY t1.city ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airports, flights;
###Columns: airports.city, airports.airportcode, flights.destairport;
"
flight_2,Which town has most number of departing flights?,SELECT t1.city FROM airports as t1 JOIN flights as t2 ON t1.airportcode  =  t2.sourceairport GROUP BY t1.city ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airports, flights;
###Columns: airports.city, airports.airportcode, flights.sourceairport;
"
flight_2,Which town is the most frequent source aerodrome?,SELECT t1.city FROM airports as t1 JOIN flights as t2 ON t1.airportcode  =  t2.sourceairport GROUP BY t1.city ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airports, flights;
###Columns: airports.city, airports.airportcode, flights.sourceairport;
"
flight_2,What is the code of aerodrome that has the highest number of flights?,SELECT t1.airportcode FROM airports as t1 JOIN flights as t2 ON t1.airportcode  =  t2.destairport OR t1.airportcode  =  t2.sourceairport GROUP BY t1.airportcode ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airports, flights;
###Columns: airports.airportcode, flights.destairport, flights.sourceairport;
"
flight_2,What is the aerodrome code of the aerodrome with the most flights?,SELECT t1.airportcode FROM airports as t1 JOIN flights as t2 ON t1.airportcode  =  t2.destairport OR t1.airportcode  =  t2.sourceairport GROUP BY t1.airportcode ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airports, flights;
###Columns: airports.airportcode, flights.destairport, flights.sourceairport;
"
flight_2,What is the code of aerodrome that has fewest number of flights?,SELECT t1.airportcode FROM airports as t1 JOIN flights as t2 ON t1.airportcode  =  t2.destairport OR t1.airportcode  =  t2.sourceairport GROUP BY t1.airportcode ORDER BY COUNT(*) LIMIT 1,"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airports, flights;
###Columns: airports.airportcode, flights.destairport, flights.sourceairport;
"
flight_2,Give the code of the aerodrome with the least flights.,SELECT t1.airportcode FROM airports as t1 JOIN flights as t2 ON t1.airportcode  =  t2.destairport OR t1.airportcode  =  t2.sourceairport GROUP BY t1.airportcode ORDER BY COUNT(*) LIMIT 1,"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airports, flights;
###Columns: airports.airportcode, flights.destairport, flights.sourceairport;
"
flight_2,Which airway has most number of flights?,SELECT t1.airline FROM airlines as t1 JOIN flights as t2 ON t1.uid  =  t2.airline GROUP BY t1.airline ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines, flights;
###Columns: airlines.uid, airlines.airline, flights.airline;
"
flight_2,What airway serves the most flights?,SELECT t1.airline FROM airlines as t1 JOIN flights as t2 ON t1.uid  =  t2.airline GROUP BY t1.airline ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines, flights;
###Columns: airlines.uid, airlines.airline, flights.airline;
"
flight_2,Find the shortened word and State of the airway that has fewest number of flights?,"SELECT t1.abbreviation ,  t1.country FROM airlines as t1 JOIN flights as t2 ON t1.uid  =  t2.airline GROUP BY t1.airline ORDER BY COUNT(*) LIMIT 1","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines, flights;
###Columns: airlines.country, airlines.abbreviation, airlines.uid, airlines.airline, flights.airline;
"
flight_2,What is the shortened word of the airway has the fewest flights and what State is it in?,"SELECT t1.abbreviation ,  t1.country FROM airlines as t1 JOIN flights as t2 ON t1.uid  =  t2.airline GROUP BY t1.airline ORDER BY COUNT(*) LIMIT 1","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines, flights;
###Columns: airlines.country, airlines.abbreviation, airlines.uid, airlines.airline, flights.airline;
"
flight_2,What are airways that have some flight departing from aerodrome 'AHD'?,"SELECT t1.airline FROM airlines as t1 JOIN flights as t2 ON t1.uid  =  t2.airline WHERE t2.sourceairport  =  ""AHD""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines, flights;
###Columns: airlines.uid, airlines.airline, flights.sourceairport, flights.airline;
"
flight_2,Which airways have a flight with source airport AHD?,"SELECT t1.airline FROM airlines as t1 JOIN flights as t2 ON t1.uid  =  t2.airline WHERE t2.sourceairport  =  ""AHD""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines, flights;
###Columns: airlines.uid, airlines.airline, flights.sourceairport, flights.airline;
"
flight_2,What are airways that have flights arriving at airport 'AHD'?,"SELECT t1.airline FROM airlines as t1 JOIN flights as t2 ON t1.uid  =  t2.airline WHERE t2.destairport  =  ""AHD""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines, flights;
###Columns: airlines.uid, airlines.airline, flights.destairport, flights.airline;
"
flight_2,Which airways have a flight with terminal airport AHD?,"SELECT t1.airline FROM airlines as t1 JOIN flights as t2 ON t1.uid  =  t2.airline WHERE t2.destairport  =  ""AHD""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines, flights;
###Columns: airlines.uid, airlines.airline, flights.destairport, flights.airline;
"
flight_2,Find all airways that have flights from both aerodromes 'APG' and 'CVO'.,"SELECT t1.airline FROM airlines as t1 JOIN flights as t2 ON t1.uid  =  t2.airline WHERE t2.sourceairport  =  ""APG"" INTERSECT SELECT t1.airline FROM airlines as t1 JOIN flights as t2 ON t1.uid  =  t2.airline WHERE t2.sourceairport  =  ""CVO""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines, flights;
###Columns: airlines.uid, airlines.airline, flights.sourceairport, flights.airline;
"
flight_2,Which airways have departing flights from both APG and CVO aerodromes?,"SELECT t1.airline FROM airlines as t1 JOIN flights as t2 ON t1.uid  =  t2.airline WHERE t2.sourceairport  =  ""APG"" INTERSECT SELECT t1.airline FROM airlines as t1 JOIN flights as t2 ON t1.uid  =  t2.airline WHERE t2.sourceairport  =  ""CVO""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines, flights;
###Columns: airlines.uid, airlines.airline, flights.sourceairport, flights.airline;
"
flight_2,Find all airways that have flights from airport 'CVO' but not from 'APG'.,"SELECT t1.airline FROM airlines as t1 JOIN flights as t2 ON t1.uid  =  t2.airline WHERE t2.sourceairport  =  ""CVO"" EXCEPT SELECT t1.airline FROM airlines as t1 JOIN flights as t2 ON t1.uid  =  t2.airline WHERE t2.sourceairport  =  ""APG""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines, flights;
###Columns: airlines.uid, airlines.airline, flights.sourceairport, flights.airline;
"
flight_2,Which airways have departures from CVO but not from APG airports?,"SELECT t1.airline FROM airlines as t1 JOIN flights as t2 ON t1.uid  =  t2.airline WHERE t2.sourceairport  =  ""CVO"" EXCEPT SELECT t1.airline FROM airlines as t1 JOIN flights as t2 ON t1.uid  =  t2.airline WHERE t2.sourceairport  =  ""APG""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines, flights;
###Columns: airlines.uid, airlines.airline, flights.sourceairport, flights.airline;
"
flight_2,Find all airways that have at least 10 flights.,SELECT t1.airline FROM airlines as t1 JOIN flights as t2 ON t1.uid  =  t2.airline GROUP BY t1.airline HAVING COUNT(*)  >  10,"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines, flights;
###Columns: airlines.uid, airlines.airline, flights.airline;
"
flight_2,Which airways have at least 10 flights?,SELECT t1.airline FROM airlines as t1 JOIN flights as t2 ON t1.uid  =  t2.airline GROUP BY t1.airline HAVING COUNT(*)  >  10,"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines, flights;
###Columns: airlines.uid, airlines.airline, flights.airline;
"
flight_2,Find all airways that have fewer than 200 flights.,SELECT t1.airline FROM airlines as t1 JOIN flights as t2 ON t1.uid  =  t2.airline GROUP BY t1.airline HAVING COUNT(*)  <  200,"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines, flights;
###Columns: airlines.uid, airlines.airline, flights.airline;
"
flight_2,Which airways have less than 200 flights?,SELECT t1.airline FROM airlines as t1 JOIN flights as t2 ON t1.uid  =  t2.airline GROUP BY t1.airline HAVING COUNT(*)  <  200,"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airlines, flights;
###Columns: airlines.uid, airlines.airline, flights.airline;
"
flight_2,"What are flight codes of airway ""United Airlines""?","SELECT t1.flightno FROM flights as t1 JOIN airlines as t2 ON t2.uid  =  t1.airline WHERE t2.airline  =  ""United airlines""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airlines;
###Columns: flights.airline, flights.flightno, airlines.uid, airlines.airline;
"
flight_2,Which flight codes correspond to United Airlines flights?,"SELECT t1.flightno FROM flights as t1 JOIN airlines as t2 ON t2.uid  =  t1.airline WHERE t2.airline  =  ""United airlines""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airlines;
###Columns: flights.airline, flights.flightno, airlines.uid, airlines.airline;
"
flight_2,"What are flight codes of flights departing from Airport ""APG""?","SELECT flightno FROM flights WHERE sourceairport  =  ""APG""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights;
###Columns: flights.sourceairport, flights.flightno;
"
flight_2,Give the flight codes of flights leaving from APG.,"SELECT flightno FROM flights WHERE sourceairport  =  ""APG""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights;
###Columns: flights.sourceairport, flights.flightno;
"
flight_2,"What are flight codes of flights arriving at Airport ""APG""?","SELECT flightno FROM flights WHERE destairport  =  ""APG""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights;
###Columns: flights.destairport, flights.flightno;
"
flight_2,Give the flight codes of flights landing at APG.,"SELECT flightno FROM flights WHERE destairport  =  ""APG""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights;
###Columns: flights.destairport, flights.flightno;
"
flight_2,"What are flight codes of flights departing from City ""Aberdeen ""?","SELECT t1.flightno FROM flights as t1 JOIN airports as t2 ON t1.sourceairport   =  t2.airportcode WHERE t2.city  =  ""Aberdeen""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airports;
###Columns: flights.sourceairport, flights.flightno, airports.city, airports.airportcode;
"
flight_2,Give the flight codes of flights leaving from Aberdeen.,"SELECT t1.flightno FROM flights as t1 JOIN airports as t2 ON t1.sourceairport   =  t2.airportcode WHERE t2.city  =  ""Aberdeen""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airports;
###Columns: flights.sourceairport, flights.flightno, airports.city, airports.airportcode;
"
flight_2,"What are flight codes of flights arriving in City ""Aberdeen""?","SELECT t1.flightno FROM flights as t1 JOIN airports as t2 ON t1.destairport   =  t2.airportcode WHERE t2.city  =  ""Aberdeen""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airports;
###Columns: flights.destairport, flights.flightno, airports.city, airports.airportcode;
"
flight_2,Give the flight codes of flights arriving in Aberdeen.,"SELECT t1.flightno FROM flights as t1 JOIN airports as t2 ON t1.destairport   =  t2.airportcode WHERE t2.city  =  ""Aberdeen""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airports;
###Columns: flights.destairport, flights.flightno, airports.city, airports.airportcode;
"
flight_2,Find the code of flights landing in the city of Aberdeen or Abilene.,"SELECT COUNT(*) FROM flights as t1 JOIN airports as t2 ON t1.destairport  =  t2.airportcode WHERE t2.city  =  ""Aberdeen"" OR t2.city  =  ""Abilene""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airports;
###Columns: flights.destairport, airports.city, airports.airportcode;
"
flight_2,How many flights land in Aberdeen or Abilene?,"SELECT COUNT(*) FROM flights as t1 JOIN airports as t2 ON t1.destairport  =  t2.airportcode WHERE t2.city  =  ""Aberdeen"" OR t2.city  =  ""Abilene""","CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: flights, airports;
###Columns: flights.destairport, airports.city, airports.airportcode;
"
flight_2,Find the name of aerodromes which do not have any flight in and out.,SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights),"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airports, flights;
###Columns: airports.airportcode, airports.airportname, flights.destairport, flights.sourceairport;
"
flight_2,Which aerodromes do not have leaving or arriving flights?,SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights),"CREATE TABLE `airlines` (
  uid INTEGER,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE `airports` (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE `flights` (
  Airline INTEGER PRIMARY KEY,
  FlightNo INTEGER PRIMARY KEY,
  SourceAirport TEXT REFERENCES airports(AirportCode),
  DestAirport TEXT REFERENCES airports(AirportCode)
);

","###Tables: airports, flights;
###Columns: airports.airportcode, airports.airportname, flights.destairport, flights.sourceairport;
"
employee_hire_evaluation,How many workers are there?,SELECT COUNT(*) FROM employee,"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: employee;
###Columns: employee.city, employee.name, employee.employee_id, employee.age;
"
employee_hire_evaluation,Count the number of staffs,SELECT COUNT(*) FROM employee,"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: employee;
###Columns: employee.city, employee.name, employee.employee_id, employee.age;
"
employee_hire_evaluation,Sort worker names by their age in ascending order.,SELECT name FROM employee ORDER BY age,"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: employee;
###Columns: employee.name, employee.age;
"
employee_hire_evaluation,List the names of workers and sort in ascending order of age.,SELECT name FROM employee ORDER BY age,"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: employee;
###Columns: employee.name, employee.age;
"
employee_hire_evaluation,What is the number of workers from each town?,"SELECT COUNT(*) ,  city FROM employee GROUP BY city","CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: employee;
###Columns: employee.city;
"
employee_hire_evaluation,Count the number of staffs for each town.,"SELECT COUNT(*) ,  city FROM employee GROUP BY city","CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: employee;
###Columns: employee.city;
"
employee_hire_evaluation,Which towns do more than one staff under age 30 come from?,SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING COUNT(*)  >  1,"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: employee;
###Columns: employee.city, employee.age;
"
employee_hire_evaluation,Find the towns that have more than one worker under age 30.,SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING COUNT(*)  >  1,"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: employee;
###Columns: employee.city, employee.age;
"
employee_hire_evaluation,Find the number of shops in each city.,"SELECT COUNT(*) ,  location FROM shop GROUP BY location","CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: shop;
###Columns: shop.location, shop.name, shop.shop_id, shop.manager_name, shop.number_products, shop.district;
"
employee_hire_evaluation,How many stores are there in each city?,"SELECT COUNT(*) ,  location FROM shop GROUP BY location","CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: shop;
###Columns: shop.location, shop.name, shop.shop_id, shop.manager_name, shop.number_products, shop.district;
"
employee_hire_evaluation,Find the head name and district of the shop whose number of commodities is the largest.,"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1","CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: shop;
###Columns: shop.district, shop.number_products, shop.manager_name;
"
employee_hire_evaluation,What are the director name and district of the market that sells the largest number of goods?,"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1","CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: shop;
###Columns: shop.district, shop.number_products, shop.manager_name;
"
employee_hire_evaluation,find the minimum and maximum number of merchandises of all stores.,"SELECT MIN(number_products) ,  MAX(number_products) FROM shop","CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: shop;
###Columns: shop.number_products;
"
employee_hire_evaluation,What are the minimum and maximum number of goods across all the stores?,"SELECT MIN(number_products) ,  MAX(number_products) FROM shop","CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: shop;
###Columns: shop.number_products;
"
employee_hire_evaluation,"Return the name, city and district of all markets in descending order of number of commodities.","SELECT name ,  location ,  district FROM shop ORDER BY number_products DESC","CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: shop;
###Columns: shop.name, shop.district, shop.number_products, shop.location;
"
employee_hire_evaluation,"Sort all the stores by number merchandises in descending order, and return the name, city and district of each store.","SELECT name ,  location ,  district FROM shop ORDER BY number_products DESC","CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: shop;
###Columns: shop.name, shop.district, shop.number_products, shop.location;
"
employee_hire_evaluation,Find the names of stores whose number merchandises is more than the average number of merchandises.,SELECT name FROM shop WHERE number_products  >  (SELECT AVG(number_products) FROM shop),"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: shop;
###Columns: shop.name, shop.number_products;
"
employee_hire_evaluation,Which shops' number goods is above the average? Give me the store names.,SELECT name FROM shop WHERE number_products  >  (SELECT AVG(number_products) FROM shop),"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: shop;
###Columns: shop.name, shop.number_products;
"
employee_hire_evaluation,find the name of staff who was awarded the most times in the assessment.,SELECT t1.name FROM employee as t1 JOIN evaluation as t2 ON t1.employee_id  =  t2.employee_id GROUP BY t2.employee_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: employee, evaluation;
###Columns: employee.name, employee.employee_id, evaluation.employee_id;
"
employee_hire_evaluation,Which worker received the most awards in assessments? Give me the worker name.,SELECT t1.name FROM employee as t1 JOIN evaluation as t2 ON t1.employee_id  =  t2.employee_id GROUP BY t2.employee_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: employee, evaluation;
###Columns: employee.name, employee.employee_id, evaluation.employee_id;
"
employee_hire_evaluation,Find the name of the worker who got the highest one time premium.,SELECT t1.name FROM employee as t1 JOIN evaluation as t2 ON t1.employee_id  =  t2.employee_id ORDER BY t2.bonus DESC LIMIT 1,"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: employee, evaluation;
###Columns: employee.name, employee.employee_id, evaluation.employee_id, evaluation.bonus;
"
employee_hire_evaluation,Which worker received the biggest extra prize? Give me the worker name.,SELECT t1.name FROM employee as t1 JOIN evaluation as t2 ON t1.employee_id  =  t2.employee_id ORDER BY t2.bonus DESC LIMIT 1,"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: employee, evaluation;
###Columns: employee.name, employee.employee_id, evaluation.employee_id, evaluation.bonus;
"
employee_hire_evaluation,Find the names of staffs who never won any award in the assessment.,SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation),"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: employee, evaluation;
###Columns: employee.name, employee.employee_id, evaluation.employee_id;
"
employee_hire_evaluation,What are the names of the staffs who never received any assessment?,SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation),"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: employee, evaluation;
###Columns: employee.name, employee.employee_id, evaluation.employee_id;
"
employee_hire_evaluation,What is the name of the store that is hiring the largest number of workers?,SELECT t2.name FROM hiring as t1 JOIN shop as t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: shop, hiring;
###Columns: shop.name, shop.shop_id, hiring.shop_id;
"
employee_hire_evaluation,Which shop has the most workers? Give me the store name.,SELECT t2.name FROM hiring as t1 JOIN shop as t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: shop, hiring;
###Columns: shop.name, shop.shop_id, hiring.shop_id;
"
employee_hire_evaluation,Find the name of the stores that do not hire any people.,SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring),"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: shop, hiring;
###Columns: shop.name, shop.shop_id, hiring.shop_id;
"
employee_hire_evaluation,Which stores run with no workers? Find the store names,SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring),"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: shop, hiring;
###Columns: shop.name, shop.shop_id, hiring.shop_id;
"
employee_hire_evaluation,Find the number of staffs hired in each store; show the store name as well.,"SELECT COUNT(*) ,  t2.name FROM hiring as t1 JOIN shop as t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name","CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: shop, hiring;
###Columns: shop.name, shop.shop_id, hiring.shop_id;
"
employee_hire_evaluation,"For each store, return the number of people working there and the name of the store.","SELECT COUNT(*) ,  t2.name FROM hiring as t1 JOIN shop as t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name","CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: shop, hiring;
###Columns: shop.name, shop.shop_id, hiring.shop_id;
"
employee_hire_evaluation,What is total premium given in all assessments?,SELECT SUM(bonus) FROM evaluation,"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: evaluation;
###Columns: evaluation.bonus;
"
employee_hire_evaluation,Find the total amount of extra prize given in all the assessments.,SELECT SUM(bonus) FROM evaluation,"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: evaluation;
###Columns: evaluation.bonus;
"
employee_hire_evaluation,Which district has both stores with less than 3000 goods and stores with more than 10000 goods?,SELECT district FROM shop WHERE number_products  <  3000 INTERSECT SELECT district FROM shop WHERE number_products  >  10000,"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: shop;
###Columns: shop.district, shop.number_products;
"
employee_hire_evaluation,Find the districts in which there are both shops selling less than 3000 goods and markets selling more than 10000 goods.,SELECT district FROM shop WHERE number_products  <  3000 INTERSECT SELECT district FROM shop WHERE number_products  >  10000,"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: shop;
###Columns: shop.district, shop.number_products;
"
employee_hire_evaluation,How many different store city are there?,SELECT COUNT(DISTINCT location) FROM shop,"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: shop;
###Columns: shop.location, shop.name, shop.shop_id, shop.manager_name, shop.number_products, shop.district;
"
employee_hire_evaluation,Count the number of distinct store city.,SELECT COUNT(DISTINCT location) FROM shop,"CREATE TABLE `employee` (
  Employee_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  City TEXT
);

CREATE TABLE `shop` (
  Shop_ID INT PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products INT,
  Manager_name TEXT
);

CREATE TABLE `hiring` (
  Shop_ID INT REFERENCES shop(Shop_ID),
  Employee_ID INT PRIMARY KEY REFERENCES employee(Employee_ID),
  Start_from TEXT,
  Is_full_time bool
);

CREATE TABLE `evaluation` (
  Employee_ID TEXT PRIMARY KEY REFERENCES employee(Employee_ID),
  Year_awarded TEXT PRIMARY KEY,
  Bonus REAL
);

","###Tables: shop;
###Columns: shop.location, shop.name, shop.shop_id, shop.manager_name, shop.number_products, shop.district;
"
cre_Doc_Template_Mgt,How many papers do we have?,SELECT COUNT(*) FROM documents,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: documents;
###Columns: documents.other_details, documents.template_id, documents.document_description, documents.document_name, documents.document_id;
"
cre_Doc_Template_Mgt,Count the number of papers.,SELECT COUNT(*) FROM documents,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: documents;
###Columns: documents.other_details, documents.template_id, documents.document_description, documents.document_name, documents.document_id;
"
cre_Doc_Template_Mgt,"List paper IDs, paper names, and paper descriptions for all papers.","SELECT document_id ,  document_name ,  document_description FROM documents","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: documents;
###Columns: documents.document_name, documents.document_description, documents.document_id;
"
cre_Doc_Template_Mgt,"What are the ids, names, and descriptions for all papers?","SELECT document_id ,  document_name ,  document_description FROM documents","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: documents;
###Columns: documents.document_name, documents.document_description, documents.document_id;
"
cre_Doc_Template_Mgt,What is the document name and layout id for document with description with the letter 'w' in it?,"SELECT document_name ,  template_id FROM documents WHERE document_description LIKE ""%w%""","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: documents;
###Columns: documents.document_name, documents.document_description, documents.template_id;
"
cre_Doc_Template_Mgt,Return the names and layout ids for papers that contain the letter w in their describing content.,"SELECT document_name ,  template_id FROM documents WHERE document_description LIKE ""%w%""","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: documents;
###Columns: documents.document_name, documents.document_description, documents.template_id;
"
cre_Doc_Template_Mgt,"What is the paper id, layout id and describing content for paper named ""Robbin CV""?","SELECT document_id ,  template_id ,  document_description FROM documents WHERE document_name  =  ""Robbin CV""","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: documents;
###Columns: documents.template_id, documents.document_description, documents.document_id, documents.document_name;
"
cre_Doc_Template_Mgt,"Return the paper id, layout id, and describing details for the paper with the name Robbin CV.","SELECT document_id ,  template_id ,  document_description FROM documents WHERE document_name  =  ""Robbin CV""","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: documents;
###Columns: documents.template_id, documents.document_description, documents.document_id, documents.document_name;
"
cre_Doc_Template_Mgt,How many different layout do all document use?,SELECT COUNT(DISTINCT template_id) FROM documents,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: documents;
###Columns: documents.template_id;
"
cre_Doc_Template_Mgt,Count the number of different layout used for text files.,SELECT COUNT(DISTINCT template_id) FROM documents,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: documents;
###Columns: documents.template_id;
"
cre_Doc_Template_Mgt,How many text files are using the layout with type code 'PPT'?,SELECT COUNT(*) FROM documents as t1 JOIN templates as t2 ON t1.template_id  =  t2.template_id WHERE t2.template_type_code  =  'PPT',"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: documents, templates;
###Columns: documents.template_id, templates.template_type_code, templates.template_id;
"
cre_Doc_Template_Mgt,Count the number of text files that use the PPT template type.,SELECT COUNT(*) FROM documents as t1 JOIN templates as t2 ON t1.template_id  =  t2.template_id WHERE t2.template_type_code  =  'PPT',"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: documents, templates;
###Columns: documents.template_id, templates.template_type_code, templates.template_id;
"
cre_Doc_Template_Mgt,Show all layout ids and number of text files using each layout.,"SELECT template_id ,  COUNT(*) FROM documents GROUP BY template_id","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: documents;
###Columns: documents.template_id;
"
cre_Doc_Template_Mgt,"What are all different layout ids used for papers, and how many times were each of them used?","SELECT template_id ,  COUNT(*) FROM documents GROUP BY template_id","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: documents;
###Columns: documents.template_id;
"
cre_Doc_Template_Mgt,What is the id and type for the layout used by the most papers?,"SELECT t1.template_id ,  t2.template_type_code FROM documents as t1 JOIN templates as t2 ON t1.template_id  =  t2.template_id GROUP BY t1.template_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: documents, templates;
###Columns: documents.template_id, templates.template_type_code, templates.template_id;
"
cre_Doc_Template_Mgt,Return the id and type of the layout that is used for the greatest number of papers.,"SELECT t1.template_id ,  t2.template_type_code FROM documents as t1 JOIN templates as t2 ON t1.template_id  =  t2.template_id GROUP BY t1.template_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: documents, templates;
###Columns: documents.template_id, templates.template_type_code, templates.template_id;
"
cre_Doc_Template_Mgt,Show ids for all layouts that are used by more than one text file.,SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(*)  >  1,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: documents;
###Columns: documents.template_id;
"
cre_Doc_Template_Mgt,What are the template ids of any templates used in more than a single paper?,SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(*)  >  1,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: documents;
###Columns: documents.template_id;
"
cre_Doc_Template_Mgt,Show ids for all templates not used by any text file.,SELECT template_id FROM templates EXCEPT SELECT template_id FROM documents,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates, documents;
###Columns: templates.template_id, documents.template_id;
"
cre_Doc_Template_Mgt,What are the ids for layout that are not used in any papers?,SELECT template_id FROM templates EXCEPT SELECT template_id FROM documents,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates, documents;
###Columns: templates.template_id, documents.template_id;
"
cre_Doc_Template_Mgt,How many layout do we have?,SELECT COUNT(*) FROM templates,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates;
###Columns: templates.date_effective_from, templates.template_type_code, templates.version_number, templates.template_id, templates.template_details, templates.date_effective_to;
"
cre_Doc_Template_Mgt,Count the number of layout.,SELECT COUNT(*) FROM templates,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates;
###Columns: templates.date_effective_from, templates.template_type_code, templates.version_number, templates.template_id, templates.template_details, templates.date_effective_to;
"
cre_Doc_Template_Mgt,"Show layout ids, version numbers, and layout type for all layout.","SELECT template_id ,  version_number ,  template_type_code FROM templates","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates;
###Columns: templates.template_type_code, templates.version_number, templates.template_id;
"
cre_Doc_Template_Mgt,"What are the ids, edition numbers, and type name for each layout?","SELECT template_id ,  version_number ,  template_type_code FROM templates","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates;
###Columns: templates.template_type_code, templates.version_number, templates.template_id;
"
cre_Doc_Template_Mgt,Show all distinct layout type names for all layout.,SELECT DISTINCT template_type_code FROM templates,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates;
###Columns: templates.template_type_code;
"
cre_Doc_Template_Mgt,What are the different layout type names?,SELECT DISTINCT template_type_code FROM templates,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates;
###Columns: templates.template_type_code;
"
cre_Doc_Template_Mgt,What are the ids of layout with layout type code PP or PPT?,"SELECT template_id FROM templates WHERE template_type_code  =  ""PP"" OR template_type_code  =  ""PPT""","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates;
###Columns: templates.template_type_code, templates.template_id;
"
cre_Doc_Template_Mgt,Return the ids of layout that have the code PP or PPT.,"SELECT template_id FROM templates WHERE template_type_code  =  ""PP"" OR template_type_code  =  ""PPT""","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates;
###Columns: templates.template_type_code, templates.template_id;
"
cre_Doc_Template_Mgt,How many layout have template type code CV?,"SELECT COUNT(*) FROM templates WHERE template_type_code  =  ""CV""","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates;
###Columns: templates.template_type_code;
"
cre_Doc_Template_Mgt,Count the number of layout of the type CV.,"SELECT COUNT(*) FROM templates WHERE template_type_code  =  ""CV""","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates;
###Columns: templates.template_type_code;
"
cre_Doc_Template_Mgt,What is the edition number and layout type for the layout with edition number later than 5?,"SELECT version_number ,  template_type_code FROM templates WHERE version_number  >  5","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates;
###Columns: templates.template_type_code, templates.version_number;
"
cre_Doc_Template_Mgt,Return the edition numbers and layout type names of layout with a edition number greater than 5.,"SELECT version_number ,  template_type_code FROM templates WHERE version_number  >  5","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates;
###Columns: templates.template_type_code, templates.version_number;
"
cre_Doc_Template_Mgt,Show all layout type codes and number of layout for each.,"SELECT template_type_code ,  COUNT(*) FROM templates GROUP BY template_type_code","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates;
###Columns: templates.template_type_code;
"
cre_Doc_Template_Mgt,"What are the different layout type, and how many layout correspond to each?","SELECT template_type_code ,  COUNT(*) FROM templates GROUP BY template_type_code","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates;
###Columns: templates.template_type_code;
"
cre_Doc_Template_Mgt,Which layout type code has most number of layout?,SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates;
###Columns: templates.template_type_code;
"
cre_Doc_Template_Mgt,Return the type name of the layout type that the most layout belong to.,SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates;
###Columns: templates.template_type_code;
"
cre_Doc_Template_Mgt,Show all layout types with less than three layouts.,SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(*)  <  3,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates;
###Columns: templates.template_type_code;
"
cre_Doc_Template_Mgt,What are the names of layout types that have fewer than 3 layouts?,SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(*)  <  3,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates;
###Columns: templates.template_type_code;
"
cre_Doc_Template_Mgt,What the smallest edition number and its layout type code?,"SELECT MIN(version_number) ,  template_type_code FROM templates","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates;
###Columns: templates.template_type_code, templates.version_number;
"
cre_Doc_Template_Mgt,"Return the lowest edition number, along with its corresponding layout type code.","SELECT MIN(version_number) ,  template_type_code FROM templates","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates;
###Columns: templates.template_type_code, templates.version_number;
"
cre_Doc_Template_Mgt,"What is the layout type code of the layout used by layout with the name ""Data base""?","SELECT t1.template_type_code FROM templates as t1 JOIN documents as t2 ON t1.template_id  =  t2.template_id WHERE t2.document_name  =  ""Data base""","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates, documents;
###Columns: templates.template_type_code, templates.template_id, documents.template_id, documents.document_name;
"
cre_Doc_Template_Mgt,Return the layout type code of the layout that is used by a text file named Data base.,"SELECT t1.template_type_code FROM templates as t1 JOIN documents as t2 ON t1.template_id  =  t2.template_id WHERE t2.document_name  =  ""Data base""","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates, documents;
###Columns: templates.template_type_code, templates.template_id, documents.template_id, documents.document_name;
"
cre_Doc_Template_Mgt,Show all text file names using layout with layout type code BK.,"SELECT t2.document_name FROM templates as t1 JOIN documents as t2 ON t1.template_id  =  t2.template_id WHERE t1.template_type_code  =  ""BK""","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: documents, templates;
###Columns: documents.document_name, documents.template_id, templates.template_type_code, templates.template_id;
"
cre_Doc_Template_Mgt,What are the names of papers that use layouts with the code BK?,"SELECT t2.document_name FROM templates as t1 JOIN documents as t2 ON t1.template_id  =  t2.template_id WHERE t1.template_type_code  =  ""BK""","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: documents, templates;
###Columns: documents.document_name, documents.template_id, templates.template_type_code, templates.template_id;
"
cre_Doc_Template_Mgt,Show all layout type names and the number of papers using each type.,"SELECT t1.template_type_code ,  COUNT(*) FROM templates as t1 JOIN documents as t2 ON t1.template_id  =  t2.template_id GROUP BY t1.template_type_code","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates, documents;
###Columns: templates.template_type_code, templates.template_id, documents.template_id;
"
cre_Doc_Template_Mgt,"What are the different layout types, and how many papers use each type?","SELECT t1.template_type_code ,  COUNT(*) FROM templates as t1 JOIN documents as t2 ON t1.template_id  =  t2.template_id GROUP BY t1.template_type_code","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates, documents;
###Columns: templates.template_type_code, templates.template_id, documents.template_id;
"
cre_Doc_Template_Mgt,Which layout type is used by most number of text files?,SELECT t1.template_type_code FROM templates as t1 JOIN documents as t2 ON t1.template_id  =  t2.template_id GROUP BY t1.template_type_code ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates, documents;
###Columns: templates.template_type_code, templates.template_id, documents.template_id;
"
cre_Doc_Template_Mgt,Return the code of the layout type that is most commonly used in text files.,SELECT t1.template_type_code FROM templates as t1 JOIN documents as t2 ON t1.template_id  =  t2.template_id GROUP BY t1.template_type_code ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates, documents;
###Columns: templates.template_type_code, templates.template_id, documents.template_id;
"
cre_Doc_Template_Mgt,Show all layout types that are not used by any text file.,SELECT template_type_code FROM templates EXCEPT SELECT template_type_code FROM templates as t1 JOIN documents as t2 ON t1.template_id  =  t2.template_id,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates, documents;
###Columns: templates.template_id, documents.template_id;
"
cre_Doc_Template_Mgt,What are the names of layout types that are not used for any text file?,SELECT template_type_code FROM templates EXCEPT SELECT template_type_code FROM templates as t1 JOIN documents as t2 ON t1.template_id  =  t2.template_id,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates, documents;
###Columns: templates.template_id, documents.template_id;
"
cre_Doc_Template_Mgt,Show all layout type names and describing details.,"SELECT template_type_code ,  template_type_description FROM ref_template_types","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: ref_template_types;
###Columns: ref_template_types.template_type_code, ref_template_types.template_type_description;
"
cre_Doc_Template_Mgt,What are the type names and describing details for all layout types?,"SELECT template_type_code ,  template_type_description FROM ref_template_types","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: ref_template_types;
###Columns: ref_template_types.template_type_code, ref_template_types.template_type_description;
"
cre_Doc_Template_Mgt,"What is the layout type describing content for layout type code ""AD"".","SELECT template_type_description FROM ref_template_types WHERE template_type_code  =  ""AD""","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: ref_template_types;
###Columns: ref_template_types.template_type_code, ref_template_types.template_type_description;
"
cre_Doc_Template_Mgt,Return the layout type describing content of the layout type with the code AD.,"SELECT template_type_description FROM ref_template_types WHERE template_type_code  =  ""AD""","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: ref_template_types;
###Columns: ref_template_types.template_type_code, ref_template_types.template_type_description;
"
cre_Doc_Template_Mgt,"What is the layout type name for layout type description ""Book"".","SELECT template_type_code FROM ref_template_types WHERE template_type_description  =  ""Book""","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: ref_template_types;
###Columns: ref_template_types.template_type_code, ref_template_types.template_type_description;
"
cre_Doc_Template_Mgt,"Return the type of the layout type with the description ""Book"".","SELECT template_type_code FROM ref_template_types WHERE template_type_description  =  ""Book""","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: ref_template_types;
###Columns: ref_template_types.template_type_code, ref_template_types.template_type_description;
"
cre_Doc_Template_Mgt,What are the distinct layout type descriptions for the layouts ever used by any text file?,SELECT DISTINCT t1.template_type_description FROM ref_template_types as t1 JOIN templates as t2 ON t1.template_type_code  = t2.template_type_code JOIN documents as t3 ON t2.template_id  =  t3.template_id,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: ref_template_types, templates, documents;
###Columns: ref_template_types.template_type_code, ref_template_types.template_type_description, templates.template_type_code, templates.template_id, documents.template_id;
"
cre_Doc_Template_Mgt,Return the different describing content for layouts that have been used in a text file.,SELECT DISTINCT t1.template_type_description FROM ref_template_types as t1 JOIN templates as t2 ON t1.template_type_code  = t2.template_type_code JOIN documents as t3 ON t2.template_id  =  t3.template_id,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: ref_template_types, templates, documents;
###Columns: ref_template_types.template_type_code, ref_template_types.template_type_description, templates.template_type_code, templates.template_id, documents.template_id;
"
cre_Doc_Template_Mgt,"What are the layout ids with layout type describing content ""Presentation"".","SELECT t2.template_id FROM ref_template_types as t1 JOIN templates as t2 ON t1.template_type_code  = t2.template_type_code WHERE t1.template_type_description  =  ""Presentation""","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates, ref_template_types;
###Columns: templates.template_type_code, templates.template_id, ref_template_types.template_type_code, ref_template_types.template_type_description;
"
cre_Doc_Template_Mgt,Return the ids corresponding to layouts with the describing content 'Presentation'.,"SELECT t2.template_id FROM ref_template_types as t1 JOIN templates as t2 ON t1.template_type_code  = t2.template_type_code WHERE t1.template_type_description  =  ""Presentation""","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: templates, ref_template_types;
###Columns: templates.template_type_code, templates.template_id, ref_template_types.template_type_code, ref_template_types.template_type_description;
"
cre_Doc_Template_Mgt,How many paragraphs in total?,SELECT COUNT(*) FROM paragraphs,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs;
###Columns: paragraphs.other_details, paragraphs.paragraph_text, paragraphs.paragraph_id, paragraphs.document_id;
"
cre_Doc_Template_Mgt,Count the number of paragraphs.,SELECT COUNT(*) FROM paragraphs,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs;
###Columns: paragraphs.other_details, paragraphs.paragraph_text, paragraphs.paragraph_id, paragraphs.document_id;
"
cre_Doc_Template_Mgt,How many paragraphs for the text file with name 'Summer Show'?,SELECT COUNT(*) FROM paragraphs as t1 JOIN documents as t2 ON t1.document_id  =  t2.document_id WHERE t2.document_name  =  'Summer Show',"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs, documents;
###Columns: paragraphs.document_id, documents.document_name, documents.document_id;
"
cre_Doc_Template_Mgt,Count the number of paragraphs in the text file named 'Summer Show'.,SELECT COUNT(*) FROM paragraphs as t1 JOIN documents as t2 ON t1.document_id  =  t2.document_id WHERE t2.document_name  =  'Summer Show',"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs, documents;
###Columns: paragraphs.document_id, documents.document_name, documents.document_id;
"
cre_Doc_Template_Mgt,Show paragraph details for paragraph with text 'Korea'.,SELECT other_details FROM paragraphs WHERE paragraph_text  =  'Korea',"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs;
###Columns: paragraphs.other_details, paragraphs.paragraph_text;
"
cre_Doc_Template_Mgt,What are the details for the paragraph that includes the text 'Korea'?,SELECT other_details FROM paragraphs WHERE paragraph_text  =  'Korea',"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs;
###Columns: paragraphs.other_details, paragraphs.paragraph_text;
"
cre_Doc_Template_Mgt,Show all paragraph ids and content for the text file with name 'Welcome to NY'.,"SELECT t1.paragraph_id ,   t1.paragraph_text FROM paragraphs as t1 JOIN documents as t2 ON t1.document_id  =  t2.document_id WHERE t2.document_name  =  'Welcome to NY'","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs, documents;
###Columns: paragraphs.paragraph_text, paragraphs.paragraph_id, paragraphs.document_id, documents.document_name, documents.document_id;
"
cre_Doc_Template_Mgt,What are the ids and content of paragraphs in the text file titled 'Welcome to NY'?,"SELECT t1.paragraph_id ,   t1.paragraph_text FROM paragraphs as t1 JOIN documents as t2 ON t1.document_id  =  t2.document_id WHERE t2.document_name  =  'Welcome to NY'","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs, documents;
###Columns: paragraphs.paragraph_text, paragraphs.paragraph_id, paragraphs.document_id, documents.document_name, documents.document_id;
"
cre_Doc_Template_Mgt,"Show all paragraph content for the text file ""Customer reviews"".","SELECT t1.paragraph_text FROM paragraphs as t1 JOIN documents as t2 ON t1.document_id  =  t2.document_id WHERE t2.document_name  =  ""Customer reviews""","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs, documents;
###Columns: paragraphs.paragraph_text, paragraphs.document_id, documents.document_name, documents.document_id;
"
cre_Doc_Template_Mgt,What are the paragraph content for the text file with the name 'Customer reviews'?,"SELECT t1.paragraph_text FROM paragraphs as t1 JOIN documents as t2 ON t1.document_id  =  t2.document_id WHERE t2.document_name  =  ""Customer reviews""","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs, documents;
###Columns: paragraphs.paragraph_text, paragraphs.document_id, documents.document_name, documents.document_id;
"
cre_Doc_Template_Mgt,Show all paper ids and the number of paragraphs in each text file. Order by paper id.,"SELECT document_id ,  COUNT(*) FROM paragraphs GROUP BY document_id ORDER BY document_id","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs;
###Columns: paragraphs.document_id;
"
cre_Doc_Template_Mgt,"Return the different paper ids along with the number of paragraphs corresponding to each, ordered by id.","SELECT document_id ,  COUNT(*) FROM paragraphs GROUP BY document_id ORDER BY document_id","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs;
###Columns: paragraphs.document_id;
"
cre_Doc_Template_Mgt,"Show all text file ids, names and the number of paragraphs in each paper.","SELECT t1.document_id ,  t2.document_name ,  COUNT(*) FROM paragraphs as t1 JOIN documents as t2 ON t1.document_id  =  t2.document_id GROUP BY t1.document_id","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs, documents;
###Columns: paragraphs.document_id, documents.document_name, documents.document_id;
"
cre_Doc_Template_Mgt,"What are the ids and names of each paper, as well as the number of paragraphs in each?","SELECT t1.document_id ,  t2.document_name ,  COUNT(*) FROM paragraphs as t1 JOIN documents as t2 ON t1.document_id  =  t2.document_id GROUP BY t1.document_id","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs, documents;
###Columns: paragraphs.document_id, documents.document_name, documents.document_id;
"
cre_Doc_Template_Mgt,List all name ids with at least two paragraphs.,SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*)  >=  2,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs;
###Columns: paragraphs.document_id;
"
cre_Doc_Template_Mgt,What are the ids of text files that have 2 or more paragraphs?,SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*)  >=  2,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs;
###Columns: paragraphs.document_id;
"
cre_Doc_Template_Mgt,What is the text file id and name with greatest number of paragraphs?,"SELECT t1.document_id ,  t2.document_name FROM paragraphs as t1 JOIN documents as t2 ON t1.document_id  =  t2.document_id GROUP BY t1.document_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs, documents;
###Columns: paragraphs.document_id, documents.document_name, documents.document_id;
"
cre_Doc_Template_Mgt,Return the id and name of the paper with the most paragraphs.,"SELECT t1.document_id ,  t2.document_name FROM paragraphs as t1 JOIN documents as t2 ON t1.document_id  =  t2.document_id GROUP BY t1.document_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs, documents;
###Columns: paragraphs.document_id, documents.document_name, documents.document_id;
"
cre_Doc_Template_Mgt,What is the paper id with least number of paragraphs?,SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs;
###Columns: paragraphs.document_id;
"
cre_Doc_Template_Mgt,Return the id of the paper with the fewest paragraphs.,SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(*) ASC LIMIT 1,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs;
###Columns: paragraphs.document_id;
"
cre_Doc_Template_Mgt,What is the paper id with 1 to 2 paragraphs?,SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) BETWEEN 1 AND 2,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs;
###Columns: paragraphs.document_id;
"
cre_Doc_Template_Mgt,Give the ids of text files that have between one and two paragraphs.,SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) BETWEEN 1 AND 2,"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs;
###Columns: paragraphs.document_id;
"
cre_Doc_Template_Mgt,Show the paper id with paragraph text 'Brazil' and 'Ireland'.,SELECT document_id FROM paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM paragraphs WHERE paragraph_text  =  'Ireland',"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs;
###Columns: paragraphs.paragraph_text, paragraphs.document_id;
"
cre_Doc_Template_Mgt,What are the ids of text files that contain the paragraph text 'Brazil' and 'Ireland'?,SELECT document_id FROM paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM paragraphs WHERE paragraph_text  =  'Ireland',"CREATE TABLE `Ref_Template_Types` (
  Template_Type_Code CHAR(15) PRIMARY KEY,
  Template_Type_Description VARCHAR(255)
);

CREATE TABLE `Templates` (
  Template_ID INTEGER,
  Version_Number INTEGER,
  Template_Type_Code CHAR(15) REFERENCES Ref_Template_Types(Template_Type_Code),
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details VARCHAR(255)
);

CREATE TABLE `Documents` (
  Document_ID INTEGER,
  Template_ID INTEGER REFERENCES Templates(Template_ID),
  Document_Name VARCHAR(255),
  Document_Description VARCHAR(255),
  Other_Details VARCHAR(255)
);

CREATE TABLE `Paragraphs` (
  Paragraph_ID INTEGER,
  Document_ID INTEGER REFERENCES Documents(Document_ID),
  Paragraph_Text VARCHAR(255),
  Other_Details VARCHAR(255)
);

","###Tables: paragraphs;
###Columns: paragraphs.paragraph_text, paragraphs.document_id;
"
course_teach,How many instructors are there?,SELECT COUNT(*) FROM teacher,"CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher;
###Columns: teacher.name, teacher.hometown, teacher.age, teacher.teacher_id;
"
course_teach,What is the total count of faculties?,SELECT COUNT(*) FROM teacher,"CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher;
###Columns: teacher.name, teacher.hometown, teacher.age, teacher.teacher_id;
"
course_teach,List the names of faculties in ascending order of age.,SELECT name FROM teacher ORDER BY age ASC,"CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher;
###Columns: teacher.name, teacher.age;
"
course_teach,What are the names of the faculties ordered by ascending age?,SELECT name FROM teacher ORDER BY age ASC,"CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher;
###Columns: teacher.name, teacher.age;
"
course_teach,What are the age and birthplace of instructors?,"SELECT age ,  hometown FROM teacher","CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher;
###Columns: teacher.hometown, teacher.age;
"
course_teach,What is the age and birthplace of every instructor?,"SELECT age ,  hometown FROM teacher","CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher;
###Columns: teacher.hometown, teacher.age;
"
course_teach,"List the name of faculties whose birthplace is not ""Little Lever Urban District"".","SELECT name FROM teacher WHERE hometown != ""Little Lever Urban District""","CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher;
###Columns: teacher.name, teacher.hometown;
"
course_teach,"What are the names of the faculties whose birthplace is not ""Little Lever Urban District""?","SELECT name FROM teacher WHERE hometown != ""Little Lever Urban District""","CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher;
###Columns: teacher.name, teacher.hometown;
"
course_teach,Show the name of faculties aged either 32 or 33?,SELECT name FROM teacher WHERE age  =  32 OR age  =  33,"CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher;
###Columns: teacher.name, teacher.age;
"
course_teach,What are the names of the instructors who are aged either 32 or 33?,SELECT name FROM teacher WHERE age  =  32 OR age  =  33,"CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher;
###Columns: teacher.name, teacher.age;
"
course_teach,What is the birthplace of the youngest instructor?,SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1,"CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher;
###Columns: teacher.hometown, teacher.age;
"
course_teach,Where is the youngest instructor from?,SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1,"CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher;
###Columns: teacher.hometown, teacher.age;
"
course_teach,Show different birthplace of instructors and the number of instructors from each birthplace.,"SELECT hometown ,  COUNT(*) FROM teacher GROUP BY hometown","CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher;
###Columns: teacher.hometown;
"
course_teach,"For each birthplace, how many instructors are there?","SELECT hometown ,  COUNT(*) FROM teacher GROUP BY hometown","CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher;
###Columns: teacher.hometown;
"
course_teach,List the most common birthplace of instructors.,SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher;
###Columns: teacher.hometown;
"
course_teach,What is the most commmon birthplaces for faculties?,SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher;
###Columns: teacher.hometown;
"
course_teach,Show the birthplaces shared by at least two faculties.,SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*)  >=  2,"CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher;
###Columns: teacher.hometown;
"
course_teach,What are the towns from which at least two instructors come from?,SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*)  >=  2,"CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher;
###Columns: teacher.hometown;
"
course_teach,Show names of instructors and the curriculums they are arranged to teach.,"SELECT t3.name ,  t2.course FROM course_arrange as t1 JOIN course as t2 ON t1.course_ID  =  t2.course_ID JOIN teacher as t3 ON t1.teacher_id  =  t3.teacher_id","CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher, course, course_arrange;
###Columns: teacher.name, teacher.teacher_id, course.course, course_arrange.teacher_id;
"
course_teach,What is the name of each faculty and what curriculum they teach?,"SELECT t3.name ,  t2.course FROM course_arrange as t1 JOIN course as t2 ON t1.course_ID  =  t2.course_ID JOIN teacher as t3 ON t1.teacher_id  =  t3.teacher_id","CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher, course, course_arrange;
###Columns: teacher.name, teacher.teacher_id, course.course, course_arrange.teacher_id;
"
course_teach,Show names of faculties and the curriculums they are arranged to teach in ascending alphabetical order of the faculty's name.,"SELECT t3.name ,  t2.course FROM course_arrange as t1 JOIN course as t2 ON t1.course_ID  =  t2.course_ID JOIN teacher as t3 ON t1.teacher_id  =  t3.teacher_id ORDER BY t3.name","CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher, course, course_arrange;
###Columns: teacher.name, teacher.teacher_id, course.course, course_arrange.teacher_id;
"
course_teach,What are the names of the faculties and the curriculums they teach in ascending alphabetical order by the name of the faculty?,"SELECT t3.name ,  t2.course FROM course_arrange as t1 JOIN course as t2 ON t1.course_ID  =  t2.course_ID JOIN teacher as t3 ON t1.teacher_id  =  t3.teacher_id ORDER BY t3.name","CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher, course, course_arrange;
###Columns: teacher.name, teacher.teacher_id, course.course, course_arrange.teacher_id;
"
course_teach,Show the name of the faculty for the math curriculum.,"SELECT t3.name FROM course_arrange as t1 JOIN course as t2 ON t1.course_id  =  t2.course_id JOIN teacher as t3 ON t1.teacher_id  =  t3.teacher_id WHERE t2.course  =  ""Math""","CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher, course_arrange, course;
###Columns: teacher.name, teacher.teacher_id, course_arrange.course_id, course_arrange.teacher_id, course.course_id, course.course;
"
course_teach,What are the names of the people who teach math?,"SELECT t3.name FROM course_arrange as t1 JOIN course as t2 ON t1.course_id  =  t2.course_id JOIN teacher as t3 ON t1.teacher_id  =  t3.teacher_id WHERE t2.course  =  ""Math""","CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher, course_arrange, course;
###Columns: teacher.name, teacher.teacher_id, course_arrange.course_id, course_arrange.teacher_id, course.course_id, course.course;
"
course_teach,Show names of faculties and the number of curriculums they teach.,"SELECT t2.name ,  COUNT(*) FROM course_arrange as t1 JOIN teacher as t2 ON t1.teacher_id  =  t2.teacher_id GROUP BY t2.name","CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher, course_arrange;
###Columns: teacher.name, teacher.teacher_id, course_arrange.teacher_id;
"
course_teach,What are the names of the instructors and how many curriculums do they teach?,"SELECT t2.name ,  COUNT(*) FROM course_arrange as t1 JOIN teacher as t2 ON t1.teacher_id  =  t2.teacher_id GROUP BY t2.name","CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher, course_arrange;
###Columns: teacher.name, teacher.teacher_id, course_arrange.teacher_id;
"
course_teach,Show names of instructors that teach at least two curriculums.,SELECT t2.name FROM course_arrange as t1 JOIN teacher as t2 ON t1.teacher_id  =  t2.teacher_id GROUP BY t2.name HAVING COUNT(*)  >=  2,"CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher, course_arrange;
###Columns: teacher.name, teacher.teacher_id, course_arrange.teacher_id;
"
course_teach,What are the names of the faculties who teach at least two curriculums?,SELECT t2.name FROM course_arrange as t1 JOIN teacher as t2 ON t1.teacher_id  =  t2.teacher_id GROUP BY t2.name HAVING COUNT(*)  >=  2,"CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher, course_arrange;
###Columns: teacher.name, teacher.teacher_id, course_arrange.teacher_id;
"
course_teach,List the names of instructors who have not been arranged to teach curriculums.,SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange),"CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher, course_arrange;
###Columns: teacher.name, teacher.teacher_id, course_arrange.teacher_id;
"
course_teach,What are the names of the instructors whose curriculums have not been arranged?,SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange),"CREATE TABLE `course` (
  Course_ID INT PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE `teacher` (
  Teacher_ID INT PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE `course_arrange` (
  Course_ID INT PRIMARY KEY REFERENCES course(Course_ID),
  Teacher_ID INT PRIMARY KEY REFERENCES teacher(Teacher_ID),
  Grade INT PRIMARY KEY
);

","###Tables: teacher, course_arrange;
###Columns: teacher.name, teacher.teacher_id, course_arrange.teacher_id;
"
museum_visit,How many guests below age 30 are there?,SELECT COUNT(*) FROM visitor WHERE age  <  30,"CREATE TABLE `museum` (
  Museum_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Staff INT,
  Open_Year TEXT
);

CREATE TABLE `visitor` (
  ID INT PRIMARY KEY,
  Name TEXT,
  Level_of_membership INT,
  Age INT
);

CREATE TABLE `visit` (
  Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID),
  visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID),
  Num_of_Ticket INT,
  Total_spent REAL
);

","###Tables: visitor;
###Columns: visitor.age;
"
museum_visit,"Find the names of the guests whose membership level is higher than 4, and order the results by the level from high to low.",SELECT name FROM visitor WHERE level_of_membership  >  4 ORDER BY level_of_membership DESC,"CREATE TABLE `museum` (
  Museum_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Staff INT,
  Open_Year TEXT
);

CREATE TABLE `visitor` (
  ID INT PRIMARY KEY,
  Name TEXT,
  Level_of_membership INT,
  Age INT
);

CREATE TABLE `visit` (
  Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID),
  visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID),
  Num_of_Ticket INT,
  Total_spent REAL
);

","###Tables: visitor;
###Columns: visitor.name, visitor.level_of_membership;
"
museum_visit,What is the average age of the guests whose membership level is not higher than 4?,SELECT AVG(age) FROM visitor WHERE level_of_membership  <=  4,"CREATE TABLE `museum` (
  Museum_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Staff INT,
  Open_Year TEXT
);

CREATE TABLE `visitor` (
  ID INT PRIMARY KEY,
  Name TEXT,
  Level_of_membership INT,
  Age INT
);

CREATE TABLE `visit` (
  Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID),
  visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID),
  Num_of_Ticket INT,
  Total_spent REAL
);

","###Tables: visitor;
###Columns: visitor.level_of_membership, visitor.age;
"
museum_visit,"Find the name and membership level of the guests whose membership level is higher than 4, and sort by their age from old to young.","SELECT name ,  level_of_membership FROM visitor WHERE level_of_membership  >  4 ORDER BY age DESC","CREATE TABLE `museum` (
  Museum_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Staff INT,
  Open_Year TEXT
);

CREATE TABLE `visitor` (
  ID INT PRIMARY KEY,
  Name TEXT,
  Level_of_membership INT,
  Age INT
);

CREATE TABLE `visit` (
  Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID),
  visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID),
  Num_of_Ticket INT,
  Total_spent REAL
);

","###Tables: visitor;
###Columns: visitor.name, visitor.level_of_membership, visitor.age;
"
museum_visit,Find the id and name of the museum that has the most workers?,"SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1","CREATE TABLE `museum` (
  Museum_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Staff INT,
  Open_Year TEXT
);

CREATE TABLE `visitor` (
  ID INT PRIMARY KEY,
  Name TEXT,
  Level_of_membership INT,
  Age INT
);

CREATE TABLE `visit` (
  Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID),
  visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID),
  Num_of_Ticket INT,
  Total_spent REAL
);

","###Tables: museum;
###Columns: museum.name, museum.num_of_staff, museum.museum_id;
"
museum_visit,Find the average number of worker working for the museums that were open before 2009.,SELECT AVG(num_of_staff) FROM museum WHERE open_year  <  2009,"CREATE TABLE `museum` (
  Museum_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Staff INT,
  Open_Year TEXT
);

CREATE TABLE `visitor` (
  ID INT PRIMARY KEY,
  Name TEXT,
  Level_of_membership INT,
  Age INT
);

CREATE TABLE `visit` (
  Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID),
  visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID),
  Num_of_Ticket INT,
  Total_spent REAL
);

","###Tables: museum;
###Columns: museum.open_year, museum.num_of_staff;
"
museum_visit,What are the opening year and worker number of the museum named Plaza Museum?,"SELECT num_of_staff ,  open_year FROM museum WHERE name  =  'Plaza Museum'","CREATE TABLE `museum` (
  Museum_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Staff INT,
  Open_Year TEXT
);

CREATE TABLE `visitor` (
  ID INT PRIMARY KEY,
  Name TEXT,
  Level_of_membership INT,
  Age INT
);

CREATE TABLE `visit` (
  Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID),
  visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID),
  Num_of_Ticket INT,
  Total_spent REAL
);

","###Tables: museum;
###Columns: museum.name, museum.open_year, museum.num_of_staff;
"
museum_visit,find the names of museums which have more worker than the minimum worker number of all museums opened after 2010.,SELECT name FROM museum WHERE num_of_staff  >  (SELECT MIN(num_of_staff) FROM museum WHERE open_year  >  2010),"CREATE TABLE `museum` (
  Museum_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Staff INT,
  Open_Year TEXT
);

CREATE TABLE `visitor` (
  ID INT PRIMARY KEY,
  Name TEXT,
  Level_of_membership INT,
  Age INT
);

CREATE TABLE `visit` (
  Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID),
  visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID),
  Num_of_Ticket INT,
  Total_spent REAL
);

","###Tables: museum;
###Columns: museum.name, museum.open_year, museum.num_of_staff;
"
museum_visit,"find the id, name and age for guests who visited some museums more than once.","SELECT t1.id ,  t1.name ,  t1.age FROM visitor as t1 JOIN visit as t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING COUNT(*)  >  1","CREATE TABLE `museum` (
  Museum_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Staff INT,
  Open_Year TEXT
);

CREATE TABLE `visitor` (
  ID INT PRIMARY KEY,
  Name TEXT,
  Level_of_membership INT,
  Age INT
);

CREATE TABLE `visit` (
  Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID),
  visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID),
  Num_of_Ticket INT,
  Total_spent REAL
);

","###Tables: visitor, visit;
###Columns: visitor.name, visitor.id, visitor.age, visit.visitor_id;
"
museum_visit,"What are the id, name and membership level of guests who have spent the largest amount of money in total in all museum tickets?","SELECT t2.visitor_id ,  t1.name ,  t1.level_of_membership FROM visitor as t1 JOIN visit as t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY SUM(t2.total_spent) DESC LIMIT 1","CREATE TABLE `museum` (
  Museum_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Staff INT,
  Open_Year TEXT
);

CREATE TABLE `visitor` (
  ID INT PRIMARY KEY,
  Name TEXT,
  Level_of_membership INT,
  Age INT
);

CREATE TABLE `visit` (
  Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID),
  visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID),
  Num_of_Ticket INT,
  Total_spent REAL
);

","###Tables: visit, visitor;
###Columns: visit.total_spent, visit.visitor_id, visitor.name, visitor.level_of_membership, visitor.id;
"
museum_visit,What are the id and name of the museum visited most times?,"SELECT t2.museum_id ,  t1.name FROM museum as t1 JOIN visit as t2 ON t1.museum_id  =  t2.museum_id GROUP BY t2.museum_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `museum` (
  Museum_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Staff INT,
  Open_Year TEXT
);

CREATE TABLE `visitor` (
  ID INT PRIMARY KEY,
  Name TEXT,
  Level_of_membership INT,
  Age INT
);

CREATE TABLE `visit` (
  Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID),
  visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID),
  Num_of_Ticket INT,
  Total_spent REAL
);

","###Tables: visit, museum;
###Columns: visit.museum_id, museum.name, museum.museum_id;
"
museum_visit,What is the name of the museum that had no tourist yet?,SELECT name FROM museum WHERE museum_id NOT IN (SELECT museum_id FROM visit),"CREATE TABLE `museum` (
  Museum_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Staff INT,
  Open_Year TEXT
);

CREATE TABLE `visitor` (
  ID INT PRIMARY KEY,
  Name TEXT,
  Level_of_membership INT,
  Age INT
);

CREATE TABLE `visit` (
  Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID),
  visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID),
  Num_of_Ticket INT,
  Total_spent REAL
);

","###Tables: museum, visit;
###Columns: museum.name, museum.museum_id, visit.museum_id;
"
museum_visit,Find the name and age of the tourist who bought the most tickets at once.,"SELECT t1.name ,  t1.age FROM visitor as t1 JOIN visit as t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1","CREATE TABLE `museum` (
  Museum_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Staff INT,
  Open_Year TEXT
);

CREATE TABLE `visitor` (
  ID INT PRIMARY KEY,
  Name TEXT,
  Level_of_membership INT,
  Age INT
);

CREATE TABLE `visit` (
  Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID),
  visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID),
  Num_of_Ticket INT,
  Total_spent REAL
);

","###Tables: visitor, visit;
###Columns: visitor.name, visitor.id, visitor.age, visit.num_of_ticket, visit.visitor_id;
"
museum_visit,What are the average and maximum number of tickets bought in all guests?,"SELECT AVG(num_of_ticket) ,  MAX(num_of_ticket) FROM visit","CREATE TABLE `museum` (
  Museum_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Staff INT,
  Open_Year TEXT
);

CREATE TABLE `visitor` (
  ID INT PRIMARY KEY,
  Name TEXT,
  Level_of_membership INT,
  Age INT
);

CREATE TABLE `visit` (
  Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID),
  visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID),
  Num_of_Ticket INT,
  Total_spent REAL
);

","###Tables: visit;
###Columns: visit.num_of_ticket;
"
museum_visit,What is the total ticket expense of the guests whose membership level is 1?,SELECT SUM(t2.total_spent) FROM visitor as t1 JOIN visit as t2 ON t1.id  =  t2.visitor_id WHERE t1.level_of_membership  =  1,"CREATE TABLE `museum` (
  Museum_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Staff INT,
  Open_Year TEXT
);

CREATE TABLE `visitor` (
  ID INT PRIMARY KEY,
  Name TEXT,
  Level_of_membership INT,
  Age INT
);

CREATE TABLE `visit` (
  Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID),
  visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID),
  Num_of_Ticket INT,
  Total_spent REAL
);

","###Tables: visit, visitor;
###Columns: visit.total_spent, visit.visitor_id, visitor.level_of_membership, visitor.id;
"
museum_visit,What is the name of the tourist who visited both a museum opened before 2009 and a museum opened after 2011?,SELECT t1.name FROM visitor as t1 JOIN visit as t2 ON t1.id  =  t2.visitor_id JOIN museum as t3 ON t3.museum_id  =  t2.museum_id WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor as t1 JOIN visit as t2 ON t1.id  =  t2.visitor_id JOIN museum as t3 ON t3.museum_id  =  t2.museum_id WHERE t3.open_year  >  2011,"CREATE TABLE `museum` (
  Museum_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Staff INT,
  Open_Year TEXT
);

CREATE TABLE `visitor` (
  ID INT PRIMARY KEY,
  Name TEXT,
  Level_of_membership INT,
  Age INT
);

CREATE TABLE `visit` (
  Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID),
  visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID),
  Num_of_Ticket INT,
  Total_spent REAL
);

","###Tables: visitor, visit, museum;
###Columns: visitor.name, visitor.id, visit.museum_id, visit.visitor_id, museum.open_year, museum.museum_id;
"
museum_visit,Find the number of guests who did not visit any museum opened after 2010.,SELECT COUNT(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum as t1 JOIN visit as t2 ON t1.museum_id  =  t2.museum_id WHERE t1.open_year  >  2010),"CREATE TABLE `museum` (
  Museum_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Staff INT,
  Open_Year TEXT
);

CREATE TABLE `visitor` (
  ID INT PRIMARY KEY,
  Name TEXT,
  Level_of_membership INT,
  Age INT
);

CREATE TABLE `visit` (
  Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID),
  visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID),
  Num_of_Ticket INT,
  Total_spent REAL
);

","###Tables: visit, museum;
###Columns: visit.museum_id, visit.visitor_id, museum.open_year, museum.museum_id;
"
museum_visit,How many museums were opened after 2013 or before 2008?,SELECT COUNT(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008,"CREATE TABLE `museum` (
  Museum_ID INT PRIMARY KEY,
  Name TEXT,
  Num_of_Staff INT,
  Open_Year TEXT
);

CREATE TABLE `visitor` (
  ID INT PRIMARY KEY,
  Name TEXT,
  Level_of_membership INT,
  Age INT
);

CREATE TABLE `visit` (
  Museum_ID INT PRIMARY KEY REFERENCES museum(Museum_ID),
  visitor_ID TEXT PRIMARY KEY REFERENCES visitor(ID),
  Num_of_Ticket INT,
  Total_spent REAL
);

","###Tables: museum;
###Columns: museum.open_year;
"
wta_1,Find the total number of participants.,SELECT COUNT(*) FROM players,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players;
###Columns: players.birth_date, players.country_code, players.last_name, players.first_name, players.hand, players.player_id;
"
wta_1,How many participants are there?,SELECT COUNT(*) FROM players,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players;
###Columns: players.birth_date, players.country_code, players.last_name, players.first_name, players.hand, players.player_id;
"
wta_1,Find the total number of competitions.,SELECT COUNT(*) FROM matches,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_rank, matches.winner_name, matches.minutes, matches.loser_age, matches.score, matches.winner_entry, matches.winner_ioc, matches.winner_hand, matches.loser_rank, matches.year, matches.winner_id, matches.match_num, matches.best_of, matches.loser_ht, matches.winner_ht, matches.winner_seed, matches.tourney_date, matches.loser_hand, matches.loser_name, matches.surface, matches.tourney_name, matches.loser_ioc, matches.tourney_level, matches.loser_id, matches.winner_rank_points, matches.loser_rank_points, matches.round, matches.draw_size, matches.tourney_id, matches.winner_age, matches.loser_seed, matches.loser_entry;
"
wta_1,Count the number of competitions.,SELECT COUNT(*) FROM matches,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_rank, matches.winner_name, matches.minutes, matches.loser_age, matches.score, matches.winner_entry, matches.winner_ioc, matches.winner_hand, matches.loser_rank, matches.year, matches.winner_id, matches.match_num, matches.best_of, matches.loser_ht, matches.winner_ht, matches.winner_seed, matches.tourney_date, matches.loser_hand, matches.loser_name, matches.surface, matches.tourney_name, matches.loser_ioc, matches.tourney_level, matches.loser_id, matches.winner_rank_points, matches.loser_rank_points, matches.round, matches.draw_size, matches.tourney_id, matches.winner_age, matches.loser_seed, matches.loser_entry;
"
wta_1,List the given name and birth date of all participants from the country with code USA.,"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players;
###Columns: players.country_code, players.first_name, players.birth_date;
"
wta_1,What are the given names and birth dates of participants from the USA?,"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players;
###Columns: players.country_code, players.first_name, players.birth_date;
"
wta_1,Find the average age of losers and winners of all games.,"SELECT AVG(loser_age) ,  AVG(winner_age) FROM matches","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_age, matches.loser_age;
"
wta_1,What are the average ages of losers and winners across games?,"SELECT AVG(loser_age) ,  AVG(winner_age) FROM matches","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_age, matches.loser_age;
"
wta_1,Find the average rank of winners in all games.,SELECT AVG(winner_rank) FROM matches,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_rank;
"
wta_1,What is the average rank for winners in all competitions?,SELECT AVG(winner_rank) FROM matches,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_rank;
"
wta_1,Find the highest rank of losers in all competitions.,SELECT MIN(loser_rank) FROM matches,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.loser_rank;
"
wta_1,What is the best rank of losers across all contest?,SELECT MIN(loser_rank) FROM matches,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.loser_rank;
"
wta_1,find the number of distinct State codes of all participants.,SELECT COUNT(DISTINCT country_code) FROM players,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players;
###Columns: players.country_code;
"
wta_1,How many distinct States do participants come from?,SELECT COUNT(DISTINCT country_code) FROM players,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players;
###Columns: players.country_code;
"
wta_1,Find the number of distinct name of losers.,SELECT COUNT(DISTINCT loser_name) FROM matches,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.loser_name;
"
wta_1,How many different loser names are there?,SELECT COUNT(DISTINCT loser_name) FROM matches,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.loser_name;
"
wta_1,Find the names of tourney that has more than 10 competitions.,SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*)  >  10,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.tourney_name;
"
wta_1,What are the names of tournaments that have more than 10 competitions?,SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*)  >  10,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.tourney_name;
"
wta_1,List the names of all winners who played in both 2013 and 2016.,SELECT winner_name FROM matches WHERE year  =  2013 INTERSECT SELECT winner_name FROM matches WHERE year  =  2016,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_name;
"
wta_1,What are the names of participants who won in both 2013 and 2016?,SELECT winner_name FROM matches WHERE year  =  2013 INTERSECT SELECT winner_name FROM matches WHERE year  =  2016,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_name;
"
wta_1,List the number of all competitions who played in years of 2013 or 2016.,SELECT COUNT(*) FROM matches WHERE year  =  2013 OR year  =  2016,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_rank, matches.winner_name, matches.minutes, matches.loser_age, matches.score, matches.winner_entry, matches.winner_ioc, matches.winner_hand, matches.loser_rank, matches.year, matches.winner_id, matches.match_num, matches.best_of, matches.loser_ht, matches.winner_ht, matches.winner_seed, matches.tourney_date, matches.loser_hand, matches.loser_name, matches.surface, matches.tourney_name, matches.loser_ioc, matches.tourney_level, matches.loser_id, matches.winner_rank_points, matches.loser_rank_points, matches.round, matches.draw_size, matches.tourney_id, matches.winner_age, matches.loser_seed, matches.loser_entry;
"
wta_1,How many competitions were played in 2013 or 2016?,SELECT COUNT(*) FROM matches WHERE year  =  2013 OR year  =  2016,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_rank, matches.winner_name, matches.minutes, matches.loser_age, matches.score, matches.winner_entry, matches.winner_ioc, matches.winner_hand, matches.loser_rank, matches.year, matches.winner_id, matches.match_num, matches.best_of, matches.loser_ht, matches.winner_ht, matches.winner_seed, matches.tourney_date, matches.loser_hand, matches.loser_name, matches.surface, matches.tourney_name, matches.loser_ioc, matches.tourney_level, matches.loser_id, matches.winner_rank_points, matches.loser_rank_points, matches.round, matches.draw_size, matches.tourney_id, matches.winner_age, matches.loser_seed, matches.loser_entry;
"
wta_1,What are the nation code and given name of the participants who won in both tourney WTA Championships and Australian Open?,"SELECT t1.country_code ,  t1.first_name FROM players as t1 JOIN matches as t2 ON t1.player_id  =  t2.winner_id WHERE t2.tourney_name  =  'WTA Championships' INTERSECT SELECT t1.country_code ,  t1.first_name FROM players as t1 JOIN matches as t2 ON t1.player_id  =  t2.winner_id WHERE t2.tourney_name  =  'Australian Open'","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players, matches;
###Columns: players.country_code, players.first_name, players.player_id, matches.winner_id, matches.tourney_name;
"
wta_1,What are the given names and State codes for participants who won both the WTA Championships and the Australian Open?,"SELECT t1.country_code ,  t1.first_name FROM players as t1 JOIN matches as t2 ON t1.player_id  =  t2.winner_id WHERE t2.tourney_name  =  'WTA Championships' INTERSECT SELECT t1.country_code ,  t1.first_name FROM players as t1 JOIN matches as t2 ON t1.player_id  =  t2.winner_id WHERE t2.tourney_name  =  'Australian Open'","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players, matches;
###Columns: players.country_code, players.first_name, players.player_id, matches.winner_id, matches.tourney_name;
"
wta_1,Find the given name and State abbreviation of the oldest participant.,"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players;
###Columns: players.country_code, players.first_name, players.birth_date;
"
wta_1,What is the given name and nation abbreviation of the oldest participant?,"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players;
###Columns: players.country_code, players.first_name, players.birth_date;
"
wta_1,List the given and family name of all participants in the order of birth date.,"SELECT first_name ,  last_name FROM players ORDER BY birth_date","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players;
###Columns: players.last_name, players.first_name, players.birth_date;
"
wta_1,"What are the full names of all participants, sorted by birth date?","SELECT first_name ,  last_name FROM players ORDER BY birth_date","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players;
###Columns: players.last_name, players.first_name, players.birth_date;
"
wta_1,List the given and family name of all participants who are left / L hand in the order of birth date.,"SElECT first_name ,  last_name FROM players WHERE hand  =  'l' ORDER BY birth_date","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players;
###Columns: players.hand, players.last_name, players.first_name, players.birth_date;
"
wta_1,"What are the full names of all left handed participants, in order of birth date?","SElECT first_name ,  last_name FROM players WHERE hand  =  'l' ORDER BY birth_date","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players;
###Columns: players.hand, players.last_name, players.first_name, players.birth_date;
"
wta_1,Find the given name and nation abbreviation of the participant who did the most number of tours.,"SELECT t1.country_code ,  t1.first_name FROM players as t1 JOIN rankings as t2 ON t1.player_id  =  t2.player_id ORDER BY t2.tours DESC LIMIT 1","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players, rankings;
###Columns: players.country_code, players.first_name, players.player_id, rankings.tours, rankings.player_id;
"
wta_1,What is the given name and State code of the participant with the most tours?,"SELECT t1.country_code ,  t1.first_name FROM players as t1 JOIN rankings as t2 ON t1.player_id  =  t2.player_id ORDER BY t2.tours DESC LIMIT 1","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players, rankings;
###Columns: players.country_code, players.first_name, players.player_id, rankings.tours, rankings.player_id;
"
wta_1,Find the year that has the most number of competitions.,SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_rank, matches.winner_name, matches.minutes, matches.loser_age, matches.score, matches.winner_entry, matches.winner_ioc, matches.winner_hand, matches.loser_rank, matches.year, matches.winner_id, matches.match_num, matches.best_of, matches.loser_ht, matches.winner_ht, matches.winner_seed, matches.tourney_date, matches.loser_hand, matches.loser_name, matches.surface, matches.tourney_name, matches.loser_ioc, matches.tourney_level, matches.loser_id, matches.winner_rank_points, matches.loser_rank_points, matches.round, matches.draw_size, matches.tourney_id, matches.winner_age, matches.loser_seed, matches.loser_entry;
"
wta_1,Which year had the most competitions?,SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_rank, matches.winner_name, matches.minutes, matches.loser_age, matches.score, matches.winner_entry, matches.winner_ioc, matches.winner_hand, matches.loser_rank, matches.year, matches.winner_id, matches.match_num, matches.best_of, matches.loser_ht, matches.winner_ht, matches.winner_seed, matches.tourney_date, matches.loser_hand, matches.loser_name, matches.surface, matches.tourney_name, matches.loser_ioc, matches.tourney_level, matches.loser_id, matches.winner_rank_points, matches.loser_rank_points, matches.round, matches.draw_size, matches.tourney_id, matches.winner_age, matches.loser_seed, matches.loser_entry;
"
wta_1,Find the name and rank points of the winner who won the most times.,"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_name, matches.winner_rank_points;
"
wta_1,"What is the name of the winner who has won the most matches, and how many rank points does this player have?","SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_name, matches.winner_rank_points;
"
wta_1,Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.,SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_name, matches.winner_rank_points, matches.tourney_name;
"
wta_1,What is the name of the winner with the most rank points who participated in the Australian Open tournament?,SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_name, matches.winner_rank_points, matches.tourney_name;
"
wta_1,find the names of loser and winner who played in the competition with greatest number of minutes.,"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_name, matches.minutes, matches.loser_name;
"
wta_1,What are the names of the winner and loser who played in the longest competition?,"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_name, matches.minutes, matches.loser_name;
"
wta_1,Find the average ranking for each participant and their given name.,"SELECT AVG(ranking) ,  t1.first_name FROM players as t1 JOIN rankings as t2 ON t1.player_id  =  t2.player_id GROUP BY t1.first_name","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players, rankings;
###Columns: players.first_name, players.player_id, rankings.player_id;
"
wta_1,"What are the given names of all participants, and their average rankings?","SELECT AVG(ranking) ,  t1.first_name FROM players as t1 JOIN rankings as t2 ON t1.player_id  =  t2.player_id GROUP BY t1.first_name","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players, rankings;
###Columns: players.first_name, players.player_id, rankings.player_id;
"
wta_1,Find the total ranking points for each participant and their given name.,"SELECT SUM(ranking_points) ,  t1.first_name FROM players as t1 JOIN rankings as t2 ON t1.player_id  =  t2.player_id GROUP BY t1.first_name","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players, rankings;
###Columns: players.first_name, players.player_id, rankings.player_id;
"
wta_1,"What are the given names of all participants, and their total ranking points?","SELECT SUM(ranking_points) ,  t1.first_name FROM players as t1 JOIN rankings as t2 ON t1.player_id  =  t2.player_id GROUP BY t1.first_name","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players, rankings;
###Columns: players.first_name, players.player_id, rankings.player_id;
"
wta_1,find the number of participants for each State.,"SELECT COUNT(*) ,  country_code FROM players GROUP BY country_code","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players;
###Columns: players.country_code;
"
wta_1,How many participants are from each State?,"SELECT COUNT(*) ,  country_code FROM players GROUP BY country_code","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players;
###Columns: players.country_code;
"
wta_1,find the abbreviation of the State where has the greatest number of participants.,SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players;
###Columns: players.country_code;
"
wta_1,What is the abbreviation of the nation with the most participants?,SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players;
###Columns: players.country_code;
"
wta_1,Find the abbreviations of nations that have more than 50 participants.,SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*)  >  50,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players;
###Columns: players.country_code;
"
wta_1,What are the abbreviations of nations with more than 50 participants?,SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*)  >  50,"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players;
###Columns: players.country_code;
"
wta_1,Find the total number of trips for each ranking time.,"SELECT SUM(tours) ,  ranking_date FROM rankings GROUP BY ranking_date","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: rankings;
###Columns: rankings.ranking_date, rankings.tours;
"
wta_1,How many total travels were there for each ranking time?,"SELECT SUM(tours) ,  ranking_date FROM rankings GROUP BY ranking_date","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: rankings;
###Columns: rankings.ranking_date, rankings.tours;
"
wta_1,Find the number of games happened in each year.,"SELECT COUNT(*) ,  year FROM matches GROUP BY year","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_rank, matches.winner_name, matches.minutes, matches.loser_age, matches.score, matches.winner_entry, matches.winner_ioc, matches.winner_hand, matches.loser_rank, matches.year, matches.winner_id, matches.match_num, matches.best_of, matches.loser_ht, matches.winner_ht, matches.winner_seed, matches.tourney_date, matches.loser_hand, matches.loser_name, matches.surface, matches.tourney_name, matches.loser_ioc, matches.tourney_level, matches.loser_id, matches.winner_rank_points, matches.loser_rank_points, matches.round, matches.draw_size, matches.tourney_id, matches.winner_age, matches.loser_seed, matches.loser_entry;
"
wta_1,How many games were played in each year?,"SELECT COUNT(*) ,  year FROM matches GROUP BY year","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_rank, matches.winner_name, matches.minutes, matches.loser_age, matches.score, matches.winner_entry, matches.winner_ioc, matches.winner_hand, matches.loser_rank, matches.year, matches.winner_id, matches.match_num, matches.best_of, matches.loser_ht, matches.winner_ht, matches.winner_seed, matches.tourney_date, matches.loser_hand, matches.loser_name, matches.surface, matches.tourney_name, matches.loser_ioc, matches.tourney_level, matches.loser_id, matches.winner_rank_points, matches.loser_rank_points, matches.round, matches.draw_size, matches.tourney_id, matches.winner_age, matches.loser_seed, matches.loser_entry;
"
wta_1,Find the name and rank of the 3 youngest winners across all competitions.,"SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_name, matches.winner_age, matches.winner_rank;
"
wta_1,What are the names and ranks of the three youngest winners across all games?,"SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_name, matches.winner_age, matches.winner_rank;
"
wta_1,How many different winners both participated in the WTA Championships and were left handed?,SElECT COUNT(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'l',"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_name, matches.winner_hand, matches.tourney_name;
"
wta_1,Find the number of left handed winners who participated in the WTA Championships.,SElECT COUNT(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'l',"CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: matches;
###Columns: matches.winner_name, matches.winner_hand, matches.tourney_name;
"
wta_1,"Find the given name, nation abbreviation and birth date of the winner who has the highest rank points in all games.","SELECT t1.first_name ,  t1.country_code ,  t1.birth_date FROM players as t1 JOIN matches as t2 ON t1.player_id  =  t2.winner_id ORDER BY t2.winner_rank_points DESC LIMIT 1","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players, matches;
###Columns: players.country_code, players.first_name, players.birth_date, players.player_id, matches.winner_id, matches.winner_rank_points;
"
wta_1,"What is the given name, nation abbreviation, and birth date of the participant with the most winner rank points across all competitions?","SELECT t1.first_name ,  t1.country_code ,  t1.birth_date FROM players as t1 JOIN matches as t2 ON t1.player_id  =  t2.winner_id ORDER BY t2.winner_rank_points DESC LIMIT 1","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players, matches;
###Columns: players.country_code, players.first_name, players.birth_date, players.player_id, matches.winner_id, matches.winner_rank_points;
"
wta_1,Find the number of participants for each hand type.,"SELECT COUNT(*) ,  hand FROM players GROUP BY hand","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players;
###Columns: players.hand;
"
wta_1,How many participants are there for each hand type?,"SELECT COUNT(*) ,  hand FROM players GROUP BY hand","CREATE TABLE `players` (
  player_id INT PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATE,
  country_code TEXT
);

CREATE TABLE `matches` (
  best_of INT,
  draw_size INT,
  loser_age FLOAT,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht INT,
  loser_id INT REFERENCES players(player_id),
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank INT,
  loser_rank_points INT,
  loser_seed INT,
  match_num INT,
  minutes INT,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATE,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age FLOAT,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht INT,
  winner_id INT REFERENCES players(player_id),
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank INT,
  winner_rank_points INT,
  winner_seed INT,
  year INT
);

CREATE TABLE `rankings` (
  ranking_date DATE,
  ranking INT,
  player_id INT REFERENCES players(player_id),
  ranking_points INT,
  tours INT
);

","###Tables: players;
###Columns: players.hand;
"
battle_death,How many vessels ended up being 'Captured'?,SELECT COUNT(*) FROM ship WHERE disposition_of_ship  =  'Captured',"CREATE TABLE `battle` (
  id INT PRIMARY KEY,
  name TEXT,
  date TEXT,
  bulgarian_commander TEXT,
  latin_commander TEXT,
  result TEXT
);

CREATE TABLE `ship` (
  lost_in_battle INT REFERENCES battle(id),
  id INT PRIMARY KEY,
  name TEXT,
  tonnage TEXT,
  ship_type TEXT,
  location TEXT,
  disposition_of_ship TEXT
);

CREATE TABLE `death` (
  caused_by_ship_id INT REFERENCES ship(id),
  id INT PRIMARY KEY,
  note TEXT,
  killed INT,
  injured INT
);

","###Tables: ship;
###Columns: ship.disposition_of_ship;
"
battle_death,List the name and tonnage ordered by in descending alphaetical order for the names.,"SELECT name ,  tonnage FROM ship ORDER BY name DESC","CREATE TABLE `battle` (
  id INT PRIMARY KEY,
  name TEXT,
  date TEXT,
  bulgarian_commander TEXT,
  latin_commander TEXT,
  result TEXT
);

CREATE TABLE `ship` (
  lost_in_battle INT REFERENCES battle(id),
  id INT PRIMARY KEY,
  name TEXT,
  tonnage TEXT,
  ship_type TEXT,
  location TEXT,
  disposition_of_ship TEXT
);

CREATE TABLE `death` (
  caused_by_ship_id INT REFERENCES ship(id),
  id INT PRIMARY KEY,
  note TEXT,
  killed INT,
  injured INT
);

","###Tables: ship;
###Columns: ship.name, ship.tonnage;
"
battle_death,"List the name, date and result of each battle.","SELECT name ,  date FROM battle","CREATE TABLE `battle` (
  id INT PRIMARY KEY,
  name TEXT,
  date TEXT,
  bulgarian_commander TEXT,
  latin_commander TEXT,
  result TEXT
);

CREATE TABLE `ship` (
  lost_in_battle INT REFERENCES battle(id),
  id INT PRIMARY KEY,
  name TEXT,
  tonnage TEXT,
  ship_type TEXT,
  location TEXT,
  disposition_of_ship TEXT
);

CREATE TABLE `death` (
  caused_by_ship_id INT REFERENCES ship(id),
  id INT PRIMARY KEY,
  note TEXT,
  killed INT,
  injured INT
);

","###Tables: battle;
###Columns: battle.name;
"
battle_death,What is maximum and minimum death toll caused each time?,"SELECT MAX(killed) ,  MIN(killed) FROM death","CREATE TABLE `battle` (
  id INT PRIMARY KEY,
  name TEXT,
  date TEXT,
  bulgarian_commander TEXT,
  latin_commander TEXT,
  result TEXT
);

CREATE TABLE `ship` (
  lost_in_battle INT REFERENCES battle(id),
  id INT PRIMARY KEY,
  name TEXT,
  tonnage TEXT,
  ship_type TEXT,
  location TEXT,
  disposition_of_ship TEXT
);

CREATE TABLE `death` (
  caused_by_ship_id INT REFERENCES ship(id),
  id INT PRIMARY KEY,
  note TEXT,
  killed INT,
  injured INT
);

","###Tables: death;
###Columns: death.killed;
"
battle_death,What is the average number of injuries caused each time?,SELECT AVG(injured) FROM death,"CREATE TABLE `battle` (
  id INT PRIMARY KEY,
  name TEXT,
  date TEXT,
  bulgarian_commander TEXT,
  latin_commander TEXT,
  result TEXT
);

CREATE TABLE `ship` (
  lost_in_battle INT REFERENCES battle(id),
  id INT PRIMARY KEY,
  name TEXT,
  tonnage TEXT,
  ship_type TEXT,
  location TEXT,
  disposition_of_ship TEXT
);

CREATE TABLE `death` (
  caused_by_ship_id INT REFERENCES ship(id),
  id INT PRIMARY KEY,
  note TEXT,
  killed INT,
  injured INT
);

","###Tables: death;
###Columns: death.injured;
"
battle_death,What are the death and hurt situations caused by the vessel with tonnage 't'?,"SELECT t1.killed ,  t1.injured FROM death as t1 JOIN ship as t2 ON t1.caused_by_ship_id  =  t2.id WHERE t2.tonnage  =  't'","CREATE TABLE `battle` (
  id INT PRIMARY KEY,
  name TEXT,
  date TEXT,
  bulgarian_commander TEXT,
  latin_commander TEXT,
  result TEXT
);

CREATE TABLE `ship` (
  lost_in_battle INT REFERENCES battle(id),
  id INT PRIMARY KEY,
  name TEXT,
  tonnage TEXT,
  ship_type TEXT,
  location TEXT,
  disposition_of_ship TEXT
);

CREATE TABLE `death` (
  caused_by_ship_id INT REFERENCES ship(id),
  id INT PRIMARY KEY,
  note TEXT,
  killed INT,
  injured INT
);

","###Tables: death, ship;
###Columns: death.injured, death.caused_by_ship_id, death.killed, ship.tonnage, ship.id;
"
battle_death,What are the name and results of the battles when the bulgarian commander is not 'Boril',"SELECT name ,  result FROM battle WHERE bulgarian_commander != 'Boril'","CREATE TABLE `battle` (
  id INT PRIMARY KEY,
  name TEXT,
  date TEXT,
  bulgarian_commander TEXT,
  latin_commander TEXT,
  result TEXT
);

CREATE TABLE `ship` (
  lost_in_battle INT REFERENCES battle(id),
  id INT PRIMARY KEY,
  name TEXT,
  tonnage TEXT,
  ship_type TEXT,
  location TEXT,
  disposition_of_ship TEXT
);

CREATE TABLE `death` (
  caused_by_ship_id INT REFERENCES ship(id),
  id INT PRIMARY KEY,
  note TEXT,
  killed INT,
  injured INT
);

","###Tables: battle;
###Columns: battle.name, battle.bulgarian_commander;
"
battle_death,What are the different ids and names of the combat that lost any 'Brig' type vessels?,"SELECT DISTINCT t1.id ,  t1.name FROM battle as t1 JOIN ship as t2 ON t1.id  =  t2.lost_in_battle WHERE t2.ship_type  =  'Brig'","CREATE TABLE `battle` (
  id INT PRIMARY KEY,
  name TEXT,
  date TEXT,
  bulgarian_commander TEXT,
  latin_commander TEXT,
  result TEXT
);

CREATE TABLE `ship` (
  lost_in_battle INT REFERENCES battle(id),
  id INT PRIMARY KEY,
  name TEXT,
  tonnage TEXT,
  ship_type TEXT,
  location TEXT,
  disposition_of_ship TEXT
);

CREATE TABLE `death` (
  caused_by_ship_id INT REFERENCES ship(id),
  id INT PRIMARY KEY,
  note TEXT,
  killed INT,
  injured INT
);

","###Tables: battle, ship;
###Columns: battle.name, battle.id, ship.lost_in_battle, ship.ship_type;
"
battle_death,What are the ids and names of the combat that led to more than 10 people dead in total.,"SELECT t1.id ,  t1.name FROM battle as t1 JOIN ship as t2 ON t1.id  =  t2.lost_in_battle JOIN death as t3 ON t2.id  =  t3.caused_by_ship_id GROUP BY t1.id HAVING SUM(t3.killed)  >  10","CREATE TABLE `battle` (
  id INT PRIMARY KEY,
  name TEXT,
  date TEXT,
  bulgarian_commander TEXT,
  latin_commander TEXT,
  result TEXT
);

CREATE TABLE `ship` (
  lost_in_battle INT REFERENCES battle(id),
  id INT PRIMARY KEY,
  name TEXT,
  tonnage TEXT,
  ship_type TEXT,
  location TEXT,
  disposition_of_ship TEXT
);

CREATE TABLE `death` (
  caused_by_ship_id INT REFERENCES ship(id),
  id INT PRIMARY KEY,
  note TEXT,
  killed INT,
  injured INT
);

","###Tables: battle, ship, death;
###Columns: battle.name, battle.id, ship.lost_in_battle, ship.id, death.caused_by_ship_id, death.killed;
"
battle_death,What is the vessel id and name that caused most total injuries?,"SELECT t2.id ,  t2.name FROM death as t1 JOIN ship as t2 ON t1.caused_by_ship_id  =  t2.id GROUP BY t2.id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `battle` (
  id INT PRIMARY KEY,
  name TEXT,
  date TEXT,
  bulgarian_commander TEXT,
  latin_commander TEXT,
  result TEXT
);

CREATE TABLE `ship` (
  lost_in_battle INT REFERENCES battle(id),
  id INT PRIMARY KEY,
  name TEXT,
  tonnage TEXT,
  ship_type TEXT,
  location TEXT,
  disposition_of_ship TEXT
);

CREATE TABLE `death` (
  caused_by_ship_id INT REFERENCES ship(id),
  id INT PRIMARY KEY,
  note TEXT,
  killed INT,
  injured INT
);

","###Tables: ship, death;
###Columns: ship.name, ship.id, death.caused_by_ship_id;
"
battle_death,What are the distinct combat names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?,SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I',"CREATE TABLE `battle` (
  id INT PRIMARY KEY,
  name TEXT,
  date TEXT,
  bulgarian_commander TEXT,
  latin_commander TEXT,
  result TEXT
);

CREATE TABLE `ship` (
  lost_in_battle INT REFERENCES battle(id),
  id INT PRIMARY KEY,
  name TEXT,
  tonnage TEXT,
  ship_type TEXT,
  location TEXT,
  disposition_of_ship TEXT
);

CREATE TABLE `death` (
  caused_by_ship_id INT REFERENCES ship(id),
  id INT PRIMARY KEY,
  note TEXT,
  killed INT,
  injured INT
);

","###Tables: battle;
###Columns: battle.latin_commander, battle.name, battle.bulgarian_commander;
"
battle_death,How many different results are there for the combats?,SELECT COUNT(DISTINCT result) FROM battle,"CREATE TABLE `battle` (
  id INT PRIMARY KEY,
  name TEXT,
  date TEXT,
  bulgarian_commander TEXT,
  latin_commander TEXT,
  result TEXT
);

CREATE TABLE `ship` (
  lost_in_battle INT REFERENCES battle(id),
  id INT PRIMARY KEY,
  name TEXT,
  tonnage TEXT,
  ship_type TEXT,
  location TEXT,
  disposition_of_ship TEXT
);

CREATE TABLE `death` (
  caused_by_ship_id INT REFERENCES ship(id),
  id INT PRIMARY KEY,
  note TEXT,
  killed INT,
  injured INT
);

","###Tables: battle;
###Columns: battle.result, battle.latin_commander, battle.name, battle.id, battle.bulgarian_commander, battle.date;
"
battle_death,How many combats did not lose any vessel with tonnage '225'?,SELECT COUNT(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );,"CREATE TABLE `battle` (
  id INT PRIMARY KEY,
  name TEXT,
  date TEXT,
  bulgarian_commander TEXT,
  latin_commander TEXT,
  result TEXT
);

CREATE TABLE `ship` (
  lost_in_battle INT REFERENCES battle(id),
  id INT PRIMARY KEY,
  name TEXT,
  tonnage TEXT,
  ship_type TEXT,
  location TEXT,
  disposition_of_ship TEXT
);

CREATE TABLE `death` (
  caused_by_ship_id INT REFERENCES ship(id),
  id INT PRIMARY KEY,
  note TEXT,
  killed INT,
  injured INT
);

","###Tables: battle, ship;
###Columns: battle.id, ship.lost_in_battle, ship.tonnage, ship.id;
"
battle_death,List the name and date the combat that has lost the vessel named 'Lettice' and the vessel named 'HMS Atalanta',"SELECT t1.name ,  t1.date FROM battle as t1 JOIN ship as t2 ON t1.id  =  t2.lost_in_battle WHERE t2.name  =  'Lettice' INTERSECT SELECT t1.name ,  t1.date FROM battle as t1 JOIN ship as t2 ON t1.id  =  t2.lost_in_battle WHERE t2.name  =  'HMS Atalanta'","CREATE TABLE `battle` (
  id INT PRIMARY KEY,
  name TEXT,
  date TEXT,
  bulgarian_commander TEXT,
  latin_commander TEXT,
  result TEXT
);

CREATE TABLE `ship` (
  lost_in_battle INT REFERENCES battle(id),
  id INT PRIMARY KEY,
  name TEXT,
  tonnage TEXT,
  ship_type TEXT,
  location TEXT,
  disposition_of_ship TEXT
);

CREATE TABLE `death` (
  caused_by_ship_id INT REFERENCES ship(id),
  id INT PRIMARY KEY,
  note TEXT,
  killed INT,
  injured INT
);

","###Tables: battle, ship;
###Columns: battle.name, battle.id, battle.date, ship.lost_in_battle, ship.name;
"
battle_death,"Show names, results and bulgarian commanders of the combats with no vessels lost in the 'English Channel'.","SELECT name ,  result ,  bulgarian_commander FROM battle EXCEPT SELECT t1.name ,  t1.result ,  t1.bulgarian_commander FROM battle as t1 JOIN ship as t2 ON t1.id  =  t2.lost_in_battle WHERE t2.location  =  'English Channel'","CREATE TABLE `battle` (
  id INT PRIMARY KEY,
  name TEXT,
  date TEXT,
  bulgarian_commander TEXT,
  latin_commander TEXT,
  result TEXT
);

CREATE TABLE `ship` (
  lost_in_battle INT REFERENCES battle(id),
  id INT PRIMARY KEY,
  name TEXT,
  tonnage TEXT,
  ship_type TEXT,
  location TEXT,
  disposition_of_ship TEXT
);

CREATE TABLE `death` (
  caused_by_ship_id INT REFERENCES ship(id),
  id INT PRIMARY KEY,
  note TEXT,
  killed INT,
  injured INT
);

","###Tables: battle, ship;
###Columns: battle.id, battle.name, battle.result, battle.bulgarian_commander, ship.lost_in_battle, ship.location;
"
battle_death,What are the remark of the death events which has substring 'East'?,SELECT note FROM death WHERE note LIKE '%East%',"CREATE TABLE `battle` (
  id INT PRIMARY KEY,
  name TEXT,
  date TEXT,
  bulgarian_commander TEXT,
  latin_commander TEXT,
  result TEXT
);

CREATE TABLE `ship` (
  lost_in_battle INT REFERENCES battle(id),
  id INT PRIMARY KEY,
  name TEXT,
  tonnage TEXT,
  ship_type TEXT,
  location TEXT,
  disposition_of_ship TEXT
);

CREATE TABLE `death` (
  caused_by_ship_id INT REFERENCES ship(id),
  id INT PRIMARY KEY,
  note TEXT,
  killed INT,
  injured INT
);

","###Tables: death;
###Columns: death.note;
"
student_transcripts_tracking,what are all the addresses including line 1 and line 2?,"SELECT line_1 ,  line_2 FROM addresses","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: addresses;
###Columns: addresses.line_2, addresses.line_1;
"
student_transcripts_tracking,What is the first and second line for all addresses?,"SELECT line_1 ,  line_2 FROM addresses","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: addresses;
###Columns: addresses.line_2, addresses.line_1;
"
student_transcripts_tracking,How many curriculums in total are listed?,SELECT COUNT(*) FROM courses,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: courses;
###Columns: courses.course_id, courses.other_details, courses.course_description, courses.course_name;
"
student_transcripts_tracking,How many curriculums are there?,SELECT COUNT(*) FROM courses,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: courses;
###Columns: courses.course_id, courses.other_details, courses.course_description, courses.course_name;
"
student_transcripts_tracking,How is the math curriculum described?,SELECT course_description FROM courses WHERE course_name  =  'math',"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: courses;
###Columns: courses.course_name, courses.course_description;
"
student_transcripts_tracking,What are the describing content for all the math curriculums?,SELECT course_description FROM courses WHERE course_name  =  'math',"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: courses;
###Columns: courses.course_name, courses.course_description;
"
student_transcripts_tracking,What is the zip code of the position in the city Port Chelsea?,SELECT zip_postcode FROM addresses WHERE city  =  'Port Chelsea',"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: addresses;
###Columns: addresses.city, addresses.zip_postcode;
"
student_transcripts_tracking,What is the zip code for Port Chelsea?,SELECT zip_postcode FROM addresses WHERE city  =  'Port Chelsea',"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: addresses;
###Columns: addresses.city, addresses.zip_postcode;
"
student_transcripts_tracking,Which division offers the most number of degrees? List division name and id.,"SELECT t2.department_name ,  t1.department_id FROM degree_programs as t1 JOIN departments as t2 ON t1.department_id  =  t2.department_id GROUP BY t1.department_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: departments, degree_programs;
###Columns: departments.department_id, departments.department_name, degree_programs.department_id;
"
student_transcripts_tracking,"For each division id, what is the name of the division with the most number of degrees?","SELECT t2.department_name ,  t1.department_id FROM degree_programs as t1 JOIN departments as t2 ON t1.department_id  =  t2.department_id GROUP BY t1.department_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: departments, degree_programs;
###Columns: departments.department_id, departments.department_name, degree_programs.department_id;
"
student_transcripts_tracking,How many departments offer any degree?,SELECT COUNT(DISTINCT department_id) FROM degree_programs,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: degree_programs;
###Columns: degree_programs.department_id;
"
student_transcripts_tracking,How many different departments offer degrees?,SELECT COUNT(DISTINCT department_id) FROM degree_programs,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: degree_programs;
###Columns: degree_programs.department_id;
"
student_transcripts_tracking,How many different degree names are offered?,SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: degree_programs;
###Columns: degree_programs.degree_summary_name;
"
student_transcripts_tracking,How many different degrees are offered?,SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: degree_programs;
###Columns: degree_programs.degree_summary_name;
"
student_transcripts_tracking,How many degrees does the engineering division offer?,SELECT COUNT(*) FROM departments as t1 JOIN degree_programs as t2 ON t1.department_id  =  t2.department_id WHERE t1.department_name  =  'engineer',"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: departments, degree_programs;
###Columns: departments.department_id, departments.department_name, degree_programs.department_id;
"
student_transcripts_tracking,How many degrees does the engineering department have?,SELECT COUNT(*) FROM departments as t1 JOIN degree_programs as t2 ON t1.department_id  =  t2.department_id WHERE t1.department_name  =  'engineer',"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: departments, degree_programs;
###Columns: departments.department_id, departments.department_name, degree_programs.department_id;
"
student_transcripts_tracking,What are the names and describing contents of all the sections?,"SELECT section_name ,  section_description FROM sections","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: sections;
###Columns: sections.section_name, sections.section_description;
"
student_transcripts_tracking,What are the names and describing details for all the sections?,"SELECT section_name ,  section_description FROM sections","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: sections;
###Columns: sections.section_name, sections.section_description;
"
student_transcripts_tracking,What are the names and id of curriculums having at most 2 sections?,"SELECT t1.course_name ,  t1.course_id FROM courses as t1 JOIN sections as t2 ON t1.course_id  =  t2.course_id GROUP BY t1.course_id HAVING COUNT(*)  <=  2","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: courses, sections;
###Columns: courses.course_name, courses.course_id, sections.course_id;
"
student_transcripts_tracking,What are the names and ids of every curriculum with less than 2 sections?,"SELECT t1.course_name ,  t1.course_id FROM courses as t1 JOIN sections as t2 ON t1.course_id  =  t2.course_id GROUP BY t1.course_id HAVING COUNT(*)  <=  2","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: courses, sections;
###Columns: courses.course_name, courses.course_id, sections.course_id;
"
student_transcripts_tracking,List the section_name in reversed lexicographical order.,SELECT section_name FROM sections ORDER BY section_name DESC,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: sections;
###Columns: sections.section_name;
"
student_transcripts_tracking,What are the names of the sections in reverse alphabetical order?,SELECT section_name FROM sections ORDER BY section_name DESC,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: sections;
###Columns: sections.section_name;
"
student_transcripts_tracking,What is the academic session which most undergraduate registered in? Show both the name and the id.,"SELECT t1.semester_name ,  t1.semester_id FROM semesters as t1 JOIN student_enrolment as t2 ON t1.semester_id  =  t2.semester_id GROUP BY t1.semester_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: semesters, student_enrolment;
###Columns: semesters.semester_name, semesters.semester_id, student_enrolment.semester_id;
"
student_transcripts_tracking,"For each semester, what is the name and id of the one with the most undergraduate registered?","SELECT t1.semester_name ,  t1.semester_id FROM semesters as t1 JOIN student_enrolment as t2 ON t1.semester_id  =  t2.semester_id GROUP BY t1.semester_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: semesters, student_enrolment;
###Columns: semesters.semester_name, semesters.semester_id, student_enrolment.semester_id;
"
student_transcripts_tracking,What is the describing details of the division whose name has the substring the computer?,SELECT department_description FROM departments WHERE department_name LIKE '%computer%',"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: departments;
###Columns: departments.department_name, departments.department_description;
"
student_transcripts_tracking,What is the division describing details for the one whose name has the word computer?,SELECT department_description FROM departments WHERE department_name LIKE '%computer%',"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: departments;
###Columns: departments.department_name, departments.department_description;
"
student_transcripts_tracking,"Who are enrolled in 2 degree programs in one term? List the given name, middle name and family name and the id.","SELECT t1.first_name ,  t1.middle_name ,  t1.last_name ,  t1.student_id FROM students as t1 JOIN student_enrolment as t2 ON t1.student_id  =  t2.student_id GROUP BY t1.student_id HAVING COUNT(*)  =  2","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students, student_enrolment;
###Columns: students.student_id, students.last_name, students.first_name, students.middle_name, student_enrolment.student_id;
"
student_transcripts_tracking,"What are the given, middle, and family names, along with the ids, of all undergraduates who enrolled in 2 degree programs in one term?","SELECT t1.first_name ,  t1.middle_name ,  t1.last_name ,  t1.student_id FROM students as t1 JOIN student_enrolment as t2 ON t1.student_id  =  t2.student_id GROUP BY t1.student_id HAVING COUNT(*)  =  2","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students, student_enrolment;
###Columns: students.student_id, students.last_name, students.first_name, students.middle_name, student_enrolment.student_id;
"
student_transcripts_tracking,"Who is enrolled in a Bachelor degree program? List the given name, middle name, family name.","SELECT DISTINCT t1.first_name ,  t1.middle_name ,  t1.last_name FROM students as t1 JOIN student_enrolment as t2 ON t1.student_id  =  t2.student_id JOIN degree_programs as t3 ON t2.degree_program_id  =  t3.degree_program_id WHERE t3.degree_summary_name  =  'Bachelor'","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students, student_enrolment, degree_programs;
###Columns: students.student_id, students.last_name, students.first_name, students.middle_name, student_enrolment.student_id, student_enrolment.degree_program_id, degree_programs.degree_summary_name, degree_programs.degree_program_id;
"
student_transcripts_tracking,"What are the given, middle, and family names for everybody enrolled in a Bachelors program?","SELECT DISTINCT t1.first_name ,  t1.middle_name ,  t1.last_name FROM students as t1 JOIN student_enrolment as t2 ON t1.student_id  =  t2.student_id JOIN degree_programs as t3 ON t2.degree_program_id  =  t3.degree_program_id WHERE t3.degree_summary_name  =  'Bachelor'","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students, student_enrolment, degree_programs;
###Columns: students.student_id, students.last_name, students.first_name, students.middle_name, student_enrolment.student_id, student_enrolment.degree_program_id, degree_programs.degree_summary_name, degree_programs.degree_program_id;
"
student_transcripts_tracking,Find the kind of program which most number of students are enrolled in?,SELECT t1.degree_summary_name FROM degree_programs as t1 JOIN student_enrolment as t2 ON t1.degree_program_id  =  t2.degree_program_id GROUP BY t1.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: degree_programs, student_enrolment;
###Columns: degree_programs.degree_summary_name, degree_programs.degree_program_id, student_enrolment.degree_program_id;
"
student_transcripts_tracking,What is the degree summary name that has the most number of students enrolled?,SELECT t1.degree_summary_name FROM degree_programs as t1 JOIN student_enrolment as t2 ON t1.degree_program_id  =  t2.degree_program_id GROUP BY t1.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: degree_programs, student_enrolment;
###Columns: degree_programs.degree_summary_name, degree_programs.degree_program_id, student_enrolment.degree_program_id;
"
student_transcripts_tracking,Find the program which most number of students are enrolled in. List both the id and the summary.,"SELECT t1.degree_program_id ,  t1.degree_summary_name FROM degree_programs as t1 JOIN student_enrolment as t2 ON t1.degree_program_id  =  t2.degree_program_id GROUP BY t1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: degree_programs, student_enrolment;
###Columns: degree_programs.degree_summary_name, degree_programs.degree_program_id, student_enrolment.degree_program_id;
"
student_transcripts_tracking,What is the program id and the summary of the degree that has the most students enrolled?,"SELECT t1.degree_program_id ,  t1.degree_summary_name FROM degree_programs as t1 JOIN student_enrolment as t2 ON t1.degree_program_id  =  t2.degree_program_id GROUP BY t1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: degree_programs, student_enrolment;
###Columns: degree_programs.degree_summary_name, degree_programs.degree_program_id, student_enrolment.degree_program_id;
"
student_transcripts_tracking,"Which student has enrolled for the most times in any program? List the id, given name, middle name, family name, the number of enrollments and undergraduate id.","SELECT t1.first_name ,  t1.middle_name ,  t1.last_name ,  COUNT(*) ,  t1.student_id FROM students as t1 JOIN student_enrolment as t2 ON t1.student_id  =  t2.student_id GROUP BY t1.student_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students, student_enrolment;
###Columns: students.student_id, students.last_name, students.first_name, students.middle_name, student_enrolment.student_id;
"
student_transcripts_tracking,"What is the given, middle, and family name, along with the id and number of enrollments, for the undergraduate who enrolled the most in any program?","SELECT  t1.first_name ,  t1.middle_name ,  t1.last_name ,  COUNT(*) ,  t1.student_id FROM students as t1 JOIN student_enrolment as t2 ON t1.student_id  =  t2.student_id GROUP BY t1.student_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students, student_enrolment;
###Columns: students.student_id, students.last_name, students.first_name, students.middle_name, student_enrolment.student_id;
"
student_transcripts_tracking,Which academic sessions do not have any student enrolled? List the academic session name.,SELECT semester_name FROM semesters WHERE semester_id NOT IN( SELECT semester_id FROM student_enrolment ),"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: semesters, student_enrolment;
###Columns: semesters.semester_name, semesters.semester_id, student_enrolment.semester_id;
"
student_transcripts_tracking,What is the name of the academic session with no students enrolled?,SELECT semester_name FROM semesters WHERE semester_id NOT IN( SELECT semester_id FROM student_enrolment ),"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: semesters, student_enrolment;
###Columns: semesters.semester_name, semesters.semester_id, student_enrolment.semester_id;
"
student_transcripts_tracking,What are all the course names of the curriculums which ever have students enrolled in?,SELECT DISTINCT t1.course_name FROM courses as t1 JOIN Student_Enrolment_courses as t2 ON t1.course_id  =  t2.course_id,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: courses;
###Columns: courses.course_name, courses.course_id;
"
student_transcripts_tracking,What are the names of all curriculums that have some students enrolled?,SELECT DISTINCT t1.course_name FROM courses as t1 JOIN Student_Enrolment_courses as t2 ON t1.course_id  =  t2.course_id,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: courses;
###Columns: courses.course_name, courses.course_id;
"
student_transcripts_tracking,What's the name of the curriculum with most number of enrollments?,SELECT  t1.course_name FROM courses as t1 JOIN Student_Enrolment_courses as t2 ON t1.course_id  =  t2.course_id GROUP BY t1.course_name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: courses;
###Columns: courses.course_name, courses.course_id;
"
student_transcripts_tracking,What is the name of the curriculum with the most students enrolled?,SELECT  t1.course_name FROM courses as t1 JOIN Student_Enrolment_courses as t2 ON t1.course_id  =  t2.course_id GROUP BY t1.course_name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: courses;
###Columns: courses.course_name, courses.course_id;
"
student_transcripts_tracking,Find the family name of the students who currently live in the state of North Carolina but have not registered in any degree program.,SELECT t1.last_name FROM students as t1 JOIN addresses as t2 ON t1.current_address_id  =  t2.address_id WHERE t2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT t3.last_name FROM students as t3 JOIN student_enrolment as t4 ON t3.student_id  =  t4.student_id,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students, addresses, student_enrolment;
###Columns: students.student_id, students.current_address_id, students.last_name, addresses.address_id, addresses.state_province_county, student_enrolment.student_id;
"
student_transcripts_tracking,What are the family name of the students who live in North Carolina but have not registered in any degree programs?,SELECT t1.last_name FROM students as t1 JOIN addresses as t2 ON t1.current_address_id  =  t2.address_id WHERE t2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT t3.last_name FROM students as t3 JOIN student_enrolment as t4 ON t3.student_id  =  t4.student_id,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students, addresses, student_enrolment;
###Columns: students.student_id, students.current_address_id, students.last_name, addresses.address_id, addresses.state_province_county, student_enrolment.student_id;
"
student_transcripts_tracking,Show the date and id of the student record with at least 2 curriculum results.,"SELECT t2.transcript_date ,  t1.transcript_id FROM transcript_contents as t1 JOIN transcripts as t2 ON t1.transcript_id  =  t2.transcript_id GROUP BY t1.transcript_id HAVING COUNT(*)  >=  2","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: transcripts, transcript_contents;
###Columns: transcripts.transcript_date, transcripts.transcript_id, transcript_contents.transcript_id;
"
student_transcripts_tracking,What is the date and id of the student record with at least 2 curriculums listed?,"SELECT t2.transcript_date ,  t1.transcript_id FROM transcript_contents as t1 JOIN transcripts as t2 ON t1.transcript_id  =  t2.transcript_id GROUP BY t1.transcript_id HAVING COUNT(*)  >=  2","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: transcripts, transcript_contents;
###Columns: transcripts.transcript_date, transcripts.transcript_id, transcript_contents.transcript_id;
"
student_transcripts_tracking,What is the phone number of the man with the given name Timmothy and the family name Ward?,SELECT cell_mobile_number FROM students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward',"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students;
###Columns: students.last_name, students.first_name, students.cell_mobile_number;
"
student_transcripts_tracking,What is the phone number of the student named Timothy Ward?,SELECT cell_mobile_number FROM students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward',"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students;
###Columns: students.last_name, students.first_name, students.cell_mobile_number;
"
student_transcripts_tracking,"Who is the first student to register? List the given name, middle name and family name.","SELECT first_name ,  middle_name ,  last_name FROM students ORDER BY date_first_registered ASC LIMIT 1","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students;
###Columns: students.date_first_registered, students.last_name, students.first_name, students.middle_name;
"
student_transcripts_tracking,"What is the given, middle, and family name of the first student to register?","SELECT first_name ,  middle_name ,  last_name FROM students ORDER BY date_first_registered ASC LIMIT 1","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students;
###Columns: students.date_first_registered, students.last_name, students.first_name, students.middle_name;
"
student_transcripts_tracking,"Who is the earliest graduate of the school? List the given name, middle name and family name.","SELECT first_name ,  middle_name ,  last_name FROM students ORDER BY date_left ASC LIMIT 1","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students;
###Columns: students.last_name, students.first_name, students.date_left, students.middle_name;
"
student_transcripts_tracking,"What is the given, middle, and family name of the earliest school graduate?","SELECT first_name ,  middle_name ,  last_name FROM students ORDER BY date_left ASC LIMIT 1","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students;
###Columns: students.last_name, students.first_name, students.date_left, students.middle_name;
"
student_transcripts_tracking,Whose permanent address is different from his or her current address? List his or her given name.,SELECT first_name FROM students WHERE current_address_id != permanent_address_id,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students;
###Columns: students.current_address_id, students.first_name, students.permanent_address_id;
"
student_transcripts_tracking,What is the given name of the student whose permanent address is different from his or her current one?,SELECT first_name FROM students WHERE current_address_id != permanent_address_id,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students;
###Columns: students.current_address_id, students.first_name, students.permanent_address_id;
"
student_transcripts_tracking,Which place holds the most number of students currently? List the place id and all lines.,"SELECT t1.address_id ,  t1.line_1 ,  t1.line_2 FROM addresses as t1 JOIN students as t2 ON t1.address_id  =  t2.current_address_id GROUP BY t1.address_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: addresses, students;
###Columns: addresses.address_id, addresses.line_2, addresses.line_1, students.current_address_id;
"
student_transcripts_tracking,"What is the id, line 1, and line 2 of the address with the most students?","SELECT t1.address_id ,  t1.line_1 ,  t1.line_2 FROM addresses as t1 JOIN students as t2 ON t1.address_id  =  t2.current_address_id GROUP BY t1.address_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: addresses, students;
###Columns: addresses.address_id, addresses.line_2, addresses.line_1, students.current_address_id;
"
student_transcripts_tracking,"On average, when were the student record printed?",SELECT AVG(transcript_date) FROM transcripts,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: transcripts;
###Columns: transcripts.transcript_date;
"
student_transcripts_tracking,What is the average student record date?,SELECT AVG(transcript_date) FROM transcripts,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: transcripts;
###Columns: transcripts.transcript_date;
"
student_transcripts_tracking,When is the first student record released? List the date and details.,"SELECT transcript_date ,  other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: transcripts;
###Columns: transcripts.other_details, transcripts.transcript_date;
"
student_transcripts_tracking,"What is the earliest date of a transcript release, and what particulars can you tell me?","SELECT transcript_date ,  other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: transcripts;
###Columns: transcripts.other_details, transcripts.transcript_date;
"
student_transcripts_tracking,How many student record are released?,SELECT COUNT(*) FROM transcripts,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: transcripts;
###Columns: transcripts.other_details, transcripts.transcript_date, transcripts.transcript_id;
"
student_transcripts_tracking,How many student records are listed?,SELECT COUNT(*) FROM transcripts,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: transcripts;
###Columns: transcripts.other_details, transcripts.transcript_date, transcripts.transcript_id;
"
student_transcripts_tracking,What is the last student record release date?,SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: transcripts;
###Columns: transcripts.transcript_date;
"
student_transcripts_tracking,When was the last student record released?,SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: transcripts;
###Columns: transcripts.transcript_date;
"
student_transcripts_tracking,How many times at most can a curriculum enrollment result show in different student records? Also show the curriculum enrollment id.,"SELECT COUNT(*) ,  student_course_id FROM transcript_contents GROUP BY student_course_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: transcript_contents;
###Columns: transcript_contents.student_course_id;
"
student_transcripts_tracking,What is the maximum number of times that a curriculum shows up in different student records and what is that curriculum's enrollment id?,"SELECT COUNT(*) ,  student_course_id FROM transcript_contents GROUP BY student_course_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: transcript_contents;
###Columns: transcript_contents.student_course_id;
"
student_transcripts_tracking,"Show the date of the student record which shows the least number of results, also list the id.","SELECT t2.transcript_date ,  t1.transcript_id FROM transcript_contents as t1 JOIN transcripts as t2 ON t1.transcript_id  =  t2.transcript_id GROUP BY t1.transcript_id ORDER BY COUNT(*) asC LIMIT 1","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: transcripts, transcript_contents;
###Columns: transcripts.transcript_date, transcripts.transcript_id, transcript_contents.transcript_id;
"
student_transcripts_tracking,What is the date and id of the student record with the least number of results?,"SELECT t2.transcript_date ,  t1.transcript_id FROM transcript_contents as t1 JOIN transcripts as t2 ON t1.transcript_id  =  t2.transcript_id GROUP BY t1.transcript_id ORDER BY COUNT(*) asC LIMIT 1","CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: transcripts, transcript_contents;
###Columns: transcripts.transcript_date, transcripts.transcript_id, transcript_contents.transcript_id;
"
student_transcripts_tracking,Find the academic session when both Master students and Bachelor students got enrolled in.,SELECT DISTINCT t2.semester_id FROM degree_programs as t1 JOIN student_enrolment as t2 ON t1.degree_program_id  =  t2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT t2.semester_id FROM degree_programs as t1 JOIN student_enrolment as t2 ON t1.degree_program_id  =  t2.degree_program_id WHERE degree_summary_name  =  'Bachelor',"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: student_enrolment, degree_programs;
###Columns: student_enrolment.degree_program_id, student_enrolment.semester_id, degree_programs.degree_program_id;
"
student_transcripts_tracking,What is the id of the academic session that had both Masters and Bachelors students enrolled?,SELECT DISTINCT t2.semester_id FROM degree_programs as t1 JOIN student_enrolment as t2 ON t1.degree_program_id  =  t2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT t2.semester_id FROM degree_programs as t1 JOIN student_enrolment as t2 ON t1.degree_program_id  =  t2.degree_program_id WHERE degree_summary_name  =  'Bachelor',"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: student_enrolment, degree_programs;
###Columns: student_enrolment.degree_program_id, student_enrolment.semester_id, degree_programs.degree_program_id;
"
student_transcripts_tracking,How many different places do the students currently live?,SELECT COUNT(DISTINCT current_address_id) FROM students,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students;
###Columns: students.current_address_id;
"
student_transcripts_tracking,What are the different places that have students living there?,SELECT COUNT(DISTINCT current_address_id) FROM students,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students;
###Columns: students.current_address_id;
"
student_transcripts_tracking,List all the student particulars in reversed lexicographical order.,SELECT other_student_details FROM students ORDER BY other_student_details DESC,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students;
###Columns: students.other_student_details;
"
student_transcripts_tracking,What other particulars can you tell me about students in reverse alphabetical order?,SELECT other_student_details FROM students ORDER BY other_student_details DESC,"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students;
###Columns: students.other_student_details;
"
student_transcripts_tracking,Describe the section h.,SELECT section_description FROM sections WHERE section_name  =  'h',"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: sections;
###Columns: sections.section_name, sections.section_description;
"
student_transcripts_tracking,What is the description for the section named h?,SELECT section_description FROM sections WHERE section_name  =  'h',"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: sections;
###Columns: sections.section_name, sections.section_description;
"
student_transcripts_tracking,Find the given name of the students who permanently live in the country Haiti or have the phone number 09700166582.,SELECT t1.first_name FROM students as t1 JOIN addresses as t2 ON t1.permanent_address_id  =  t2.address_id WHERE t2.country  =  'Haiti' UNION SELECT first_name FROM students WHERE cell_mobile_number  =  '09700166582',"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students, addresses;
###Columns: students.first_name, students.permanent_address_id, addresses.address_id, addresses.country;
"
student_transcripts_tracking,What are the given names of the students who live in Haiti permanently or have the phone number 09700166582?,SELECT t1.first_name FROM students as t1 JOIN addresses as t2 ON t1.permanent_address_id  =  t2.address_id WHERE t2.country  =  'Haiti' UNION SELECT first_name FROM students WHERE cell_mobile_number  =  '09700166582',"CREATE TABLE `Addresses` (
  address_id INTEGER,
  line_1 VARCHAR(255),
  line_2 VARCHAR(255),
  line_3 VARCHAR(255),
  city VARCHAR(255),
  zip_postcode VARCHAR(20),
  state_province_county VARCHAR(255),
  country VARCHAR(255),
  other_address_details VARCHAR(255)
);

CREATE TABLE `Courses` (
  course_id INTEGER,
  course_name VARCHAR(255),
  course_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Departments` (
  department_id INTEGER,
  department_name VARCHAR(255),
  department_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Degree_Programs` (
  degree_program_id INTEGER,
  department_id INTEGER REFERENCES Departments(department_id),
  degree_summary_name VARCHAR(255),
  degree_summary_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Sections` (
  section_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  section_name VARCHAR(255),
  section_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Semesters` (
  semester_id INTEGER,
  semester_name VARCHAR(255),
  semester_description VARCHAR(255),
  other_details VARCHAR(255)
);

CREATE TABLE `Students` (
  student_id INTEGER,
  current_address_id INTEGER REFERENCES Addresses(address_id),
  permanent_address_id INTEGER REFERENCES Addresses(address_id),
  first_name VARCHAR(80),
  middle_name VARCHAR(40),
  last_name VARCHAR(40),
  cell_mobile_number VARCHAR(40),
  email_address VARCHAR(40),
  ssn VARCHAR(40),
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment` (
  student_enrolment_id INTEGER,
  degree_program_id INTEGER REFERENCES Degree_Programs(degree_program_id),
  semester_id INTEGER REFERENCES Semesters(semester_id),
  student_id INTEGER REFERENCES Students(student_id),
  other_details VARCHAR(255)
);

CREATE TABLE `Student_Enrolment_Courses` (
  student_course_id INTEGER,
  course_id INTEGER REFERENCES Courses(course_id),
  student_enrolment_id INTEGER REFERENCES Student_Enrolment(student_enrolment_id)
);

CREATE TABLE `Transcripts` (
  transcript_id INTEGER,
  transcript_date DATETIME,
  other_details VARCHAR(255)
);

CREATE TABLE `Transcript_Contents` (
  student_course_id INTEGER REFERENCES Student_Enrolment_Courses(student_course_id),
  transcript_id INTEGER REFERENCES Transcripts(transcript_id)
);

","###Tables: students, addresses;
###Columns: students.first_name, students.permanent_address_id, addresses.address_id, addresses.country;
"
tvshow,List the name of all animations in alphabetical order.,SELECT title FROM cartoon ORDER BY title,"CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: cartoon;
###Columns: cartoon.title;
"
tvshow,What are the names of the animations sorted alphabetically?,SELECT title FROM cartoon ORDER BY title,"CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: cartoon;
###Columns: cartoon.title;
"
tvshow,"List all animation directed by ""Ben Jones"".","SELECT title FROM cartoon WHERE directed_by = ""Ben Jones"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: cartoon;
###Columns: cartoon.title, cartoon.directed_by;
"
tvshow,What are the names of all animations directed by Ben Jones?,"SELECT title FROM cartoon WHERE directed_by = ""Ben Jones"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: cartoon;
###Columns: cartoon.title, cartoon.directed_by;
"
tvshow,"How many animations were written by ""Joseph Kuhr""?","SELECT COUNT(*) FROM cartoon WHERE written_by = ""Joseph Kuhr"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: cartoon;
###Columns: cartoon.written_by;
"
tvshow,What is the number of animations written by Joseph Kuhr?,"SELECT COUNT(*) FROM cartoon WHERE written_by = ""Joseph Kuhr"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: cartoon;
###Columns: cartoon.written_by;
"
tvshow,list all animation and their directors ordered by their airdate,"SELECT title ,  directed_by FROM cartoon ORDER BY original_air_date","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: cartoon;
###Columns: cartoon.original_air_date, cartoon.title, cartoon.directed_by;
"
tvshow,What is the name and directors of all the animation that are ordered by released date?,"SELECT title ,  directed_by FROM cartoon ORDER BY original_air_date","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: cartoon;
###Columns: cartoon.original_air_date, cartoon.title, cartoon.directed_by;
"
tvshow,"List the name of all animation directed by ""Ben Jones"" or ""Brandon Vietti"".","SELECT title FROM cartoon WHERE directed_by = ""Ben Jones"" OR directed_by = ""Brandon Vietti"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: cartoon;
###Columns: cartoon.title, cartoon.directed_by;
"
tvshow,What are the names of all animation directed by Ben Jones or Brandon Vietti?,"SELECT title FROM cartoon WHERE directed_by = ""Ben Jones"" OR directed_by = ""Brandon Vietti"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: cartoon;
###Columns: cartoon.title, cartoon.directed_by;
"
tvshow,Which country has the most of TV Channels? List the country name and number of TV Channels it has.,"SELECT country ,  COUNT(*) FROM tv_channel GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel;
###Columns: tv_channel.country;
"
tvshow,What is the State with the most number of TV Channels and how many does it have?,"SELECT country ,  COUNT(*) FROM tv_channel GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel;
###Columns: tv_channel.country;
"
tvshow,List the number of different serial names and contents in the TV Channel table.,"SELECT COUNT(DISTINCT series_name) ,  COUNT(DISTINCT content) FROM tv_channel;","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel;
###Columns: tv_channel.series_name, tv_channel.content;
"
tvshow,How many different serial and contents are listed in the TV Channel table?,"SELECT COUNT(DISTINCT series_name) ,  COUNT(DISTINCT content) FROM tv_channel;","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel;
###Columns: tv_channel.series_name, tv_channel.content;
"
tvshow,"What is the content of TV Channel with serial name ""Sky Radio""?","SELECT content FROM tv_channel WHERE series_name = ""Sky Radio"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel;
###Columns: tv_channel.series_name, tv_channel.content;
"
tvshow,What is the content of the series Sky Radio?,"SELECT content FROM tv_channel WHERE series_name = ""Sky Radio"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel;
###Columns: tv_channel.series_name, tv_channel.content;
"
tvshow,"What is the Package Option of TV Channel with serial name ""Sky Radio""?","SELECT package_option FROM tv_channel WHERE series_name = ""Sky Radio"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel;
###Columns: tv_channel.series_name, tv_channel.package_option;
"
tvshow,What are the Package Options of the TV Channels whose series names are Sky Radio?,"SELECT package_option FROM tv_channel WHERE series_name = ""Sky Radio"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel;
###Columns: tv_channel.series_name, tv_channel.package_option;
"
tvshow,List the language used least number of TV Channel. List language and number of TV Channel.,"SELECT language ,  COUNT(*) FROM tv_channel GROUP BY language ORDER BY COUNT(*) ASC LIMIT 1;","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel;
###Columns: tv_channel.language;
"
tvshow,What are the languages used by the least number of TV Channels and how many channels use it?,"SELECT language ,  COUNT(*) FROM tv_channel GROUP BY language ORDER BY COUNT(*) ASC LIMIT 1;","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel;
###Columns: tv_channel.language;
"
tvshow,List each language and the number of TV Channels using it.,"SELECT language ,  COUNT(*) FROM tv_channel GROUP BY language","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel;
###Columns: tv_channel.language;
"
tvshow,"For each language, list the number of TV Channels that use it.","SELECT language ,  COUNT(*) FROM tv_channel GROUP BY language","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel;
###Columns: tv_channel.language;
"
tvshow,"What is the TV Channel that shows the cartoon ""The Rise of the Blue Beetle!""? List the TV Channel's series name.","SELECT t1.series_name FROM tv_channel as t1 JOIN cartoon as t2 ON t1.id = t2.channel WHERE t2.title = ""The Rise of the Blue Beetle!"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel, cartoon;
###Columns: tv_channel.series_name, tv_channel.id, cartoon.channel, cartoon.title;
"
tvshow,"What is the serial name of the TV Channel that shows the cartoon ""The Rise of the Blue Beetle""?","SELECT t1.series_name FROM tv_channel as t1 JOIN cartoon as t2 ON t1.id = t2.channel WHERE t2.title = ""The Rise of the Blue Beetle!"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel, cartoon;
###Columns: tv_channel.series_name, tv_channel.id, cartoon.channel, cartoon.title;
"
tvshow,"List the name of all  animations showed on TV Channel with series name ""Sky Radio"".","SELECT t2.title FROM tv_channel as t1 JOIN cartoon as t2 ON t1.id = t2.channel WHERE t1.series_name = ""Sky Radio"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: cartoon, tv_channel;
###Columns: cartoon.channel, cartoon.title, tv_channel.series_name, tv_channel.id;
"
tvshow,"What is the name of all the animations that are on the TV Channel with the series name ""Sky Radio""?","SELECT t2.title FROM tv_channel as t1 JOIN cartoon as t2 ON t1.id = t2.channel WHERE t1.series_name = ""Sky Radio"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: cartoon, tv_channel;
###Columns: cartoon.channel, cartoon.title, tv_channel.series_name, tv_channel.id;
"
tvshow,List the Episode of all TV series sorted by rating.,SELECT episode FROM tv_series ORDER BY rating,"CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_series;
###Columns: tv_series.rating, tv_series.episode;
"
tvshow,What are all of the episodes ordered by ratings?,SELECT episode FROM tv_series ORDER BY rating,"CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_series;
###Columns: tv_series.rating, tv_series.episode;
"
tvshow,List top 3 highest score  TV series. List the TV series's Episode and score.,"SELECT episode ,  rating FROM tv_series ORDER BY rating DESC LIMIT 3;","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_series;
###Columns: tv_series.rating, tv_series.episode;
"
tvshow,What are 3 most highly rated episodes in the TV series table and what were those scores?,"SELECT episode ,  rating FROM tv_series ORDER BY rating DESC LIMIT 3;","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_series;
###Columns: tv_series.rating, tv_series.episode;
"
tvshow,What is minimum and maximum share of TV series?,"SELECT MAX(share) , MIN(share) FROM tv_series;","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_series;
###Columns: tv_series.episode, tv_series.weekly_rank, tv_series.rating, tv_series.share, tv_series.channel, tv_series.viewers_m, tv_series.id, tv_series.air_date;
"
tvshow,What is the maximum and minimum share for the TV series?,"SELECT MAX(share) , MIN(share) FROM tv_series;","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_series;
###Columns: tv_series.episode, tv_series.weekly_rank, tv_series.rating, tv_series.share, tv_series.channel, tv_series.viewers_m, tv_series.id, tv_series.air_date;
"
tvshow,"What is the airdate of TV series with Episode ""A Love of a Lifetime""?","SELECT air_date FROM tv_series WHERE episode = ""A Love of a Lifetime"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_series;
###Columns: tv_series.episode, tv_series.air_date;
"
tvshow,"When did the episode ""A Love of a Lifetime"" released?","SELECT air_date FROM tv_series WHERE episode = ""A Love of a Lifetime"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_series;
###Columns: tv_series.episode, tv_series.air_date;
"
tvshow,"What is Weekly Rank of TV series with Episode ""A Love of a Lifetime""?","SELECT weekly_rank FROM tv_series WHERE episode = ""A Love of a Lifetime"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_series;
###Columns: tv_series.weekly_rank, tv_series.episode;
"
tvshow,"What is the score per week for the episode ""A Love of a Lifetime""?","SELECT weekly_rank FROM tv_series WHERE episode = ""A Love of a Lifetime"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_series;
###Columns: tv_series.weekly_rank, tv_series.episode;
"
tvshow,"What is the TV Channel of TV serial with Episode ""A Love of a Lifetime""? List the TV Channel's serial name.","SELECT t1.series_name FROM tv_channel as t1 JOIN tv_series as t2 ON t1.id = t2.channel WHERE t2.episode = ""A Love of a Lifetime"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel, tv_series;
###Columns: tv_channel.series_name, tv_channel.id, tv_series.channel, tv_series.episode;
"
tvshow,"What is the serial name that has the episode ""A Love of a Lifetime""?","SELECT t1.series_name FROM tv_channel as t1 JOIN tv_series as t2 ON t1.id = t2.channel WHERE t2.episode = ""A Love of a Lifetime"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel, tv_series;
###Columns: tv_channel.series_name, tv_channel.id, tv_series.channel, tv_series.episode;
"
tvshow,"List the Episode of all  TV series showed on TV Channel with series name ""Sky Radio"".","SELECT t2.episode FROM tv_channel as t1 JOIN tv_series as t2 ON t1.id = t2.channel WHERE t1.series_name = ""Sky Radio"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_series, tv_channel;
###Columns: tv_series.channel, tv_series.episode, tv_channel.series_name, tv_channel.id;
"
tvshow,"What is the episode for the TV series named ""Sky Radio""?","SELECT t2.episode FROM tv_channel as t1 JOIN tv_series as t2 ON t1.id = t2.channel WHERE t1.series_name = ""Sky Radio"";","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_series, tv_channel;
###Columns: tv_series.channel, tv_series.episode, tv_channel.series_name, tv_channel.id;
"
tvshow,Find the number of animations directed by each of the listed directors.,"SELECT COUNT(*) ,  directed_by FROM cartoon GROUP BY directed_by","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: cartoon;
###Columns: cartoon.directed_by;
"
tvshow,How many animations did each director create?,"SELECT COUNT(*) ,  directed_by FROM cartoon GROUP BY directed_by","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: cartoon;
###Columns: cartoon.directed_by;
"
tvshow,Find the production number and channel of the most recently released cartoon.,"SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: cartoon;
###Columns: cartoon.production_code, cartoon.channel, cartoon.original_air_date;
"
tvshow,What is the produdction number and channel of the most recent cartoon?,"SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: cartoon;
###Columns: cartoon.production_code, cartoon.channel, cartoon.original_air_date;
"
tvshow,Find the package choice and serial name of the TV channel that has HD TV.,"SELECT package_option ,  series_name FROM tv_channel WHERE hight_definition_tv  =  ""yes""","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel;
###Columns: tv_channel.series_name, tv_channel.hight_definition_tv, tv_channel.package_option;
"
tvshow,What are the package options and the name of the serial for the TV Channel that supports HD TV?,"SELECT package_option ,  series_name FROM tv_channel WHERE hight_definition_tv  =  ""yes""","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel;
###Columns: tv_channel.series_name, tv_channel.hight_definition_tv, tv_channel.package_option;
"
tvshow,which countries' tv channels are playing some animation written by Todd Casey?,SELECT t1.country FROM tv_channel as t1 JOIN cartoon as t2 ON t1.id = t2.channel WHERE t2.written_by  =  'Todd Casey',"CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel, cartoon;
###Columns: tv_channel.country, tv_channel.id, cartoon.channel, cartoon.written_by;
"
tvshow,What are the State that have animations on TV that were written by Todd Casey?,SELECT t1.country FROM tv_channel as t1 JOIN cartoon as t2 ON t1.id = t2.channel WHERE t2.written_by  =  'Todd Casey',"CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel, cartoon;
###Columns: tv_channel.country, tv_channel.id, cartoon.channel, cartoon.written_by;
"
tvshow,which countries' tv channels are not playing any animation written by Todd Casey?,SELECT country FROM tv_channel EXCEPT SELECT t1.country FROM tv_channel as t1 JOIN cartoon as t2 ON t1.id = t2.channel WHERE t2.written_by  =  'Todd Casey',"CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel, cartoon;
###Columns: tv_channel.country, tv_channel.id, cartoon.channel, cartoon.written_by;
"
tvshow,What are the States that are not playing animations written by Todd Casey?,SELECT country FROM tv_channel EXCEPT SELECT t1.country FROM tv_channel as t1 JOIN cartoon as t2 ON t1.id = t2.channel WHERE t2.written_by  =  'Todd Casey',"CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel, cartoon;
###Columns: tv_channel.country, tv_channel.id, cartoon.channel, cartoon.written_by;
"
tvshow,Find the serial name and State of the tv channel that is playing some animation directed by Ben Jones and Michael Chang?,"SELECT t1.series_name ,  t1.country FROM tv_channel as t1 JOIN cartoon as t2 ON t1.id = t2.channel WHERE t2.directed_by  =  'Michael Chang' INTERSECT SELECT t1.series_name ,  t1.country FROM tv_channel as t1 JOIN cartoon as t2 ON t1.id = t2.channel WHERE t2.directed_by  =  'Ben Jones'","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel, cartoon;
###Columns: tv_channel.series_name, tv_channel.country, tv_channel.id, cartoon.channel, cartoon.directed_by;
"
tvshow,What is the serial name and nation of all TV channels that are playing animations directed by Ben Jones and animations directed by Michael Chang?,"SELECT t1.series_name ,  t1.country FROM tv_channel as t1 JOIN cartoon as t2 ON t1.id = t2.channel WHERE t2.directed_by  =  'Michael Chang' INTERSECT SELECT t1.series_name ,  t1.country FROM tv_channel as t1 JOIN cartoon as t2 ON t1.id = t2.channel WHERE t2.directed_by  =  'Ben Jones'","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel, cartoon;
###Columns: tv_channel.series_name, tv_channel.country, tv_channel.id, cartoon.channel, cartoon.directed_by;
"
tvshow,find the pixel aspect ratio and nation of the tv channels that do not use English.,"SELECT pixel_aspect_ratio_par ,  country FROM tv_channel WHERE language != 'English'","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel;
###Columns: tv_channel.pixel_aspect_ratio_par, tv_channel.country;
"
tvshow,What is the pixel aspect ratio and nation of origin for all TV channels that do not use English?,"SELECT pixel_aspect_ratio_par ,  country FROM tv_channel WHERE language != 'English'","CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel;
###Columns: tv_channel.pixel_aspect_ratio_par, tv_channel.country;
"
tvshow,find id of the tv channels that from the States where have more than two tv channels.,SELECT id FROM tv_channel WHERE country IN(SELECT country FROM tv_channel GROUP BY country HAVING COUNT(*)  >  2),"CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel;
###Columns: tv_channel.country, tv_channel.id;
"
tvshow,What are the ids of all tv channels that have more than 2 TV channels?,SELECT id FROM tv_channel WHERE country IN(SELECT country FROM tv_channel GROUP BY country HAVING COUNT(*)  >  2),"CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel;
###Columns: tv_channel.country, tv_channel.id;
"
tvshow,find the id of tv channels that do not play any animation directed by Ben Jones.,SELECT id FROM tv_channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones',"CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel, cartoon;
###Columns: tv_channel.id, cartoon.channel, cartoon.id, cartoon.directed_by;
"
tvshow,What are the ids of the TV channels that do not have any animations directed by Ben Jones?,SELECT id FROM tv_channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones',"CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel, cartoon;
###Columns: tv_channel.id, cartoon.channel, cartoon.id, cartoon.directed_by;
"
tvshow,find the package option of the tv channel that do not have any animation directed by Ben Jones.,SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'),"CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel, cartoon;
###Columns: tv_channel.id, tv_channel.package_option, cartoon.channel, cartoon.id, cartoon.directed_by;
"
tvshow,What are the package options of all tv channels that are not playing any animations directed by Ben Jones?,SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'),"CREATE TABLE `TV_Channel` (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE `TV_series` (
  id REAL PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

CREATE TABLE `Cartoon` (
  id REAL PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT REFERENCES TV_Channel(id)
);

","###Tables: tv_channel, cartoon;
###Columns: tv_channel.id, tv_channel.package_option, cartoon.channel, cartoon.id, cartoon.directed_by;
"
poker_player,How many car gamers are there?,SELECT COUNT(*) FROM poker_player,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: poker_player;
###Columns: poker_player.poker_player_id, poker_player.money_rank, poker_player.earnings, poker_player.final_table_made, poker_player.people_id, poker_player.best_finish;
"
poker_player,Count the number of car gamers.,SELECT COUNT(*) FROM poker_player,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: poker_player;
###Columns: poker_player.poker_player_id, poker_player.money_rank, poker_player.earnings, poker_player.final_table_made, poker_player.people_id, poker_player.best_finish;
"
poker_player,List the earnings of poker players in descending order.,SELECT earnings FROM poker_player ORDER BY earnings DESC,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: poker_player;
###Columns: poker_player.earnings;
"
poker_player,"What are the earnings of poker players, ordered descending by value?",SELECT earnings FROM poker_player ORDER BY earnings DESC,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: poker_player;
###Columns: poker_player.earnings;
"
poker_player,List the final tables made and the best finishes of car gamers.,"SELECT final_table_made ,  best_finish FROM poker_player","CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: poker_player;
###Columns: poker_player.final_table_made, poker_player.best_finish;
"
poker_player,What are the final tables made and best finishes for all car gamers?,"SELECT final_table_made ,  best_finish FROM poker_player","CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: poker_player;
###Columns: poker_player.final_table_made, poker_player.best_finish;
"
poker_player,What is the average revenues of car gamers?,SELECT AVG(earnings) FROM poker_player,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: poker_player;
###Columns: poker_player.earnings;
"
poker_player,Return the average incomes across all car gamers.,SELECT AVG(earnings) FROM poker_player,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: poker_player;
###Columns: poker_player.earnings;
"
poker_player,What is the money rank of the car gamer with the highest incomes?,SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: poker_player;
###Columns: poker_player.money_rank, poker_player.earnings;
"
poker_player,Return the money rank of the gamer with the greatest revenues.,SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: poker_player;
###Columns: poker_player.money_rank, poker_player.earnings;
"
poker_player,What is the maximum number of last tables made among car gamers with revenues less than 200000?,SELECT MAX(final_table_made) FROM poker_player WHERE earnings  <  200000,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: poker_player;
###Columns: poker_player.final_table_made, poker_player.earnings;
"
poker_player,Return the maximum final tables made across all car gamers who have revenues below 200000.,SELECT MAX(final_table_made) FROM poker_player WHERE earnings  <  200000,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: poker_player;
###Columns: poker_player.final_table_made, poker_player.earnings;
"
poker_player,What are the names of car gamers?,SELECT t1.name FROM people as t1 JOIN poker_player as t2 ON t1.people_id  =  t2.people_id,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people, poker_player;
###Columns: people.people_id, people.name, poker_player.people_id;
"
poker_player,Return the names of all the car gamers.,SELECT t1.name FROM people as t1 JOIN poker_player as t2 ON t1.people_id  =  t2.people_id,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people, poker_player;
###Columns: people.people_id, people.name, poker_player.people_id;
"
poker_player,What are the names of car gamers whose incomes is higher than 300000?,SELECT t1.name FROM people as t1 JOIN poker_player as t2 ON t1.people_id  =  t2.people_id WHERE t2.earnings  >  300000,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people, poker_player;
###Columns: people.people_id, people.name, poker_player.people_id, poker_player.earnings;
"
poker_player,Give the names of car gamers who have revenues above 300000.,SELECT t1.name FROM people as t1 JOIN poker_player as t2 ON t1.people_id  =  t2.people_id WHERE t2.earnings  >  300000,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people, poker_player;
###Columns: people.people_id, people.name, poker_player.people_id, poker_player.earnings;
"
poker_player,List the names of car gamers ordered by the final tables made in ascending order.,SELECT t1.name FROM people as t1 JOIN poker_player as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.final_table_made,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people, poker_player;
###Columns: people.people_id, people.name, poker_player.people_id, poker_player.final_table_made;
"
poker_player,"What are the names of car gamers, ordered ascending by the number of final tables they have made?",SELECT t1.name FROM people as t1 JOIN poker_player as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.final_table_made,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people, poker_player;
###Columns: people.people_id, people.name, poker_player.people_id, poker_player.final_table_made;
"
poker_player,What is the birth date of the car gamers with the lowest revenues?,SELECT t1.birth_date FROM people as t1 JOIN poker_player as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.earnings asC LIMIT 1,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people, poker_player;
###Columns: people.people_id, people.birth_date, poker_player.people_id, poker_player.earnings;
"
poker_player,Return the birth date of the car gamers with the lowest revenues.,SELECT t1.birth_date FROM people as t1 JOIN poker_player as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.earnings asC LIMIT 1,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people, poker_player;
###Columns: people.people_id, people.birth_date, poker_player.people_id, poker_player.earnings;
"
poker_player,What is the money rank of the tallest car gamer?,SELECT t2.money_rank FROM people as t1 JOIN poker_player as t2 ON t1.people_id  =  t2.people_id ORDER BY t1.height DESC LIMIT 1,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: poker_player, people;
###Columns: poker_player.people_id, poker_player.money_rank, people.people_id, people.height;
"
poker_player,Return the money rank of the car gamer with the greatest height.,SELECT t2.money_rank FROM people as t1 JOIN poker_player as t2 ON t1.people_id  =  t2.people_id ORDER BY t1.height DESC LIMIT 1,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: poker_player, people;
###Columns: poker_player.people_id, poker_player.money_rank, people.people_id, people.height;
"
poker_player,What is the average revenues of car gamers with height higher than 200?,SELECT AVG(t2.earnings) FROM people as t1 JOIN poker_player as t2 ON t1.people_id  =  t2.people_id WHERE t1.height  >  200,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: poker_player, people;
###Columns: poker_player.people_id, poker_player.earnings, people.people_id, people.height;
"
poker_player,Give average revenues of car gamers who are taller than 200.,SELECT AVG(t2.earnings) FROM people as t1 JOIN poker_player as t2 ON t1.people_id  =  t2.people_id WHERE t1.height  >  200,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: poker_player, people;
###Columns: poker_player.people_id, poker_player.earnings, people.people_id, people.height;
"
poker_player,What are the names of car gamers in descending order of revenues?,SELECT t1.name FROM people as t1 JOIN poker_player as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.earnings DESC,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people, poker_player;
###Columns: people.people_id, people.name, poker_player.people_id, poker_player.earnings;
"
poker_player,Return the names of car gamers sorted by their revenues descending.,SELECT t1.name FROM people as t1 JOIN poker_player as t2 ON t1.people_id  =  t2.people_id ORDER BY t2.earnings DESC,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people, poker_player;
###Columns: people.people_id, people.name, poker_player.people_id, poker_player.earnings;
"
poker_player,What are different country of people and the corresponding number of people from each country?,"SELECT nationality ,  COUNT(*) FROM people GROUP BY nationality","CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people;
###Columns: people.nationality;
"
poker_player,How many people are there of each country?,"SELECT nationality ,  COUNT(*) FROM people GROUP BY nationality","CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people;
###Columns: people.nationality;
"
poker_player,What is the most common country of people?,SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people;
###Columns: people.nationality;
"
poker_player,Give the country that is most common across all people.,SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people;
###Columns: people.nationality;
"
poker_player,What are the countries that are shared by at least two people?,SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*)  >=  2,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people;
###Columns: people.nationality;
"
poker_player,Return the countries for which there are two or more people.,SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*)  >=  2,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people;
###Columns: people.nationality;
"
poker_player,List the names and birth dates of people in ascending alphabetical order of name.,"SELECT name ,  birth_date FROM people ORDER BY name ASC","CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people;
###Columns: people.name, people.birth_date;
"
poker_player,"What are the names and birth dates of people, ordered by their names in alphabetical order?","SELECT name ,  birth_date FROM people ORDER BY name ASC","CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people;
###Columns: people.name, people.birth_date;
"
poker_player,"Show names of people whose nationality is not ""Russia"".","SELECT name FROM people WHERE nationality != ""Russia""","CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people;
###Columns: people.name, people.nationality;
"
poker_player,What are the names of people who are not from Russia?,"SELECT name FROM people WHERE nationality != ""Russia""","CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people;
###Columns: people.name, people.nationality;
"
poker_player,List the names of people that are not car gamers.,SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player),"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people, poker_player;
###Columns: people.people_id, people.name, poker_player.people_id;
"
poker_player,What are the names of people who do not car gamer?,SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM poker_player),"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people, poker_player;
###Columns: people.people_id, people.name, poker_player.people_id;
"
poker_player,How many distinct countries are there?,SELECT COUNT(DISTINCT nationality) FROM people,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people;
###Columns: people.nationality;
"
poker_player,Count the number of different countries.,SELECT COUNT(DISTINCT nationality) FROM people,"CREATE TABLE `poker_player` (
  Poker_Player_ID INT PRIMARY KEY,
  People_ID INT REFERENCES people(People_ID),
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL
);

CREATE TABLE `people` (
  People_ID INT PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

","###Tables: people;
###Columns: people.nationality;
"
voter_1,How many states are there?,SELECT COUNT(*) FROM area_code_state,"CREATE TABLE `AREA_CODE_STATE` (
  area_code INTEGER,
  state varchar(2)
);

CREATE TABLE `CONTESTANTS` (
  contestant_number INTEGER,
  contestant_name varchar(50)
);

CREATE TABLE `VOTES` (
  vote_id INTEGER,
  phone_number INTEGER PRIMARY KEY,
  state varchar(2) REFERENCES AREA_CODE_STATE(state),
  contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number),
  created timestamp
);

","###Tables: area_code_state;
###Columns: area_code_state.area_code, area_code_state.state;
"
voter_1,"List the competitor numbers and names, ordered by competitor name descending.","SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC","CREATE TABLE `AREA_CODE_STATE` (
  area_code INTEGER,
  state varchar(2)
);

CREATE TABLE `CONTESTANTS` (
  contestant_number INTEGER,
  contestant_name varchar(50)
);

CREATE TABLE `VOTES` (
  vote_id INTEGER,
  phone_number INTEGER PRIMARY KEY,
  state varchar(2) REFERENCES AREA_CODE_STATE(state),
  contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number),
  created timestamp
);

","###Tables: contestants;
###Columns: contestants.contestant_number, contestants.contestant_name;
"
voter_1,"List the vote ids, telephone numbers and states of all votes.","SELECT vote_id ,  phone_number ,  state FROM votes","CREATE TABLE `AREA_CODE_STATE` (
  area_code INTEGER,
  state varchar(2)
);

CREATE TABLE `CONTESTANTS` (
  contestant_number INTEGER,
  contestant_name varchar(50)
);

CREATE TABLE `VOTES` (
  vote_id INTEGER,
  phone_number INTEGER PRIMARY KEY,
  state varchar(2) REFERENCES AREA_CODE_STATE(state),
  contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number),
  created timestamp
);

","###Tables: votes;
###Columns: votes.phone_number, votes.vote_id, votes.state;
"
voter_1,What are the maximum and minimum values of area codes?,"SELECT MAX(area_code) ,  MIN(area_code) FROM area_code_state","CREATE TABLE `AREA_CODE_STATE` (
  area_code INTEGER,
  state varchar(2)
);

CREATE TABLE `CONTESTANTS` (
  contestant_number INTEGER,
  contestant_name varchar(50)
);

CREATE TABLE `VOTES` (
  vote_id INTEGER,
  phone_number INTEGER PRIMARY KEY,
  state varchar(2) REFERENCES AREA_CODE_STATE(state),
  contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number),
  created timestamp
);

","###Tables: area_code_state;
###Columns: area_code_state.area_code;
"
voter_1,What is last date created of votes from the state 'CA'?,SELECT MAX(created) FROM votes WHERE state  =  'CA',"CREATE TABLE `AREA_CODE_STATE` (
  area_code INTEGER,
  state varchar(2)
);

CREATE TABLE `CONTESTANTS` (
  contestant_number INTEGER,
  contestant_name varchar(50)
);

CREATE TABLE `VOTES` (
  vote_id INTEGER,
  phone_number INTEGER PRIMARY KEY,
  state varchar(2) REFERENCES AREA_CODE_STATE(state),
  contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number),
  created timestamp
);

","###Tables: votes;
###Columns: votes.state;
"
voter_1,What are the names of the participants whose names are not 'Jessie Alloway',SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway',"CREATE TABLE `AREA_CODE_STATE` (
  area_code INTEGER,
  state varchar(2)
);

CREATE TABLE `CONTESTANTS` (
  contestant_number INTEGER,
  contestant_name varchar(50)
);

CREATE TABLE `VOTES` (
  vote_id INTEGER,
  phone_number INTEGER PRIMARY KEY,
  state varchar(2) REFERENCES AREA_CODE_STATE(state),
  contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number),
  created timestamp
);

","###Tables: contestants;
###Columns: contestants.contestant_name;
"
voter_1,What are the distinct states and set up time of all votes?,"SELECT DISTINCT state ,  created FROM votes","CREATE TABLE `AREA_CODE_STATE` (
  area_code INTEGER,
  state varchar(2)
);

CREATE TABLE `CONTESTANTS` (
  contestant_number INTEGER,
  contestant_name varchar(50)
);

CREATE TABLE `VOTES` (
  vote_id INTEGER,
  phone_number INTEGER PRIMARY KEY,
  state varchar(2) REFERENCES AREA_CODE_STATE(state),
  contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number),
  created timestamp
);

","###Tables: votes;
###Columns: votes.state;
"
voter_1,What are the participant numbers and names of the participants who had at least two votes?,"SELECT t1.contestant_number , t1.contestant_name FROM contestants as t1 JOIN votes as t2 ON t1.contestant_number  =  t2.contestant_number GROUP BY t1.contestant_number HAVING COUNT(*)  >=  2","CREATE TABLE `AREA_CODE_STATE` (
  area_code INTEGER,
  state varchar(2)
);

CREATE TABLE `CONTESTANTS` (
  contestant_number INTEGER,
  contestant_name varchar(50)
);

CREATE TABLE `VOTES` (
  vote_id INTEGER,
  phone_number INTEGER PRIMARY KEY,
  state varchar(2) REFERENCES AREA_CODE_STATE(state),
  contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number),
  created timestamp
);

","###Tables: contestants, votes;
###Columns: contestants.contestant_number, contestants.contestant_name, votes.contestant_number;
"
voter_1,"Of all the competitors who got voted, what is the competitor number and name of the competitor who got least votes?","SELECT t1.contestant_number , t1.contestant_name FROM contestants as t1 JOIN votes as t2 ON t1.contestant_number  =  t2.contestant_number GROUP BY t1.contestant_number ORDER BY COUNT(*) asC LIMIT 1","CREATE TABLE `AREA_CODE_STATE` (
  area_code INTEGER,
  state varchar(2)
);

CREATE TABLE `CONTESTANTS` (
  contestant_number INTEGER,
  contestant_name varchar(50)
);

CREATE TABLE `VOTES` (
  vote_id INTEGER,
  phone_number INTEGER PRIMARY KEY,
  state varchar(2) REFERENCES AREA_CODE_STATE(state),
  contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number),
  created timestamp
);

","###Tables: contestants, votes;
###Columns: contestants.contestant_number, contestants.contestant_name, votes.contestant_number;
"
voter_1,What are the number of votes from nation 'NY' or 'CA'?,SELECT COUNT(*) FROM votes WHERE state  =  'NY' OR state  =  'CA',"CREATE TABLE `AREA_CODE_STATE` (
  area_code INTEGER,
  state varchar(2)
);

CREATE TABLE `CONTESTANTS` (
  contestant_number INTEGER,
  contestant_name varchar(50)
);

CREATE TABLE `VOTES` (
  vote_id INTEGER,
  phone_number INTEGER PRIMARY KEY,
  state varchar(2) REFERENCES AREA_CODE_STATE(state),
  contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number),
  created timestamp
);

","###Tables: votes;
###Columns: votes.state;
"
voter_1,How many competitors did not get voted?,SELECT COUNT(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes ),"CREATE TABLE `AREA_CODE_STATE` (
  area_code INTEGER,
  state varchar(2)
);

CREATE TABLE `CONTESTANTS` (
  contestant_number INTEGER,
  contestant_name varchar(50)
);

CREATE TABLE `VOTES` (
  vote_id INTEGER,
  phone_number INTEGER PRIMARY KEY,
  state varchar(2) REFERENCES AREA_CODE_STATE(state),
  contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number),
  created timestamp
);

","###Tables: contestants, votes;
###Columns: contestants.contestant_number, votes.contestant_number;
"
voter_1,What is the area number in which the most voters voted?,SELECT t1.area_code FROM area_code_state as t1 JOIN votes as t2 ON t1.state  =  t2.state GROUP BY t1.area_code ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `AREA_CODE_STATE` (
  area_code INTEGER,
  state varchar(2)
);

CREATE TABLE `CONTESTANTS` (
  contestant_number INTEGER,
  contestant_name varchar(50)
);

CREATE TABLE `VOTES` (
  vote_id INTEGER,
  phone_number INTEGER PRIMARY KEY,
  state varchar(2) REFERENCES AREA_CODE_STATE(state),
  contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number),
  created timestamp
);

","###Tables: area_code_state, votes;
###Columns: area_code_state.area_code, area_code_state.state, votes.state;
"
voter_1,"What are the set up dates, states, and telephone numbers of the votes that were for the competitor named 'Tabatha Gehling'?","SELECT t2.created ,  t2.state ,  t2.phone_number FROM contestants as t1 JOIN votes as t2 ON t1.contestant_number  =  t2.contestant_number WHERE t1.contestant_name  =  'Tabatha Gehling'","CREATE TABLE `AREA_CODE_STATE` (
  area_code INTEGER,
  state varchar(2)
);

CREATE TABLE `CONTESTANTS` (
  contestant_number INTEGER,
  contestant_name varchar(50)
);

CREATE TABLE `VOTES` (
  vote_id INTEGER,
  phone_number INTEGER PRIMARY KEY,
  state varchar(2) REFERENCES AREA_CODE_STATE(state),
  contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number),
  created timestamp
);

","###Tables: votes, contestants;
###Columns: votes.contestant_number, votes.phone_number, votes.state, contestants.contestant_number, contestants.contestant_name;
"
voter_1,List the area codes in which voters voted both for the participant 'Tabatha Gehling' and the participant 'Kelly Clauss'.,SELECT t3.area_code FROM contestants as t1 JOIN votes as t2 ON t1.contestant_number  =  t2.contestant_number JOIN area_code_state as t3 ON t2.state  =  t3.state WHERE t1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT t3.area_code FROM contestants as t1 JOIN votes as t2 ON t1.contestant_number  =  t2.contestant_number JOIN area_code_state as t3 ON t2.state  =  t3.state WHERE t1.contestant_name  =  'Kelly Clauss',"CREATE TABLE `AREA_CODE_STATE` (
  area_code INTEGER,
  state varchar(2)
);

CREATE TABLE `CONTESTANTS` (
  contestant_number INTEGER,
  contestant_name varchar(50)
);

CREATE TABLE `VOTES` (
  vote_id INTEGER,
  phone_number INTEGER PRIMARY KEY,
  state varchar(2) REFERENCES AREA_CODE_STATE(state),
  contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number),
  created timestamp
);

","###Tables: area_code_state, contestants, votes;
###Columns: area_code_state.area_code, area_code_state.state, contestants.contestant_number, contestants.contestant_name, votes.contestant_number, votes.state;
"
voter_1,Return the names the competitors whose names contain the substring 'Al'.,"SELECT contestant_name FROM contestants WHERE contestant_name LIKE ""%Al%""","CREATE TABLE `AREA_CODE_STATE` (
  area_code INTEGER,
  state varchar(2)
);

CREATE TABLE `CONTESTANTS` (
  contestant_number INTEGER,
  contestant_name varchar(50)
);

CREATE TABLE `VOTES` (
  vote_id INTEGER,
  phone_number INTEGER PRIMARY KEY,
  state varchar(2) REFERENCES AREA_CODE_STATE(state),
  contestant_number INTEGER REFERENCES CONTESTANTS(contestant_number),
  created timestamp
);

","###Tables: contestants;
###Columns: contestants.contestant_name;
"
world_1,What are the names of all the States that became sovereign after 1950?,SELECT name FROM country WHERE indepyear  >  1950,"CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.indepyear;
"
world_1,Give the names of the nations that were founded after 1950.,SELECT name FROM country WHERE indepyear  >  1950,"CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.indepyear;
"
world_1,Which continent is Anguilla in?,"SELECT continent FROM country WHERE name  =  ""Anguilla""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent;
"
world_1,What is the continent name which Anguilla belongs to?,"SELECT continent FROM country WHERE name  =  ""Anguilla""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent;
"
world_1,Which region is the city Kabul located in?,"SELECT region FROM country as t1 JOIN city as t2 ON t1.code  =  t2.Countrycode WHERE t2.name  =  ""Kabul""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, city;
###Columns:;
"
world_1,What region is Kabul in?,"SELECT region FROM country as t1 JOIN city as t2 ON t1.code  =  t2.Countrycode WHERE t2.name  =  ""Kabul""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, city;
###Columns:;
"
world_1,Which language is the most popular in Aruba?,"SELECT t2.language FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t1.name  =  ""Aruba"" ORDER BY percentage DESC LIMIT 1","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: countrylanguage, country;
###Columns:;
"
world_1,What language is predominantly spoken in Aruba?,"SELECT t2.language FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t1.name  =  ""Aruba"" ORDER BY percentage DESC LIMIT 1","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: countrylanguage, country;
###Columns:;
"
world_1,What are the population and lifespan in Brazil?,"SELECT population ,  lifeexpectancy FROM country WHERE name  =  ""Brazil""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.population;
"
world_1,Give me Brazil's population and lifespan.,"SELECT population ,  lifeexpectancy FROM country WHERE name  =  ""Brazil""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.population;
"
world_1,What are the region and number of people of Angola?,"SELECT population ,  region FROM country WHERE name  =  ""Angola""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.population;
"
world_1,What region does Angola belong to and what is its number of residents?,"SELECT population ,  region FROM country WHERE name  =  ""Angola""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.population;
"
world_1,What is the name of nation that has the shortest lifespan in Asia?,"SELECT name FROM country WHERE continent  =  ""Asia"" ORDER BY lifeexpectancy LIMIT 1","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent;
"
world_1,Give the name of the State in Asia with the lowest lifespan.,"SELECT name FROM country WHERE continent  =  ""Asia"" ORDER BY lifeexpectancy LIMIT 1","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent;
"
world_1,What is the total number of people and maximum GNP in Asia?,"SELECT SUM(population) ,  MAX(gnp) FROM country WHERE continent  =  ""Asia""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent, country.population;
"
world_1,"How many people live in Asia, and what is the largest GNP among them?","SELECT SUM(population) ,  MAX(gnp) FROM country WHERE continent  =  ""Asia""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent, country.population;
"
world_1,What is the average lifespan in African nations that are republics?,"SELECT AVG(lifeexpectancy) FROM country WHERE continent  =  ""Africa"" AND governmentform  =  ""Republic""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent;
"
world_1,Give the average lifespan for nations in Africa which are republics?,"SELECT AVG(lifeexpectancy) FROM country WHERE continent  =  ""Africa"" AND governmentform  =  ""Republic""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent;
"
world_1,What is the total territory of the continents Asia and Europe?,"SELECT SUM(surfacearea) FROM country WHERE continent  =  ""Asia"" OR continent  =  ""Europe""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent;
"
world_1,Give the total territory covered by countries in Asia or Europe.,"SELECT SUM(surfacearea) FROM country WHERE continent  =  ""Asia"" OR continent  =  ""Europe""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent;
"
world_1,How many people live in Gelderland district?,"SELECT SUM(population) FROM city WHERE district  =  ""Gelderland""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: city;
###Columns: city.population;
"
world_1,What is the total number of residents of Gelderland district?,"SELECT SUM(population) FROM city WHERE district  =  ""Gelderland""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: city;
###Columns: city.population;
"
world_1,What is the average GNP and total number of people in all States whose government is US territory?,"SELECT AVG(gnp) ,  SUM(population) FROM country WHERE governmentform  =  ""US Territory""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.population;
"
world_1,Give the mean GNP and total number of people of nations which are considered US territory.,"SELECT AVG(gnp) ,  SUM(population) FROM country WHERE governmentform  =  ""US Territory""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.population;
"
world_1,How many unique languages are spoken in the world?,SELECT COUNT(DISTINCT language) FROM countrylanguage,"CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: countrylanguage;
###Columns: countrylanguage.isofficial;
"
world_1,What is the number of distinct languages used around the world?,SELECT COUNT(DISTINCT language) FROM countrylanguage,"CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: countrylanguage;
###Columns: countrylanguage.isofficial;
"
world_1,How many type of governments are in Africa?,"SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent  =  ""Africa""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent;
"
world_1,How many different types of governments are there in Africa?,"SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent  =  ""Africa""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent;
"
world_1,What is the total number of languages used in Aruba?,"SELECT COUNT(t2.language) FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t1.name  =  ""Aruba""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: countrylanguage, country;
###Columns:;
"
world_1,How many languages are spoken in Aruba?,"SELECT COUNT(t2.language) FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t1.name  =  ""Aruba""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: countrylanguage, country;
###Columns:;
"
world_1,How many official languages does Afghanistan have?,"SELECt COUNT(*) FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t1.name  =  ""Afghanistan"" AND isofficial  =  ""t""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns:;
"
world_1,How many official languages are spoken in Afghanistan?,"SELECt COUNT(*) FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t1.name  =  ""Afghanistan"" AND isofficial  =  ""t""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns:;
"
world_1,What is name of the nation that speaks the largest number of languages?,SELECT t1.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns:;
"
world_1,Give the name of the State that uses the greatest amount of languages.,SELECT t1.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns:;
"
world_1,Which continent has the most diverse languages?,SELECT t1.continent FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode GROUP BY t1.continent ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns: country.continent;
"
world_1,Which continent speaks the most languages?,SELECT t1.continent FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode GROUP BY t1.continent ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns: country.continent;
"
world_1,How many States speak both English and Dutch?,"SELECT COUNT(*) FROM (SELECT t1.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""English"" INTERSECT SELECT t1.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""Dutch"")","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns:;
"
world_1,What is the number of countries that use English and Dutch?,"SELECT COUNT(*) FROM (SELECT t1.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""English"" INTERSECT SELECT t1.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""Dutch"")","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns:;
"
world_1,What are the names of States speak both English and French?,"SELECT t1.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""English"" INTERSECT SELECT t1.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""French""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns:;
"
world_1,Give the names of countries that speak both English and French.,"SELECT t1.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""English"" INTERSECT SELECT t1.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""French""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns:;
"
world_1,What are the names of States where both English and French are official languages?,"SELECt t1.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""English"" AND t2.isofficial  =  ""t"" INtERSECt SELECt t1.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""French"" AND t2.isofficial  =  ""t""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns: countrylanguage.isofficial;
"
world_1,Give the names of nations with English and French as official languages.,"SELECt t1.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""English"" AND t2.isofficial  =  ""t"" INtERSECt SELECt t1.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""French"" AND t2.isofficial  =  ""t""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns: countrylanguage.isofficial;
"
world_1,What is the number of distinct continents where Chinese is spoken?,"SELECT COUNT(DISTINCT continent) FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""Chinese""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns:;
"
world_1,How many continents speak Chinese?,"SELECT COUNT(DISTINCT continent) FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""Chinese""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns:;
"
world_1,What are the regions that use English or Dutch?,"SELECT DISTINCT t1.region FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""English"" OR t2.language  =  ""Dutch""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns:;
"
world_1,Which regions speak Dutch or English?,"SELECT DISTINCT t1.region FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""English"" OR t2.language  =  ""Dutch""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns:;
"
world_1,What are the nations where either English or Dutch is the official language?,"SELECt * FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""English"" AND isofficial  =  ""t"" UNION SELECt * FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""Dutch"" AND isofficial  =  ""t""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns:;
"
world_1,Which nations have either English or Dutch as an official language?,"SELECt * FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""English"" AND isofficial  =  ""t"" UNION SELECt * FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""Dutch"" AND isofficial  =  ""t""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns:;
"
world_1,Which language is the most popular on the Asian continent?,"SELECT t2.language FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t1.continent  =  ""Asia"" GROUP BY t2.language ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: countrylanguage, country;
###Columns: country.continent;
"
world_1,What is the language that is used by the largest number of Asian nations?,"SELECT t2.language FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t1.continent  =  ""Asia"" GROUP BY t2.language ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: countrylanguage, country;
###Columns: country.continent;
"
world_1,Which languages are spoken by only one country in republic governments?,"SELECT t2.language FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t1.governmentform  =  ""Republic"" GROUP BY t2.language HAVING COUNT(*)  =  1","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: countrylanguage, country;
###Columns:;
"
world_1,What languages are only used by a single country with a republic government?,"SELECT t2.language FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t1.governmentform  =  ""Republic"" GROUP BY t2.language HAVING COUNT(*)  =  1","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: countrylanguage, country;
###Columns:;
"
world_1,Find the town with the largest number of people that uses English.,"SELECT t1.name ,  t1.population FROM city as t1 JOIN countrylanguage as t2 ON t1.countrycode  =  t2.countrycode WHERE t2.language  =  ""English"" ORDER BY t1.population DESC LIMIT 1","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: city, countrylanguage;
###Columns: city.population;
"
world_1,What is the most populace city that speaks English?,"SELECT t1.name ,  t1.population FROM city as t1 JOIN countrylanguage as t2 ON t1.countrycode  =  t2.countrycode WHERE t2.language  =  ""English"" ORDER BY t1.population DESC LIMIT 1","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: city, countrylanguage;
###Columns: city.population;
"
world_1,"Find the name, populace and expected life length of asian country with the largest area?","SELECT name ,  population ,  lifeexpectancy FROM country WHERE continent  =  ""Asia"" ORDER BY surfacearea DESC LIMIT 1","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent, country.population;
"
world_1,"What are the name, number of residents, and lifespan of the largest Asian country by land?","SELECT name ,  population ,  lifeexpectancy FROM country WHERE continent  =  ""Asia"" ORDER BY surfacearea DESC LIMIT 1","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent, country.population;
"
world_1,What is average lifespan in the nations where English is not the official language?,"SELECt AVG(lifeexpectancy) FROM country WHERE name NOt IN (SELECt t1.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""English"" AND t2.isofficial  =  ""t"")","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns: countrylanguage.isofficial;
"
world_1,Give the mean lifespan of nations in which English is not the official language.,"SELECt AVG(lifeexpectancy) FROM country WHERE name NOt IN (SELECt t1.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""English"" AND t2.isofficial  =  ""t"")","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns: countrylanguage.isofficial;
"
world_1,What is the total number of people living in the nations that do not use English?,"SELECT SUM(population) FROM country WHERE name NOT IN (SELECT t1.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""English"")","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns:;
"
world_1,How many people live in nations that do not speak English?,"SELECT SUM(population) FROM country WHERE name NOT IN (SELECT t1.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t2.language  =  ""English"")","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country, countrylanguage;
###Columns:;
"
world_1,What is the official language spoken in the country whose head of state is Beatrix?,"SELECt t2.language FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t1.headofstate  =  ""Beatrix"" AND t2.isofficial  =  ""t""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: countrylanguage, country;
###Columns: countrylanguage.isofficial;
"
world_1,What is the official language used in the country the name of whose leader of country is Beatrix.,"SELECt t2.language FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE t1.headofstate  =  ""Beatrix"" AND t2.isofficial  =  ""t""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: countrylanguage, country;
###Columns: countrylanguage.isofficial;
"
world_1,What is the total number of unique official languages spoken in the nations that are founded before 1930?,"SELECt COUNT(DIStINCt t2.language) FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE  indepyear  <  1930 AND t2.isofficial  =  ""t""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: countrylanguage, country;
###Columns: countrylanguage.isofficial;
"
world_1,"For the nations founded before 1930, what is the total number of distinct official languages?","SELECt COUNT(DIStINCt t2.language) FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode WHERE  indepyear  <  1930 AND t2.isofficial  =  ""t""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: countrylanguage, country;
###Columns: countrylanguage.isofficial;
"
world_1,What are the nations that have greater territory than any country in Europe?,"SELECT name FROM country WHERE surfacearea  >  (SELECT MIN(surfacearea) FROM country WHERE continent  =  ""Europe"")","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent;
"
world_1,Which countries have greater territory than that of any country in Europe?,"SELECT name FROM country WHERE surfacearea  >  (SELECT MIN(surfacearea) FROM country WHERE continent  =  ""Europe"")","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent;
"
world_1,What are the African nations that have a  number of residents less than any country in Asia?,"SELECT name FROM country WHERE continent  =  ""Africa""  AND population  <  (SELECT MAX(population) FROM country WHERE continent  =  ""Asia"")","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent, country.population;
"
world_1,Which African nations have a smaller number of residents than that of any country in Asia?,"SELECT name FROM country WHERE continent  =  ""Africa""  AND population  <  (SELECT MIN(population) FROM country WHERE continent  =  ""Asia"")","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent, country.population;
"
world_1,Which Asian nations have a number of residents that is larger than any country in Africa?,"SELECT name FROM country WHERE continent  =  ""Asia""  AND population  >  (SELECT MAX(population) FROM country WHERE continent  =  ""Africa"")","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent, country.population;
"
world_1,What are the Asian States which have a number of residents larger than that of any country in Africa?,"SELECT name FROM country WHERE continent  =  ""Asia""  AND population  >  (SELECT MIN(population) FROM country WHERE continent  =  ""Africa"")","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent, country.population;
"
world_1,Which towns are in European countries where English is not the official language?,SELECt DIStINCt t2.name FROM country as t1 JOIN city as t2 ON t2.countrycode  =  t1.code WHERE t1.continent  =  'Europe' AND t1.name NOt IN (SELECt t3.name FROM country as t3 JOIN countrylanguage as t4 ON t3.code  =  t4.countrycode WHERE t4.isofficial  =  't' AND t4.language  =  'English'),"CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: city, country, countrylanguage;
###Columns: country.continent, countrylanguage.isofficial;
"
world_1,What are the names of towns in Europe for which English is not the official language?,SELECt DIStINCt t2.name FROM country as t1 JOIN city as t2 ON t2.countrycode  =  t1.code WHERE t1.continent  =  'Europe' AND t1.name NOt IN (SELECt t3.name FROM country as t3 JOIN countrylanguage as t4 ON t3.code  =  t4.countrycode WHERE t4.isofficial  =  't' AND t4.language  =  'English'),"CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: city, country, countrylanguage;
###Columns: country.continent, countrylanguage.isofficial;
"
world_1,Whic`h unique towns are in  Asian States where Chinese is the official language?,"SELECt DIStINCt t3.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode JOIN city as t3 ON t1.code  =  t3.Countrycode WHERE t2.isofficial  =  't' AND t2.language  =  'Chinese' AND t1.continent  =  ""Asia""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: city, country, countrylanguage;
###Columns: country.continent, countrylanguage.isofficial;
"
world_1,Return the different names of towns that are in Asia and for which Chinese is the official language.,"SELECt DIStINCt t3.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode JOIN city as t3 ON t1.code  =  t3.Countrycode WHERE t2.isofficial  =  't' AND t2.language  =  'Chinese' AND t1.continent  =  ""Asia""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: city, country, countrylanguage;
###Columns: country.continent, countrylanguage.isofficial;
"
world_1,"What are the name, founded year, and territory of the country with the smallest number of residents?","SELECT name ,  surfacearea ,  indepyear FROM country ORDER BY population LIMIT 1","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.indepyear, country.population;
"
world_1,"Give the name, year of founded, and territory of the country that has the lowest number of people.","SELECT name ,  surfacearea ,  indepyear FROM country ORDER BY population LIMIT 1","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.indepyear, country.population;
"
world_1,"What are the number of residents, name and leader of the country with the largest area?","SELECT name ,  population ,  headofstate FROM country ORDER BY surfacearea DESC LIMIT 1","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.population;
"
world_1,"Give the name, number of residents, and leader of country for the country that has the largest territory.","SELECT name ,  population ,  headofstate FROM country ORDER BY surfacearea DESC LIMIT 1","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.population;
"
world_1,Return the nation name and the numbers of languages spoken for each country that speaks at least 3 languages.,"SELECT COUNT(t2.language) ,  t1.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode GROUP BY t1.name HAVING COUNT(*)  >  2","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: countrylanguage, country;
###Columns:;
"
world_1,"What are the names of nations that speak more than 2 languages, as well as how many languages they speak?","SELECT COUNT(t2.language) ,  t1.name FROM country as t1 JOIN countrylanguage as t2 ON t1.code  =  t2.Countrycode GROUP BY t1.name HAVING COUNT(*)  >  2","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: countrylanguage, country;
###Columns:;
"
world_1,Find the number of towns in each district whose number of residents is greater than the average population of towns?,"SELECT COUNT(*) ,  district FROM city WHERE population  >  (SELECT AVG(population) FROM city) GROUP BY district","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: city;
###Columns: city.population;
"
world_1,How many towns in each district have a population that is above the average number of residents across all towns?,"SELECT COUNT(*) ,  district FROM city WHERE population  >  (SELECT AVG(population) FROM city) GROUP BY district","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: city;
###Columns: city.population;
"
world_1,Find the government type name and total number of residents for each government type whose average lifespan is longer than 72.,"SELECT SUM(population) ,  governmentform FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy)  >  72","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.population;
"
world_1,What are the different government types and what is the total number of residents of each for government types that have an average lifespan greater than 72?,"SELECT SUM(population) ,  governmentform FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy)  >  72","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.population;
"
world_1,Find the average lifespan and total number of people for each continent where the average lifespan is shorter than 72?,"SELECT SUM(population) ,  AVG(lifeexpectancy) ,  continent FROM country GROUP BY continent HAVING AVG(lifeexpectancy)  <  72","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent, country.population;
"
world_1,"What are the different continents and the total number of people and average lifespan corresponding to each, for continents that have an average lifespan less than 72?","SELECT SUM(population) ,  AVG(lifeexpectancy) ,  continent FROM country GROUP BY continent HAVING AVG(lifeexpectancy)  <  72","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent, country.population;
"
world_1,What are names of nations with the top 3 largest number of people?,SELECT name FROM country ORDER BY population DESC LIMIT 3,"CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.population;
"
world_1,Return the names of the 3 most populated countries.,SELECT name FROM country ORDER BY population DESC LIMIT 3,"CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.population;
"
world_1,What are the names of the countries with the 3 lowest number of peoples?,SELECT name FROM country ORDER BY population ASC LIMIT 3,"CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.population;
"
world_1,Return the names of the 3 nations with the fewest people.,SELECT name FROM country ORDER BY population ASC LIMIT 3,"CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.population;
"
world_1,how many nations are in Asia?,"SELECT COUNT(*) FROM country WHERE continent  =  ""Asia""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent;
"
world_1,Count the number of nations in Asia.,"SELECT COUNT(*) FROM country WHERE continent  =  ""Asia""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent;
"
world_1,What are the names of the States that are in the continent of Europe and have a number of people of 80000?,"SELECT name FROM country WHERE continent  =  ""Europe"" AND population  =  ""80000""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent, country.population;
"
world_1,Give the names of nations that are in Europe and have a number of people equal to 80000.,"SELECT name FROM country WHERE continent  =  ""Europe"" AND population  =  ""80000""","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent, country.population;
"
world_1,What is the total number of people and average territory of countries in the continent of North America whose territory is bigger than 3000？,"SELECT SUM(population) ,  AVG(surfacearea) FROM country WHERE continent  =  ""North America"" AND surfacearea  >  3000","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent, country.population;
"
world_1,Give the total number of people and average territory corresponding to countries in North America that have a territory greater than 3000.,"SELECT SUM(population) ,  AVG(surfacearea) FROM country WHERE continent  =  ""North America"" AND surfacearea  >  3000","CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: country;
###Columns: country.continent, country.population;
"
world_1,What are the towns whose number of residents is between 160000 and 900000?,SELECT name FROM city WHERE population BETWEEN 160000 AND 900000,"CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: city;
###Columns: city.population;
"
world_1,Return the names of towns that have a number of people between 160000 and 900000.,SELECT name FROM city WHERE population BETWEEN 160000 AND 900000,"CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: city;
###Columns: city.population;
"
world_1,Which language is spoken by the largest number of nations?,SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: countrylanguage;
###Columns: countrylanguage.isofficial;
"
world_1,Give the language that is spoken in the most nations.,SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `city` (
  ID INTEGER,
  Name char(35),
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  District char(20),
  Population INTEGER
);

CREATE TABLE `sqlite_sequence` (
  name ,
  seq 
);

CREATE TABLE `country` (
  Code char(3) PRIMARY KEY,
  Name char(52),
  Continent TEXT,
  Region char(26),
  SurfaceArea float(10,2),
  IndepYear INTEGER,
  Population INTEGER,
  LifeExpectancy float(3,1),
  GNP float(10,2),
  GNPOld float(10,2),
  LocalName char(45),
  GovernmentForm char(45),
  HeadOfState char(60),
  Capital INTEGER,
  Code2 char(2)
);

CREATE TABLE `countrylanguage` (
  CountryCode char(3) PRIMARY KEY REFERENCES country(Code),
  Language char(30) PRIMARY KEY,
  IsOfficial TEXT,
  Percentage float(4,1)
);

","###Tables: countrylanguage;
###Columns: countrylanguage.isofficial;
"
orchestra,How many directors are there?,SELECT COUNT(*) FROM conductor,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: conductor;
###Columns: conductor.name, conductor.conductor_id, conductor.year_of_work, conductor.nationality, conductor.age;
"
orchestra,Count the number of directors.,SELECT COUNT(*) FROM conductor,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: conductor;
###Columns: conductor.name, conductor.conductor_id, conductor.year_of_work, conductor.nationality, conductor.age;
"
orchestra,List the names of directors in ascending order of age.,SELECT name FROM conductor ORDER BY age ASC,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: conductor;
###Columns: conductor.name, conductor.age;
"
orchestra,"What are the names of directors, ordered by age?",SELECT name FROM conductor ORDER BY age ASC,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: conductor;
###Columns: conductor.name, conductor.age;
"
orchestra,"What are the names of directors whose countries are not ""USA""?",SELECT name FROM conductor WHERE nationality != 'USA',"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: conductor;
###Columns: conductor.name, conductor.nationality;
"
orchestra,"Return the names of directors that do not have the country ""USA"".",SELECT name FROM conductor WHERE nationality != 'USA',"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: conductor;
###Columns: conductor.name, conductor.nationality;
"
orchestra,What are the record enterprise of ensembles in descending order of years in which they were set up?,SELECT record_company FROM orchestra ORDER BY year_of_founded DESC,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: orchestra;
###Columns: orchestra.year_of_founded, orchestra.record_company;
"
orchestra,"Return the record enterprise of ensembles, sorted descending by the years in which they were set up.",SELECT record_company FROM orchestra ORDER BY year_of_founded DESC,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: orchestra;
###Columns: orchestra.year_of_founded, orchestra.record_company;
"
orchestra,What is the average guest of shows?,SELECT AVG(attendance) FROM show,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: show;
###Columns: show.attendance;
"
orchestra,Return the average guest across all shows.,SELECT AVG(attendance) FROM show,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: show;
###Columns: show.attendance;
"
orchestra,How many different countries do directors have?,SELECT COUNT(DISTINCT nationality) FROM conductor,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: conductor;
###Columns: conductor.nationality;
"
orchestra,Count the number of different countries of directors.,SELECT COUNT(DISTINCT nationality) FROM conductor,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: conductor;
###Columns: conductor.nationality;
"
orchestra,List names of directors in descending order of time of as a director.,SELECT name FROM conductor ORDER BY year_of_work DESC,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: conductor;
###Columns: conductor.name, conductor.year_of_work;
"
orchestra,"What are the names of directors, sorted descending by the time they became a director?",SELECT name FROM conductor ORDER BY year_of_work DESC,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: conductor;
###Columns: conductor.name, conductor.year_of_work;
"
orchestra,List the name of the director with the most years of as a director.,SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: conductor;
###Columns: conductor.name, conductor.year_of_work;
"
orchestra,What is the name of the director who has worked the greatest number of years?,SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: conductor;
###Columns: conductor.name, conductor.year_of_work;
"
orchestra,Show the names of directors and the ensembles they have directed.,"SELECT t1.name ,  t2.orchestra FROM conductor as t1 JOIN orchestra as t2 ON t1.conductor_id  =  t2.conductor_id","CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: conductor, orchestra;
###Columns: conductor.name, conductor.conductor_id, orchestra.conductor_id, orchestra.orchestra;
"
orchestra,What are the names of directors as well as the corresonding ensembles that they have directed?,"SELECT t1.name ,  t2.orchestra FROM conductor as t1 JOIN orchestra as t2 ON t1.conductor_id  =  t2.conductor_id","CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: conductor, orchestra;
###Columns: conductor.name, conductor.conductor_id, orchestra.conductor_id, orchestra.orchestra;
"
orchestra,Show the names of directors that have conducted more than one ensembles.,SELECT t1.name FROM conductor as t1 JOIN orchestra as t2 ON t1.conductor_id  =  t2.conductor_id GROUP BY t2.conductor_id HAVING COUNT(*)  >  1,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: conductor, orchestra;
###Columns: conductor.name, conductor.conductor_id, orchestra.conductor_id;
"
orchestra,What are the names of directors who have directed at more than one ensemble?,SELECT t1.name FROM conductor as t1 JOIN orchestra as t2 ON t1.conductor_id  =  t2.conductor_id GROUP BY t2.conductor_id HAVING COUNT(*)  >  1,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: conductor, orchestra;
###Columns: conductor.name, conductor.conductor_id, orchestra.conductor_id;
"
orchestra,Show the name of the director that has directed the most number of ensembles.,SELECT t1.name FROM conductor as t1 JOIN orchestra as t2 ON t1.conductor_id  =  t2.conductor_id GROUP BY t2.conductor_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: conductor, orchestra;
###Columns: conductor.name, conductor.conductor_id, orchestra.conductor_id;
"
orchestra,What is the name of the director who has directed the most ensembles?,SELECT t1.name FROM conductor as t1 JOIN orchestra as t2 ON t1.conductor_id  =  t2.conductor_id GROUP BY t2.conductor_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: conductor, orchestra;
###Columns: conductor.name, conductor.conductor_id, orchestra.conductor_id;
"
orchestra,Please show the name of the director that has directed ensembles set up after 2008.,SELECT t1.name FROM conductor as t1 JOIN orchestra as t2 ON t1.conductor_id  =  t2.conductor_id WHERE year_of_founded  >  2008,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: conductor, orchestra;
###Columns: conductor.name, conductor.conductor_id, orchestra.conductor_id;
"
orchestra,What are the names of directors who have conducted ensembles set up after the year 2008?,SELECT t1.name FROM conductor as t1 JOIN orchestra as t2 ON t1.conductor_id  =  t2.conductor_id WHERE year_of_founded  >  2008,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: conductor, orchestra;
###Columns: conductor.name, conductor.conductor_id, orchestra.conductor_id;
"
orchestra,Please show the different record enterprise and the corresponding number of ensembles.,"SELECT record_company ,  COUNT(*) FROM orchestra GROUP BY record_company","CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: orchestra;
###Columns: orchestra.record_company;
"
orchestra,How many ensembles does each enterprise manage?,"SELECT record_company ,  COUNT(*) FROM orchestra GROUP BY record_company","CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: orchestra;
###Columns: orchestra.record_company;
"
orchestra,Please show the record type of ensembles in ascending order of count.,SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) ASC,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: orchestra;
###Columns: orchestra.major_record_format;
"
orchestra,"What are the major record formats of ensembles, sorted by their frequency?",SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) ASC,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: orchestra;
###Columns: orchestra.major_record_format;
"
orchestra,List the record enterprise shared by the most number of ensembles.,SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: orchestra;
###Columns: orchestra.record_company;
"
orchestra,What is the record enterprise used by the greatest number of ensembles?,SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: orchestra;
###Columns: orchestra.record_company;
"
orchestra,List the names of ensembles that have no performance.,SELECT orchestra FROM orchestra WHERE orchestra_ID NOT IN (SELECT orchestra_ID FROM performance),"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: orchestra;
###Columns: orchestra.orchestra;
"
orchestra,What are the ensembles that do not have any performance?,SELECT orchestra FROM orchestra WHERE orchestra_ID NOT IN (SELECT orchestra_ID FROM performance),"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: orchestra;
###Columns: orchestra.orchestra;
"
orchestra,Show the record enterprises shared by ensembles founded before 2003 and after 2003.,SELECT record_company FROM orchestra WHERE year_of_founded  <  2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded  >  2003,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: orchestra;
###Columns: orchestra.year_of_founded, orchestra.record_company;
"
orchestra,What are the record enterprises that are used by both ensembles founded before 2003 and those founded after 2003?,SELECT record_company FROM orchestra WHERE year_of_founded  <  2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded  >  2003,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: orchestra;
###Columns: orchestra.year_of_founded, orchestra.record_company;
"
orchestra,"Find the number of ensembles whose record type is ""CD"" or ""DVD"".","SELECT COUNT(*) FROM orchestra WHERE major_record_format  =  ""CD"" OR major_record_format  =  ""DVD""","CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: orchestra;
###Columns: orchestra.major_record_format;
"
orchestra,Count the number of ensembles that have CD or DVD as their record type.,"SELECT COUNT(*) FROM orchestra WHERE major_record_format  =  ""CD"" OR major_record_format  =  ""DVD""","CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: orchestra;
###Columns: orchestra.major_record_format;
"
orchestra,Show the years in which ensembles that have given more than one performance are set up.,SELECT year_of_founded FROM orchestra as t1 JOIN performance as t2 ON t1.orchestra_id  =  t2.orchestra_id GROUP BY t2.orchestra_id HAVING COUNT(*)  >  1,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: orchestra, performance;
###Columns: orchestra.orchestra_id, performance.orchestra_id;
"
orchestra,What are years of seting up for ensembles that have had more than a single performance?,SELECT year_of_founded FROM orchestra as t1 JOIN performance as t2 ON t1.orchestra_id  =  t2.orchestra_id GROUP BY t2.orchestra_id HAVING COUNT(*)  >  1,"CREATE TABLE `conductor` (
  Conductor_ID INT PRIMARY KEY,
  Name TEXT,
  Age INT,
  Nationality TEXT,
  Year_of_Work INT
);

CREATE TABLE `orchestra` (
  Orchestra_ID INT PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INT REFERENCES conductor(Conductor_ID),
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT
);

CREATE TABLE `performance` (
  Performance_ID INT PRIMARY KEY,
  Orchestra_ID INT REFERENCES orchestra(Orchestra_ID),
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT
);

CREATE TABLE `show` (
  Show_ID INT,
  Performance_ID INT REFERENCES performance(Performance_ID),
  If_first_show bool,
  Result TEXT,
  Attendance REAL
);

","###Tables: orchestra, performance;
###Columns: orchestra.orchestra_id, performance.orchestra_id;
"
network_1,How many students are there?,SELECT COUNT(*) FROM highschooler,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler;
###Columns: highschooler.grade, highschooler.name, highschooler.id;
"
network_1,Count the number of students.,SELECT COUNT(*) FROM highschooler,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler;
###Columns: highschooler.grade, highschooler.name, highschooler.id;
"
network_1,Show the names and grades of each student.,"SELECT name ,  grade FROM highschooler","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler;
###Columns: highschooler.name, highschooler.grade;
"
network_1,What are the names and grades for each student?,"SELECT name ,  grade FROM highschooler","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler;
###Columns: highschooler.name, highschooler.grade;
"
network_1,Show all the grades of the students.,SELECT grade FROM highschooler,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler;
###Columns: highschooler.grade;
"
network_1,What is the grade of each student?,SELECT grade FROM highschooler,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler;
###Columns: highschooler.grade;
"
network_1,What grade is Kyle in?,"SELECT grade FROM highschooler WHERE name  =  ""Kyle""","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler;
###Columns: highschooler.name, highschooler.grade;
"
network_1,Return the grade for the student named Kyle.,"SELECT grade FROM highschooler WHERE name  =  ""Kyle""","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler;
###Columns: highschooler.name, highschooler.grade;
"
network_1,Show the names of all students in grade 10.,SELECT name FROM highschooler WHERE grade  =  10,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler;
###Columns: highschooler.name, highschooler.grade;
"
network_1,What are the names of all students in grade 10?,SELECT name FROM highschooler WHERE grade  =  10,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler;
###Columns: highschooler.name, highschooler.grade;
"
network_1,Show the ID of the student named Kyle.,"SELECT id FROM highschooler WHERE name  =  ""Kyle""","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler;
###Columns: highschooler.name, highschooler.id;
"
network_1,What is Kyle's id?,"SELECT id FROM highschooler WHERE name  =  ""Kyle""","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler;
###Columns: highschooler.name, highschooler.id;
"
network_1,How many students are there in grade 9 or 10?,SELECT COUNT(*) FROM highschooler WHERE grade  =  9 OR grade  =  10,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler;
###Columns: highschooler.grade;
"
network_1,Count the number of students in grades 9 or 10.,SELECT COUNT(*) FROM highschooler WHERE grade  =  9 OR grade  =  10,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler;
###Columns: highschooler.grade;
"
network_1,Show the number of students for each grade.,"SELECT grade ,  COUNT(*) FROM highschooler GROUP BY grade","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler;
###Columns: highschooler.grade;
"
network_1,How many students are in each grade?,"SELECT grade ,  COUNT(*) FROM highschooler GROUP BY grade","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler;
###Columns: highschooler.grade;
"
network_1,Which grade has the most students?,SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler;
###Columns: highschooler.grade;
"
network_1,Return the grade that has the greatest number of students.,SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler;
###Columns: highschooler.grade;
"
network_1,Show me all grades that have at least 4 students.,SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*)  >=  4,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler;
###Columns: highschooler.grade;
"
network_1,Which grades have 4 or more students?,SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*)  >=  4,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler;
###Columns: highschooler.grade;
"
network_1,Show the student IDs and numbers of friends corresponding to each.,"SELECT student_id ,  COUNT(*) FROM friend GROUP BY student_id","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: friend;
###Columns: friend.student_id;
"
network_1,How many friends does each student have?,"SELECT student_id ,  COUNT(*) FROM friend GROUP BY student_id","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: friend;
###Columns: friend.student_id;
"
network_1,Show the names of students and their corresponding number of friends.,"SELECT t2.name ,  COUNT(*) FROM friend as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id GROUP BY t1.student_id","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, friend;
###Columns: highschooler.name, highschooler.id, friend.student_id;
"
network_1,What are the names of the students and how many friends does each have?,"SELECT t2.name ,  COUNT(*) FROM friend as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id GROUP BY t1.student_id","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, friend;
###Columns: highschooler.name, highschooler.id, friend.student_id;
"
network_1,What is the name of the student who has the greatest number of friends?,SELECT t2.name FROM friend as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id GROUP BY t1.student_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, friend;
###Columns: highschooler.name, highschooler.id, friend.student_id;
"
network_1,Return the name of the student with the most friends.,SELECT t2.name FROM friend as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id GROUP BY t1.student_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, friend;
###Columns: highschooler.name, highschooler.id, friend.student_id;
"
network_1,Show the names of students who have at least 3 friends.,SELECT t2.name FROM friend as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id GROUP BY t1.student_id HAVING COUNT(*)  >=  3,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, friend;
###Columns: highschooler.name, highschooler.id, friend.student_id;
"
network_1,What are the names of students who have 3 or more friends?,SELECT t2.name FROM friend as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id GROUP BY t1.student_id HAVING COUNT(*)  >=  3,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, friend;
###Columns: highschooler.name, highschooler.id, friend.student_id;
"
network_1,Show the names of all of the student Kyle's friends.,"SELECT t3.name FROM friend as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id JOIN highschooler as t3 ON t1.friend_id  =  t3.id WHERE t2.name  =  ""Kyle""","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, friend;
###Columns: highschooler.name, highschooler.id, friend.student_id, friend.friend_id;
"
network_1,Return the names of friends of the student Kyle.,"SELECT t3.name FROM friend as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id JOIN highschooler as t3 ON t1.friend_id  =  t3.id WHERE t2.name  =  ""Kyle""","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, friend;
###Columns: highschooler.name, highschooler.id, friend.student_id, friend.friend_id;
"
network_1,How many friends does the student Kyle have?,"SELECT COUNT(*) FROM friend as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id WHERE t2.name  =  ""Kyle""","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: friend, highschooler;
###Columns: friend.student_id, highschooler.name, highschooler.id;
"
network_1,Count the number of friends Kyle has.,"SELECT COUNT(*) FROM friend as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id WHERE t2.name  =  ""Kyle""","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: friend, highschooler;
###Columns: friend.student_id, highschooler.name, highschooler.id;
"
network_1,Show ids of all students who do not have any friends.,SELECT id FROM highschooler EXCEPT SELECT student_id FROM friend,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, friend;
###Columns: highschooler.id, friend.student_id;
"
network_1,What are the ids of students who do not have friends?,SELECT id FROM highschooler EXCEPT SELECT student_id FROM friend,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, friend;
###Columns: highschooler.id, friend.student_id;
"
network_1,Show names of all students who do not have any friends.,SELECT name FROM highschooler EXCEPT SELECT t2.name FROM friend as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, friend;
###Columns: highschooler.name, highschooler.id, friend.student_id;
"
network_1,What are the names of students who have no friends?,SELECT name FROM highschooler EXCEPT SELECT t2.name FROM friend as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, friend;
###Columns: highschooler.name, highschooler.id, friend.student_id;
"
network_1,Show the ids of students who have friends and are also liked by someone else.,SELECT student_id FROM friend INTERSECT SELECT liked_id FROM likes,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: friend, likes;
###Columns: friend.student_id, likes.student_id, likes.liked_id;
"
network_1,What are the ids of students who both have friends and are liked?,SELECT student_id FROM friend INTERSECT SELECT liked_id FROM likes,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: friend, likes;
###Columns: friend.student_id, likes.student_id, likes.liked_id;
"
network_1,Show name of all students who have some friends and also are liked by someone else.,SELECT t2.name FROM friend as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id INTERSECT SELECT t2.name FROM likes as t1 JOIN highschooler as t2 ON t1.liked_id  =  t2.id,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, likes;
###Columns: highschooler.name, highschooler.id, likes.student_id, likes.liked_id;
"
network_1,What are the names of students who both have friends and are liked?,SELECT t2.name FROM friend as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id INTERSECT SELECT t2.name FROM likes as t1 JOIN highschooler as t2 ON t1.liked_id  =  t2.id,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, likes;
###Columns: highschooler.name, highschooler.id, likes.student_id, likes.liked_id;
"
network_1,Count the number of likes for each student id.,"SELECT student_id ,  COUNT(*) FROM likes GROUP BY student_id","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: likes;
###Columns: likes.student_id;
"
network_1,How many likes correspond to each student id?,"SELECT student_id ,  COUNT(*) FROM likes GROUP BY student_id","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: likes;
###Columns: likes.student_id;
"
network_1,"Show the names of students who have likes, and numbers of likes for each.","SELECT t2.name ,  COUNT(*) FROM likes as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id GROUP BY t1.student_id","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, likes;
###Columns: highschooler.name, highschooler.id, likes.student_id;
"
network_1,"What are the names of students who have likes, and how many likes does each have?","SELECT t2.name ,  COUNT(*) FROM likes as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id GROUP BY t1.student_id","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, likes;
###Columns: highschooler.name, highschooler.id, likes.student_id;
"
network_1,What is the name of the student who has the greatest number of likes?,SELECT t2.name FROM likes as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id GROUP BY t1.student_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, likes;
###Columns: highschooler.name, highschooler.id, likes.student_id;
"
network_1,Give the name of the student with the most likes.,SELECT t2.name FROM likes as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id GROUP BY t1.student_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, likes;
###Columns: highschooler.name, highschooler.id, likes.student_id;
"
network_1,Show the names of students who have at least 2 likes.,SELECT t2.name FROM likes as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id GROUP BY t1.student_id HAVING COUNT(*)  >=  2,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, likes;
###Columns: highschooler.name, highschooler.id, likes.student_id;
"
network_1,What are the names of students who have 2 or more interests?,SELECT t2.name FROM likes as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id GROUP BY t1.student_id HAVING COUNT(*)  >=  2,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, likes;
###Columns: highschooler.name, highschooler.id, likes.student_id;
"
network_1,Show the names of students who have a grade higher than 5 and have at least 2 friends.,SELECT t2.name FROM friend as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id WHERE t2.grade  >  5 GROUP BY t1.student_id HAVING COUNT(*)  >=  2,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, friend;
###Columns: highschooler.grade, highschooler.name, highschooler.id, friend.student_id;
"
network_1,What are the names of students who have a grade of over 5 and have 2 or more friends?,SELECT t2.name FROM friend as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id WHERE t2.grade  >  5 GROUP BY t1.student_id HAVING COUNT(*)  >=  2,"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: highschooler, friend;
###Columns: highschooler.grade, highschooler.name, highschooler.id, friend.student_id;
"
network_1,How many interests does Kyle have?,"SELECT COUNT(*) FROM likes as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id WHERE t2.name  =  ""Kyle""","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: likes, highschooler;
###Columns: likes.student_id, highschooler.name, highschooler.id;
"
network_1,Return the number of interests that the student named Kyle has.,"SELECT COUNT(*) FROM likes as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id WHERE t2.name  =  ""Kyle""","CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: likes, highschooler;
###Columns: likes.student_id, highschooler.name, highschooler.id;
"
network_1,Find the average grade of all students who have some friends.,SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT t1.student_id FROM friend as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id),"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: friend, highschooler;
###Columns: friend.student_id, highschooler.id;
"
network_1,What is the average grade of students who have friends?,SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT t1.student_id FROM friend as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id),"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: friend, highschooler;
###Columns: friend.student_id, highschooler.id;
"
network_1,Find the minimum grade of students who have no friends.,SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT t1.student_id FROM friend as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id),"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: friend, highschooler;
###Columns: friend.student_id, highschooler.id;
"
network_1,What is the lowest grade of students who do not have any friends?,SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT t1.student_id FROM friend as t1 JOIN highschooler as t2 ON t1.student_id  =  t2.id),"CREATE TABLE `Highschooler` (
  ID INT PRIMARY KEY,
  name TEXT,
  grade INT
);

CREATE TABLE `Friend` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  friend_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

CREATE TABLE `Likes` (
  student_id INT PRIMARY KEY REFERENCES Highschooler(ID),
  liked_id INT PRIMARY KEY REFERENCES Highschooler(ID)
);

","###Tables: friend, highschooler;
###Columns: friend.student_id, highschooler.id;
"
dog_kennels,Which states have both guardians and veterinarians living there?,SELECT state FROM owners INTERSECT SELECT state FROM professionals,"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: owners, professionals;
###Columns: owners.state, professionals.state;
"
dog_kennels,Find the states where both guardians and veterinarians live.,SELECT state FROM owners INTERSECT SELECT state FROM professionals,"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: owners, professionals;
###Columns: owners.state, professionals.state;
"
dog_kennels,What is the average age of the dogs who have gone through any medical care?,SELECT AVG(age) FROM dogs WHERE dog_id IN ( SELECT dog_id FROM treatments ),"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs, treatments;
###Columns: dogs.dog_id, dogs.age, treatments.dog_id;
"
dog_kennels,Find the average age of the dogs who went through health care.,SELECT AVG(age) FROM dogs WHERE dog_id IN ( SELECT dog_id FROM treatments ),"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs, treatments;
###Columns: dogs.dog_id, dogs.age, treatments.dog_id;
"
dog_kennels,"Which veterinarians live in the state of Indiana or have done more than 2 medical cares? List his or her id, family name and cell phone.","SELECT professional_id ,  last_name ,  cell_number FROM professionals WHERE state  =  'Indiana' UNION SELECT t1.professional_id ,  t1.last_name ,  t1.cell_number FROM professionals as t1 JOIN treatments as t2 ON t1.professional_id  =  t2.professional_id GROUP BY t1.professional_id HAVING COUNT(*)  >  2","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: professionals, treatments;
###Columns: professionals.cell_number, professionals.last_name, professionals.professional_id, treatments.professional_id;
"
dog_kennels,"Find the id, last name and cell phone of the veterinarians who live in the state of Indiana or have performed more than two health-cares.","SELECT professional_id ,  last_name ,  cell_number FROM professionals WHERE state  =  'Indiana' UNION SELECT t1.professional_id ,  t1.last_name ,  t1.cell_number FROM professionals as t1 JOIN treatments as t2 ON t1.professional_id  =  t2.professional_id GROUP BY t1.professional_id HAVING COUNT(*)  >  2","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: professionals, treatments;
###Columns: professionals.cell_number, professionals.last_name, professionals.professional_id, treatments.professional_id;
"
dog_kennels,Which dogs have not cost their guardian more than 1000 for health-care? List the dog names.,SELECT name FROM dogs WHERE dog_id NOT IN( SELECT dog_id FROM treatments GROUP BY dog_id HAVING SUM(cost_of_treatment)  >  1000 ),"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs, treatments;
###Columns: dogs.dog_id, dogs.name, treatments.dog_id, treatments.cost_of_treatment;
"
dog_kennels,What are the names of the dogs for which the guardian spent more than 1000 for health-care?,SELECT name FROM dogs WHERE dog_id NOT IN( SELECT dog_id FROM treatments GROUP BY dog_id HAVING SUM(cost_of_treatment)  >  1000 ),"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs, treatments;
###Columns: dogs.dog_id, dogs.name, treatments.dog_id, treatments.cost_of_treatment;
"
dog_kennels,Which first names are used for veterinarians or guardians but are not used as dog names?,SELECT first_name FROM professionals UNION SELECT first_name FROM owners EXCEPT SELECT name FROM dogs,"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: professionals, owners, dogs;
###Columns: professionals.first_name, owners.first_name, dogs.name;
"
dog_kennels,Find the first names that are used for veterinarians or guardians but are not used as dog names.,SELECT first_name FROM professionals UNION SELECT first_name FROM owners EXCEPT SELECT name FROM dogs,"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: professionals, owners, dogs;
###Columns: professionals.first_name, owners.first_name, dogs.name;
"
dog_kennels,"Which veterinarian did not operate any medical care on dogs? List the veterinarian's id, role and email.","SELECT professional_id ,  role_code ,  email_address FROM professionals EXCEPT SELECT t1.professional_id ,  t1.role_code ,  t1.email_address FROM professionals as t1 JOIN treatments as t2 ON t1.professional_id  =  t2.professional_id","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: professionals, treatments;
###Columns: professionals.role_code, professionals.email_address, professionals.professional_id, treatments.professional_id;
"
dog_kennels,"Give me the id, role and email of the veterinarians who did not perform any health-care on dogs.","SELECT professional_id ,  role_code ,  email_address FROM professionals EXCEPT SELECT t1.professional_id ,  t1.role_code ,  t1.email_address FROM professionals as t1 JOIN treatments as t2 ON t1.professional_id  =  t2.professional_id","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: professionals, treatments;
###Columns: professionals.role_code, professionals.email_address, professionals.professional_id, treatments.professional_id;
"
dog_kennels,"Which people owns the most dogs? List the people id, given name and family name.","SELECT t1.owner_id ,  t2.first_name ,  t2.last_name FROM dogs as t1 JOIN owners as t2 ON t1.owner_id  =  t2.owner_id GROUP BY t1.owner_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs, owners;
###Columns: dogs.owner_id, owners.last_name, owners.first_name, owners.owner_id;
"
dog_kennels,"Return the people id, given name and family name of the guardian who has the most dogs.","SELECT t1.owner_id ,  t2.first_name ,  t2.last_name FROM dogs as t1 JOIN owners as t2 ON t1.owner_id  =  t2.owner_id GROUP BY t1.owner_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs, owners;
###Columns: dogs.owner_id, owners.last_name, owners.first_name, owners.owner_id;
"
dog_kennels,"Which veterinarians have done at least two medical cares? List the veterinarian's id, role, and given name.","SELECT t1.professional_id ,  t1.role_code ,  t1.first_name FROM professionals as t1 JOIN treatments as t2 ON t1.professional_id  =  t2.professional_id GROUP BY t1.professional_id HAVING COUNT(*)  >=  2","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: professionals, treatments;
###Columns: professionals.role_code, professionals.first_name, professionals.professional_id, treatments.professional_id;
"
dog_kennels,"What are the id, role, and given name of the veterinarians who have performed two or more health-cares?","SELECT t1.professional_id ,  t1.role_code ,  t1.first_name FROM professionals as t1 JOIN treatments as t2 ON t1.professional_id  =  t2.professional_id GROUP BY t1.professional_id HAVING COUNT(*)  >=  2","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: professionals, treatments;
###Columns: professionals.role_code, professionals.first_name, professionals.professional_id, treatments.professional_id;
"
dog_kennels,What is the name of the breed with the most puppies?,SELECT t1.breed_name FROM breeds as t1 JOIN dogs as t2 ON t1.breed_code  =  t2.breed_code GROUP BY t1.breed_name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: breeds, dogs;
###Columns: breeds.breed_name, breeds.breed_code, dogs.breed_code;
"
dog_kennels,Which breed do the most puppies have? Give me the breed name.,SELECT t1.breed_name FROM breeds as t1 JOIN dogs as t2 ON t1.breed_code  =  t2.breed_code GROUP BY t1.breed_name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: breeds, dogs;
###Columns: breeds.breed_name, breeds.breed_code, dogs.breed_code;
"
dog_kennels,Which guardian has paid for the most health cares on his or her dogs? List the guardian id and family name.,"SELECT t1.owner_id ,  t1.last_name FROM owners as t1 JOIN dogs as t2 ON t1.owner_id  =  t2.owner_id JOIN treatments as t3 ON t2.dog_id  =  t3.dog_id GROUP BY t1.owner_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: owners, dogs, treatments;
###Columns: owners.last_name, owners.owner_id, dogs.dog_id, dogs.owner_id, treatments.dog_id;
"
dog_kennels,Tell me the guardian id and family name of the guardian who spent the most on treatments of his or her puppies.,"SELECT t1.owner_id ,  t1.last_name FROM owners as t1 JOIN dogs as t2 ON t1.owner_id  =  t2.owner_id JOIN treatments as t3 ON t2.dog_id  =  t3.dog_id GROUP BY t1.owner_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: owners, dogs, treatments;
###Columns: owners.last_name, owners.owner_id, dogs.dog_id, dogs.owner_id, treatments.dog_id;
"
dog_kennels,What is the describing details of the health-care type that costs the least money in total?,SELECT t1.treatment_type_description FROM treatment_types as t1 JOIN treatments as t2 ON t1.treatment_type_code  =  t2.treatment_type_code GROUP BY t1.treatment_type_code ORDER BY SUM(cost_of_treatment) asC LIMIT 1,"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: treatment_types, treatments;
###Columns: treatment_types.treatment_type_description, treatment_types.treatment_type_code, treatments.treatment_type_code;
"
dog_kennels,Give me the describing details of the health-care whose total cost is the lowest.,SELECT t1.treatment_type_description FROM treatment_types as t1 JOIN treatments as t2 ON t1.treatment_type_code  =  t2.treatment_type_code GROUP BY t1.treatment_type_code ORDER BY SUM(cost_of_treatment) asC LIMIT 1,"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: treatment_types, treatments;
###Columns: treatment_types.treatment_type_description, treatment_types.treatment_type_code, treatments.treatment_type_code;
"
dog_kennels,Which guardian has paid the largest amount of money in total for their puppies? Show the guardian id and zip code.,"SELECT t1.owner_id ,  t1.zip_code FROM owners as t1 JOIN dogs as t2 ON t1.owner_id  =  t2.owner_id JOIN treatments as t3 ON t2.dog_id  =  t3.dog_id GROUP BY t1.owner_id ORDER BY SUM(t3.cost_of_treatment) DESC LIMIT 1","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: owners, dogs, treatments;
###Columns: owners.owner_id, owners.zip_code, dogs.dog_id, dogs.owner_id, treatments.dog_id, treatments.cost_of_treatment;
"
dog_kennels,Find the guardian id and zip code of the guardian who spent the most money in total for his or her puppies.,"SELECT t1.owner_id ,  t1.zip_code FROM owners as t1 JOIN dogs as t2 ON t1.owner_id  =  t2.owner_id JOIN treatments as t3 ON t2.dog_id  =  t3.dog_id GROUP BY t1.owner_id ORDER BY SUM(t3.cost_of_treatment) DESC LIMIT 1","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: owners, dogs, treatments;
###Columns: owners.owner_id, owners.zip_code, dogs.dog_id, dogs.owner_id, treatments.dog_id, treatments.cost_of_treatment;
"
dog_kennels,Which veterinarians have done at least two types of health-care? List the veterinarian id and cell phone.,"SELECT t1.professional_id ,  t1.cell_number FROM professionals as t1 JOIN treatments as t2 ON t1.professional_id  =  t2.professional_id GROUP BY t1.professional_id HAVING COUNT(*)  >=  2","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: professionals, treatments;
###Columns: professionals.cell_number, professionals.professional_id, treatments.professional_id;
"
dog_kennels,Find the id and cell phone of the veterinarians who operate two or more types of health-care.,"SELECT t1.professional_id ,  t1.cell_number FROM professionals as t1 JOIN treatments as t2 ON t1.professional_id  =  t2.professional_id GROUP BY t1.professional_id HAVING COUNT(*)  >=  2","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: professionals, treatments;
###Columns: professionals.cell_number, professionals.professional_id, treatments.professional_id;
"
dog_kennels,What are the first name and family name of the veterinarians who have done medical care with cost below average?,"SELECT DISTINCT t1.first_name ,  t1.last_name FROM professiONals as t1 JOIN  treatments as t2 ON t2.professiONal_id = t1.professiONal_id WHERE cost_of_treatment  <  ( SELECT AVG(cost_of_treatment) FROM treatments )","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: treatments;
###Columns:;
"
dog_kennels,Which veterinarians have operated a medical care that costs less than the average? Give me theor given names and family names.,"SELECT DISTINCT t1.first_name ,  t1.last_name FROM professiONals as t1 JOIN treatments as t2 ON t2.professiONal_id = t1.professiONal_id WHERE cost_of_treatment  <  ( SELECT AVG(cost_of_treatment) FROM treatments )","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: treatments;
###Columns:;
"
dog_kennels,"List the date of each medical care, together with the given name of the veterinarian who operated it.","SELECT t1.date_of_treatment ,  t2.first_name FROM treatments as t1 JOIN professionals as t2 ON t1.professional_id  =  t2.professional_id","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: treatments, professionals;
###Columns: treatments.date_of_treatment, treatments.professional_id, professionals.first_name, professionals.professional_id;
"
dog_kennels,What are the date and the operating veterinarian's given name of each medical care?,"SELECT t1.date_of_treatment ,  t2.first_name FROM treatments as t1 JOIN professionals as t2 ON t1.professional_id  =  t2.professional_id","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: treatments, professionals;
###Columns: treatments.date_of_treatment, treatments.professional_id, professionals.first_name, professionals.professional_id;
"
dog_kennels,List the cost of each health-care and the corresponding health-care type describing details.,"SELECT t1.cost_of_treatment ,  t2.treatment_type_description FROM treatments as t1 JOIN treatment_types as t2 ON t1.treatment_type_code  =  t2.treatment_type_code","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: treatments, treatment_types;
###Columns: treatments.cost_of_treatment, treatments.treatment_type_code, treatment_types.treatment_type_description, treatment_types.treatment_type_code;
"
dog_kennels,What are the cost and health-care type describing content of each health-care?,"SELECT t1.cost_of_treatment ,  t2.treatment_type_description FROM treatments as t1 JOIN treatment_types as t2 ON t1.treatment_type_code  =  t2.treatment_type_code","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: treatments, treatment_types;
###Columns: treatments.cost_of_treatment, treatments.treatment_type_code, treatment_types.treatment_type_description, treatment_types.treatment_type_code;
"
dog_kennels,"List each guardian's first name, last name, and the size of his for her dog.","SELECT t1.first_name ,  t1.last_name ,  t2.size_code FROM owners as t1 JOIN dogs as t2 ON t1.owner_id  =  t2.owner_id","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: owners, dogs;
###Columns: owners.last_name, owners.first_name, owners.owner_id, dogs.size_code, dogs.owner_id;
"
dog_kennels,"What are each guardians's first name, last name, and the size of their dog?","SELECT t1.first_name ,  t1.last_name ,  t2.size_code FROM owners as t1 JOIN dogs as t2 ON t1.owner_id  =  t2.owner_id","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: owners, dogs;
###Columns: owners.last_name, owners.first_name, owners.owner_id, dogs.size_code, dogs.owner_id;
"
dog_kennels,List pairs of the guardians's given name and the puppies's name.,"SELECT t1.first_name ,  t2.name FROM owners as t1 JOIN dogs as t2 ON t1.owner_id  =  t2.owner_id","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: owners, dogs;
###Columns: owners.first_name, owners.owner_id, dogs.name, dogs.owner_id;
"
dog_kennels,What are each guardians's given name and their puppies's name?,"SELECT t1.first_name ,  t2.name FROM owners as t1 JOIN dogs as t2 ON t1.owner_id  =  t2.owner_id","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: owners, dogs;
###Columns: owners.first_name, owners.owner_id, dogs.name, dogs.owner_id;
"
dog_kennels,List the names of the puppies of the rarest breed and the health care dates of them.,"SELECT t1.name ,  t2.date_of_treatment FROM dogs as t1 JOIN treatments as t2 ON t1.dog_id  =  t2.dog_id WHERE t1.breed_code  =  ( SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) asC LIMIT 1 )","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs, treatments;
###Columns: dogs.dog_id, dogs.name, dogs.breed_code, treatments.dog_id, treatments.date_of_treatment;
"
dog_kennels,Which dogs are of the rarest breed? Show their names and medical care dates.,"SELECT t1.name ,  t2.date_of_treatment FROM dogs as t1 JOIN treatments as t2 ON t1.dog_id  =  t2.dog_id WHERE t1.breed_code  =  ( SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY COUNT(*) asC LIMIT 1 )","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs, treatments;
###Columns: dogs.dog_id, dogs.name, dogs.breed_code, treatments.dog_id, treatments.date_of_treatment;
"
dog_kennels,Which dogs are owned by someone who lives in Virginia? List the guardian's first name and the dog's name.,"SELECT t1.first_name ,  t2.name FROM owners as t1 JOIN dogs as t2 ON t1.owner_id  =  t2.owner_id WHERE t1.state  =  'Virginia'","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: owners, dogs;
###Columns: owners.first_name, owners.owner_id, owners.state, dogs.name, dogs.owner_id;
"
dog_kennels,Find the given names of guardians living in Virginia and the names of dogs they own.,"SELECT t1.first_name ,  t2.name FROM owners as t1 JOIN dogs as t2 ON t1.owner_id  =  t2.owner_id WHERE t1.state  =  'Virginia'","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: owners, dogs;
###Columns: owners.first_name, owners.owner_id, owners.state, dogs.name, dogs.owner_id;
"
dog_kennels,What are the arriving and leaving date of the puppies who have gone through a medical care?,"SELECT DISTINCT t1.date_arrived ,  t1.date_departed FROM dogs as t1 JOIN treatments as t2 ON t1.dog_id  =  t2.dog_id","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs, treatments;
###Columns: dogs.dog_id, dogs.date_arrived, dogs.date_departed, treatments.dog_id;
"
dog_kennels,Find the arriving and leaving date of the puppies that received a health care.,"SELECT DISTINCT t1.date_arrived ,  t1.date_departed FROM dogs as t1 JOIN treatments as t2 ON t1.dog_id  =  t2.dog_id","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs, treatments;
###Columns: dogs.dog_id, dogs.date_arrived, dogs.date_departed, treatments.dog_id;
"
dog_kennels,List the family name of the guardian owning the youngest puppy.,SELECT t1.last_name FROM owners as t1 JOIN dogs as t2 ON t1.owner_id  =  t2.owner_id WHERE t2.age  =  ( SELECT MAX(age) FROM dogs ),"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: owners, dogs;
###Columns: owners.last_name, owners.owner_id, dogs.age, dogs.owner_id;
"
dog_kennels,Who owns the youngest puppy? Give me his or her last name.,SELECT t1.last_name FROM owners as t1 JOIN dogs as t2 ON t1.owner_id  =  t2.owner_id WHERE t2.age  =  ( SELECT MAX(age) FROM dogs ),"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: owners, dogs;
###Columns: owners.last_name, owners.owner_id, dogs.age, dogs.owner_id;
"
dog_kennels,List the emails of the veterinarians who live in the state of Hawaii or the state of Wisconsin.,SELECT email_address FROM professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin',"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: professionals;
###Columns: professionals.email_address, professionals.state;
"
dog_kennels,What are the emails of the veterinarians living in either the state of Hawaii or the state of Wisconsin?,SELECT email_address FROM professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin',"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: professionals;
###Columns: professionals.email_address, professionals.state;
"
dog_kennels,What are the arriving and leaving date of all the puppies?,"SELECT date_arrived ,  date_departed FROM dogs","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs;
###Columns: dogs.date_arrived, dogs.date_departed;
"
dog_kennels,List the arriving and leaving date for all the puppies.,"SELECT date_arrived ,  date_departed FROM dogs","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs;
###Columns: dogs.date_arrived, dogs.date_departed;
"
dog_kennels,How many puppies went through any health cares?,SELECT COUNT(DISTINCT dog_id) FROM treatments,"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: treatments;
###Columns: treatments.dog_id;
"
dog_kennels,Count the number of puppies that went through a health care.,SELECT COUNT(DISTINCT dog_id) FROM treatments,"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: treatments;
###Columns: treatments.dog_id;
"
dog_kennels,How many veterinarians have performed any health care to puppies?,SELECT COUNT(DISTINCT professional_id) FROM treatments,"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: treatments;
###Columns: treatments.professional_id;
"
dog_kennels,Find the number of veterinarians who have ever treated puppies.,SELECT COUNT(DISTINCT professional_id) FROM treatments,"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: treatments;
###Columns: treatments.professional_id;
"
dog_kennels,"Which veterinarians live in a city containing the substring 'West'? List his or her role, street, town and state.","SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: professionals;
###Columns: professionals.role_code, professionals.state, professionals.city, professionals.street;
"
dog_kennels,"Find the role, street, town and state of the veterinarians living in a town that contains the substring 'West'.","SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: professionals;
###Columns: professionals.role_code, professionals.state, professionals.city, professionals.street;
"
dog_kennels,"Which guardians live in the state whose name contains the substring 'North'? List his given name, family name and email.","SELECT first_name ,  last_name ,  email_address FROM owners WHERE state LIKE '%North%'","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: owners;
###Columns: owners.state, owners.last_name, owners.first_name, owners.email_address;
"
dog_kennels,"Return the given name, family name and email of the guardians living in a state whose name contains the substring 'North'.","SELECT first_name ,  last_name ,  email_address FROM owners WHERE state LIKE '%North%'","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: owners;
###Columns: owners.state, owners.last_name, owners.first_name, owners.email_address;
"
dog_kennels,How many puppies have an age below the average?,SELECT COUNT(*) FROM dogs WHERE age  <  ( SELECT AVG(age) FROM dogs ),"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs;
###Columns: dogs.age;
"
dog_kennels,Count the number of puppies of an age below the average.,SELECT COUNT(*) FROM dogs WHERE age  <  ( SELECT AVG(age) FROM dogs ),"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs;
###Columns: dogs.age;
"
dog_kennels,How much does the most recent health-care cost?,SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1,"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: treatments;
###Columns: treatments.date_of_treatment, treatments.cost_of_treatment;
"
dog_kennels,Show me the cost of the most recently performed medical care.,SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1,"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: treatments;
###Columns: treatments.date_of_treatment, treatments.cost_of_treatment;
"
dog_kennels,How many puppies have not gone through any medical care?,SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN ( SELECT dog_id FROM treatments ),"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs, treatments;
###Columns: dogs.dog_id, treatments.dog_id;
"
dog_kennels,Tell me the number of puppies that have received any health-care.,SELECT COUNT(*) FROM dogs WHERE dog_id IN ( SELECT dog_id FROM treatments ),"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs, treatments;
###Columns: dogs.dog_id, treatments.dog_id;
"
dog_kennels,How many guardians temporarily do not have any puppies?,SELECT COUNT(*) FROM owners WHERE owner_id NOT IN ( SELECT owner_id FROM dogs ),"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: owners, dogs;
###Columns: owners.owner_id, dogs.owner_id;
"
dog_kennels,Find the number of guardians who do not own any puppies at this moment.,SELECT COUNT(*) FROM owners WHERE owner_id NOT IN ( SELECT owner_id FROM dogs ),"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: owners, dogs;
###Columns: owners.owner_id, dogs.owner_id;
"
dog_kennels,How many veterinarians did not operate any treatment on puppies?,SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN ( SELECT professional_id FROM treatments ),"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: professionals, treatments;
###Columns: professionals.professional_id, treatments.professional_id;
"
dog_kennels,Find the number of veterinarians who have not treated any puppies.,SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN ( SELECT professional_id FROM treatments ),"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: professionals, treatments;
###Columns: professionals.professional_id, treatments.professional_id;
"
dog_kennels,"List the puppy name, age and weight of the puppies who have been abandoned? 1 stands for yes, and 0 stands for no.","SELECT name ,  age ,  weight FROM dogs WHERE abandoned_yn  =  1","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs;
###Columns: dogs.name, dogs.weight, dogs.age, dogs.abandoned_yn;
"
dog_kennels,"What are the puppy name, age and weight of the puppies that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.","SELECT name ,  age ,  weight FROM dogs WHERE abandoned_yn  =  1","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs;
###Columns: dogs.name, dogs.weight, dogs.age, dogs.abandoned_yn;
"
dog_kennels,What is the average age of all the puppies?,SELECT AVG(age) FROM dogs,"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs;
###Columns: dogs.age;
"
dog_kennels,Compute the average age of all the puppies.,SELECT AVG(age) FROM dogs,"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs;
###Columns: dogs.age;
"
dog_kennels,What is the age of the oldest puppy?,SELECT MAX(age) FROM dogs,"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs;
###Columns: dogs.age;
"
dog_kennels,Tell me the age of the oldest puppy.,SELECT MAX(age) FROM dogs,"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs;
###Columns: dogs.age;
"
dog_kennels,How much does each charge type costs? List both charge type and amount.,"SELECT charge_type ,  charge_amount FROM charges","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: charges;
###Columns: charges.charge_type, charges.charge_amount;
"
dog_kennels,List each charge type and its amount.,"SELECT charge_type ,  charge_amount FROM charges","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: charges;
###Columns: charges.charge_type, charges.charge_amount;
"
dog_kennels,How much does the most expensive charge type costs?,SELECT MAX(charge_amount) FROM charges,"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: charges;
###Columns: charges.charge_amount;
"
dog_kennels,What is the charge amount of the most expensive charge type?,SELECT MAX(charge_amount) FROM charges,"CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: charges;
###Columns: charges.charge_amount;
"
dog_kennels,"List the email, cell phone and home phone of all the veterinarians.","SELECT email_address ,  cell_number ,  home_phone FROM professionals","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: professionals;
###Columns: professionals.home_phone, professionals.email_address, professionals.cell_number;
"
dog_kennels,"What are the email, cell phone and home phone of each veterinarian?","SELECT email_address ,  cell_number ,  home_phone FROM professionals","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: professionals;
###Columns: professionals.home_phone, professionals.email_address, professionals.cell_number;
"
dog_kennels,What are all the possible breed type and size type combinations?,"SELECT DISTINCT breed_code ,  size_code FROM dogs","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs;
###Columns: dogs.size_code, dogs.breed_code;
"
dog_kennels,Find the distinct breed type and size type combinations for puppies.,"SELECT DISTINCT breed_code ,  size_code FROM dogs","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: dogs;
###Columns: dogs.size_code, dogs.breed_code;
"
dog_kennels,List the given name of all the veterinarians along with the description of the medical care they have done.,"SELECT DISTINCT t1.first_name ,  t3.treatment_type_description FROM professionals as t1 JOIN treatments as t2 ON t1.professional_id  =  t2.professional_id JOIN treatment_types as t3 ON t2.treatment_type_code  =  t3.treatment_type_code","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: professionals, treatment_types, treatments;
###Columns: professionals.first_name, professionals.professional_id, treatment_types.treatment_type_description, treatment_types.treatment_type_code, treatments.professional_id, treatments.treatment_type_code;
"
dog_kennels,What are each veterinarian's first name and describing details of the health-care they have performed?,"SELECT DISTINCT t1.first_name ,  t3.treatment_type_description FROM professionals as t1 JOIN treatments as t2 ON t1.professional_id  =  t2.professional_id JOIN treatment_types as t3 ON t2.treatment_type_code  =  t3.treatment_type_code","CREATE TABLE `Breeds` (
  breed_code VARCHAR(10) PRIMARY KEY,
  breed_name VARCHAR(80)
);

CREATE TABLE `Charges` (
  charge_id INTEGER,
  charge_type VARCHAR(10),
  charge_amount DECIMAL(19,4)
);

CREATE TABLE `Sizes` (
  size_code VARCHAR(10) PRIMARY KEY,
  size_description VARCHAR(80)
);

CREATE TABLE `Treatment_Types` (
  treatment_type_code VARCHAR(10) PRIMARY KEY,
  treatment_type_description VARCHAR(80)
);

CREATE TABLE `Owners` (
  owner_id INTEGER,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Dogs` (
  dog_id INTEGER,
  owner_id INTEGER REFERENCES Owners(owner_id) REFERENCES Owners(owner_id),
  abandoned_yn VARCHAR(1),
  breed_code VARCHAR(10) REFERENCES Breeds(breed_code),
  size_code VARCHAR(10) REFERENCES Sizes(size_code),
  name VARCHAR(50),
  age VARCHAR(20),
  date_of_birth DATETIME,
  gender VARCHAR(1),
  weight VARCHAR(20),
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME
);

CREATE TABLE `Professionals` (
  professional_id INTEGER,
  role_code VARCHAR(10),
  first_name VARCHAR(50),
  street VARCHAR(50),
  city VARCHAR(50),
  state VARCHAR(20),
  zip_code VARCHAR(20),
  last_name VARCHAR(50),
  email_address VARCHAR(50),
  home_phone VARCHAR(20),
  cell_number VARCHAR(20)
);

CREATE TABLE `Treatments` (
  treatment_id INTEGER,
  dog_id INTEGER REFERENCES Dogs(dog_id),
  professional_id INTEGER REFERENCES Professionals(professional_id),
  treatment_type_code VARCHAR(10) REFERENCES Treatment_Types(treatment_type_code),
  date_of_treatment DATETIME,
  cost_of_treatment DECIMAL(19,4)
);

","###Tables: professionals, treatment_types, treatments;
###Columns: professionals.first_name, professionals.professional_id, treatment_types.treatment_type_description, treatment_types.treatment_type_code, treatments.professional_id, treatments.treatment_type_code;
"
singer,How many vocalists are there?,SELECT COUNT(*) FROM singer,"CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer;
###Columns: singer.birth_year, singer.name, singer.net_worth_millions, singer.citizenship, singer.singer_id;
"
singer,What is the count of  musicians?,SELECT COUNT(*) FROM singer,"CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer;
###Columns: singer.birth_year, singer.name, singer.net_worth_millions, singer.citizenship, singer.singer_id;
"
singer,List the name of vocalists in ascending order of net worth.,SELECT name FROM singer ORDER BY net_worth_millions ASC,"CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer;
###Columns: singer.name, singer.net_worth_millions;
"
singer,What are the names of  musicians ordered by ascending net worth?,SELECT name FROM singer ORDER BY net_worth_millions ASC,"CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer;
###Columns: singer.name, singer.net_worth_millions;
"
singer,What are the birth year and country of vocalists?,"SELECT birth_year ,  citizenship FROM singer","CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer;
###Columns: singer.birth_year, singer.citizenship;
"
singer,What are the birth years and country of the musicians?,"SELECT birth_year ,  citizenship FROM singer","CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer;
###Columns: singer.birth_year, singer.citizenship;
"
singer,"List the name of vocalists whose citizenship is not ""France"".","SELECT name FROM singer WHERE citizenship != ""France""","CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer;
###Columns: singer.name, singer.citizenship;
"
singer,What are the names of the musicians who are not French citizens?,"SELECT name FROM singer WHERE citizenship != ""France""","CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer;
###Columns: singer.name, singer.citizenship;
"
singer,Show the name of vocalists whose birth year is either 1948 or 1949?,SELECT name FROM singer WHERE birth_year  =  1948 OR birth_year  =  1949,"CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer;
###Columns: singer.name, singer.birth_year;
"
singer,What are the names of the musicians whose birth years are either 1948 or 1949?,SELECT name FROM singer WHERE birth_year  =  1948 OR birth_year  =  1949,"CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer;
###Columns: singer.name, singer.birth_year;
"
singer,What is the name of the vocalist with the largest net worth?,SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1,"CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer;
###Columns: singer.name, singer.net_worth_millions;
"
singer,What is the name of the vocalist who is worth the most?,SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1,"CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer;
###Columns: singer.name, singer.net_worth_millions;
"
singer,Show different citizenship of vocalists and the number of vocalists of each country.,"SELECT citizenship ,  COUNT(*) FROM singer GROUP BY citizenship","CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer;
###Columns: singer.citizenship;
"
singer,"For each country, how many musicians are from that country?","SELECT citizenship ,  COUNT(*) FROM singer GROUP BY citizenship","CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer;
###Columns: singer.citizenship;
"
singer,Please show the most common country of vocalists.,SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer;
###Columns: singer.citizenship;
"
singer,What is the msot common vocalist country?,SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer;
###Columns: singer.citizenship;
"
singer,Show different country and the maximum net worth of musicians of each country.,"SELECT citizenship ,  MAX(net_worth_millions) FROM singer GROUP BY citizenship","CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer;
###Columns: singer.net_worth_millions, singer.citizenship;
"
singer,"For each country, what is the maximum net worth?","SELECT citizenship ,  MAX(net_worth_millions) FROM singer GROUP BY citizenship","CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer;
###Columns: singer.net_worth_millions, singer.citizenship;
"
singer,Show names of songs and names of musicians.,"SELECT t2.title ,  t1.name FROM singer as t1 JOIN song as t2 ON t1.singer_id  =  t2.singer_id","CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: song, singer;
###Columns: song.title, song.singer_id, singer.name, singer.singer_id;
"
singer,What are the song names and vocalist names?,"SELECT t2.title ,  t1.name FROM singer as t1 JOIN song as t2 ON t1.singer_id  =  t2.singer_id","CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: song, singer;
###Columns: song.title, song.singer_id, singer.name, singer.singer_id;
"
singer,Show distinct names of musicians that have songs with sales more than 300000.,SELECT DISTINCT t1.name FROM singer as t1 JOIN song as t2 ON t1.singer_id  =  t2.singer_id WHERE t2.sales  >  300000,"CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer, song;
###Columns: singer.name, singer.singer_id, song.sales, song.singer_id;
"
singer,what are the different names of the vocalists that have sales more than 300000?,SELECT DISTINCT t1.name FROM singer as t1 JOIN song as t2 ON t1.singer_id  =  t2.singer_id WHERE t2.sales  >  300000,"CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer, song;
###Columns: singer.name, singer.singer_id, song.sales, song.singer_id;
"
singer,Show the names of musicians that have more than one song.,SELECT t1.name FROM singer as t1 JOIN song as t2 ON t1.singer_id  =  t2.singer_id GROUP BY t1.name HAVING COUNT(*)  >  1,"CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer, song;
###Columns: singer.name, singer.singer_id, song.singer_id;
"
singer,What are the names of the vocalists that have more than one songs?,SELECT t1.name FROM singer as t1 JOIN song as t2 ON t1.singer_id  =  t2.singer_id GROUP BY t1.name HAVING COUNT(*)  >  1,"CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer, song;
###Columns: singer.name, singer.singer_id, song.singer_id;
"
singer,Show the names of musicians and the total sales of their songs.,"SELECT t1.name ,  SUM(t2.sales) FROM singer as t1 JOIN song as t2 ON t1.singer_id  =  t2.singer_id GROUP BY t1.name","CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer, song;
###Columns: singer.name, singer.singer_id, song.sales, song.singer_id;
"
singer,"For each vocalist name, what is the total sales for their songs?","SELECT t1.name ,  SUM(t2.sales) FROM singer as t1 JOIN song as t2 ON t1.singer_id  =  t2.singer_id GROUP BY t1.name","CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer, song;
###Columns: singer.name, singer.singer_id, song.sales, song.singer_id;
"
singer,List the name of musicians that do not have any song.,SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song),"CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer, song;
###Columns: singer.name, singer.singer_id, song.singer_id;
"
singer,What is the name of every vocalist that does not have any song?,SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song),"CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer, song;
###Columns: singer.name, singer.singer_id, song.singer_id;
"
singer,Show the citizenship shared by musicians with birth year before 1945 and after 1955.,SELECT citizenship FROM singer WHERE birth_year  <  1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year  >  1955,"CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer;
###Columns: singer.birth_year, singer.citizenship;
"
singer,What are the country that are shared by musicians with a birth year before 1945 and after 1955?,SELECT citizenship FROM singer WHERE birth_year  <  1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year  >  1955,"CREATE TABLE `singer` (
  Singer_ID INT PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE `song` (
  Song_ID INT PRIMARY KEY,
  Title TEXT,
  Singer_ID INT REFERENCES singer(Singer_ID),
  Sales REAL,
  Highest_Position REAL
);

","###Tables: singer;
###Columns: singer.birth_year, singer.citizenship;
"
real_estate_properties,How many available characteristic are there in total?,SELECT COUNT(*) FROM other_available_features,"CREATE TABLE `Ref_Feature_Types` (
  feature_type_code VARCHAR(20) PRIMARY KEY,
  feature_type_name VARCHAR(80)
);

CREATE TABLE `Ref_Property_Types` (
  property_type_code VARCHAR(20) PRIMARY KEY,
  property_type_description VARCHAR(80)
);

CREATE TABLE `Other_Available_Features` (
  feature_id INTEGER,
  feature_type_code VARCHAR(20) REFERENCES Ref_Feature_Types(feature_type_code),
  feature_name VARCHAR(80),
  feature_description VARCHAR(80)
);

CREATE TABLE `Properties` (
  property_id INTEGER,
  property_type_code VARCHAR(20) REFERENCES Ref_Property_Types(property_type_code),
  date_on_market DATETIME,
  date_sold DATETIME,
  property_name VARCHAR(80),
  property_address VARCHAR(255),
  room_count INTEGER,
  vendor_requested_price DECIMAL(19,4),
  buyer_offered_price DECIMAL(19,4),
  agreed_selling_price DECIMAL(19,4),
  apt_feature_1 VARCHAR(255),
  apt_feature_2 VARCHAR(255),
  apt_feature_3 VARCHAR(255),
  fld_feature_1 VARCHAR(255),
  fld_feature_2 VARCHAR(255),
  fld_feature_3 VARCHAR(255),
  hse_feature_1 VARCHAR(255),
  hse_feature_2 VARCHAR(255),
  hse_feature_3 VARCHAR(255),
  oth_feature_1 VARCHAR(255),
  oth_feature_2 VARCHAR(255),
  oth_feature_3 VARCHAR(255),
  shp_feature_1 VARCHAR(255),
  shp_feature_2 VARCHAR(255),
  shp_feature_3 VARCHAR(255),
  other_property_details VARCHAR(255)
);

CREATE TABLE `Other_Property_Features` (
  property_id INTEGER REFERENCES Properties(property_id),
  feature_id INTEGER REFERENCES Other_Available_Features(feature_id),
  property_feature_description VARCHAR(80)
);

","###Tables: other_available_features;
###Columns: other_available_features.feature_type_code, other_available_features.feature_description, other_available_features.feature_id, other_available_features.feature_name;
"
real_estate_properties,What is the characteristic type of feature AirCon?,"SELECT t2.feature_type_name FROM other_available_features as t1 JOIN ref_feature_types as t2 ON t1.feature_type_code  =  t2.feature_type_code WHERE t1.feature_name  =  ""AirCon""","CREATE TABLE `Ref_Feature_Types` (
  feature_type_code VARCHAR(20) PRIMARY KEY,
  feature_type_name VARCHAR(80)
);

CREATE TABLE `Ref_Property_Types` (
  property_type_code VARCHAR(20) PRIMARY KEY,
  property_type_description VARCHAR(80)
);

CREATE TABLE `Other_Available_Features` (
  feature_id INTEGER,
  feature_type_code VARCHAR(20) REFERENCES Ref_Feature_Types(feature_type_code),
  feature_name VARCHAR(80),
  feature_description VARCHAR(80)
);

CREATE TABLE `Properties` (
  property_id INTEGER,
  property_type_code VARCHAR(20) REFERENCES Ref_Property_Types(property_type_code),
  date_on_market DATETIME,
  date_sold DATETIME,
  property_name VARCHAR(80),
  property_address VARCHAR(255),
  room_count INTEGER,
  vendor_requested_price DECIMAL(19,4),
  buyer_offered_price DECIMAL(19,4),
  agreed_selling_price DECIMAL(19,4),
  apt_feature_1 VARCHAR(255),
  apt_feature_2 VARCHAR(255),
  apt_feature_3 VARCHAR(255),
  fld_feature_1 VARCHAR(255),
  fld_feature_2 VARCHAR(255),
  fld_feature_3 VARCHAR(255),
  hse_feature_1 VARCHAR(255),
  hse_feature_2 VARCHAR(255),
  hse_feature_3 VARCHAR(255),
  oth_feature_1 VARCHAR(255),
  oth_feature_2 VARCHAR(255),
  oth_feature_3 VARCHAR(255),
  shp_feature_1 VARCHAR(255),
  shp_feature_2 VARCHAR(255),
  shp_feature_3 VARCHAR(255),
  other_property_details VARCHAR(255)
);

CREATE TABLE `Other_Property_Features` (
  property_id INTEGER REFERENCES Properties(property_id),
  feature_id INTEGER REFERENCES Other_Available_Features(feature_id),
  property_feature_description VARCHAR(80)
);

","###Tables: ref_feature_types, other_available_features;
###Columns: ref_feature_types.feature_type_name, ref_feature_types.feature_type_code, other_available_features.feature_type_code, other_available_features.feature_name;
"
real_estate_properties,Show the property type descriptions of properties belonging to that code.,SELECT t2.property_type_description FROM properties as t1 JOIN ref_property_types as t2 ON t1.property_type_code  =  t2.property_type_code GROUP BY t1.property_type_code,"CREATE TABLE `Ref_Feature_Types` (
  feature_type_code VARCHAR(20) PRIMARY KEY,
  feature_type_name VARCHAR(80)
);

CREATE TABLE `Ref_Property_Types` (
  property_type_code VARCHAR(20) PRIMARY KEY,
  property_type_description VARCHAR(80)
);

CREATE TABLE `Other_Available_Features` (
  feature_id INTEGER,
  feature_type_code VARCHAR(20) REFERENCES Ref_Feature_Types(feature_type_code),
  feature_name VARCHAR(80),
  feature_description VARCHAR(80)
);

CREATE TABLE `Properties` (
  property_id INTEGER,
  property_type_code VARCHAR(20) REFERENCES Ref_Property_Types(property_type_code),
  date_on_market DATETIME,
  date_sold DATETIME,
  property_name VARCHAR(80),
  property_address VARCHAR(255),
  room_count INTEGER,
  vendor_requested_price DECIMAL(19,4),
  buyer_offered_price DECIMAL(19,4),
  agreed_selling_price DECIMAL(19,4),
  apt_feature_1 VARCHAR(255),
  apt_feature_2 VARCHAR(255),
  apt_feature_3 VARCHAR(255),
  fld_feature_1 VARCHAR(255),
  fld_feature_2 VARCHAR(255),
  fld_feature_3 VARCHAR(255),
  hse_feature_1 VARCHAR(255),
  hse_feature_2 VARCHAR(255),
  hse_feature_3 VARCHAR(255),
  oth_feature_1 VARCHAR(255),
  oth_feature_2 VARCHAR(255),
  oth_feature_3 VARCHAR(255),
  shp_feature_1 VARCHAR(255),
  shp_feature_2 VARCHAR(255),
  shp_feature_3 VARCHAR(255),
  other_property_details VARCHAR(255)
);

CREATE TABLE `Other_Property_Features` (
  property_id INTEGER REFERENCES Properties(property_id),
  feature_id INTEGER REFERENCES Other_Available_Features(feature_id),
  property_feature_description VARCHAR(80)
);

","###Tables: ref_property_types, properties;
###Columns: ref_property_types.property_type_description, ref_property_types.property_type_code, properties.property_type_code;
"
real_estate_properties,What are the names of properties that are either houses or apartments with more than 1 room?,"SELECT property_name FROM properties WHERE property_type_code  =  ""House"" UNION SELECT property_name FROM properties WHERE property_type_code  =  ""Apartment"" AND room_count  >  1","CREATE TABLE `Ref_Feature_Types` (
  feature_type_code VARCHAR(20) PRIMARY KEY,
  feature_type_name VARCHAR(80)
);

CREATE TABLE `Ref_Property_Types` (
  property_type_code VARCHAR(20) PRIMARY KEY,
  property_type_description VARCHAR(80)
);

CREATE TABLE `Other_Available_Features` (
  feature_id INTEGER,
  feature_type_code VARCHAR(20) REFERENCES Ref_Feature_Types(feature_type_code),
  feature_name VARCHAR(80),
  feature_description VARCHAR(80)
);

CREATE TABLE `Properties` (
  property_id INTEGER,
  property_type_code VARCHAR(20) REFERENCES Ref_Property_Types(property_type_code),
  date_on_market DATETIME,
  date_sold DATETIME,
  property_name VARCHAR(80),
  property_address VARCHAR(255),
  room_count INTEGER,
  vendor_requested_price DECIMAL(19,4),
  buyer_offered_price DECIMAL(19,4),
  agreed_selling_price DECIMAL(19,4),
  apt_feature_1 VARCHAR(255),
  apt_feature_2 VARCHAR(255),
  apt_feature_3 VARCHAR(255),
  fld_feature_1 VARCHAR(255),
  fld_feature_2 VARCHAR(255),
  fld_feature_3 VARCHAR(255),
  hse_feature_1 VARCHAR(255),
  hse_feature_2 VARCHAR(255),
  hse_feature_3 VARCHAR(255),
  oth_feature_1 VARCHAR(255),
  oth_feature_2 VARCHAR(255),
  oth_feature_3 VARCHAR(255),
  shp_feature_1 VARCHAR(255),
  shp_feature_2 VARCHAR(255),
  shp_feature_3 VARCHAR(255),
  other_property_details VARCHAR(255)
);

CREATE TABLE `Other_Property_Features` (
  property_id INTEGER REFERENCES Properties(property_id),
  feature_id INTEGER REFERENCES Other_Available_Features(feature_id),
  property_feature_description VARCHAR(80)
);

","###Tables: properties;
###Columns: properties.room_count, properties.property_type_code, properties.property_name;
"
